<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
    <link rel="stylesheet" type="text/css" href="style.css">
    <title>Numeric Processing</title>
    <link rev="made" href="mailto:walker@cs.grinnell.edu">
</head>

<body>
<div class="body">
<!--#include file="header.inc"-->

<div class="labcontent">

<h1>Laboratory Exercise on Integer Processing</h1> 

<h2>Goals:</h2>  

<p>
This laboratory exercise provides practice with
</p>

<ul>
<li>
experimenting with the representation of integers, using both fixed-size
storage and variable-size storage,
<li>
comparing capabilities of 16-bit signed integers and 32-bit signed
integers, and
<li>
determining what happens when the maximum size of integers is obtained.
</ul>

<h2>Preliminaries</h2>

<p>
This lab utilizes a program and a script for processing integer values:
</p>

<ul>
<li>
<p>
<a href="integer-rep.c"
   target="c-prog">~walker/c/fluency-book/integer-rep.c</a> is written in
   the C programming language and utilizes fixed-size-storage (both short
   and long integers)
</p>

<li>
<p>
<a
href="integer-rep" target="scheme-prog">~walker/scheme/fluency-book/integer-rep</a>
is a script that utilizes the Scheme programming language and 
variable-size-storage.
</p>
</ul>

<h2>Preparation before Class</h2>

<ul>
<li>Reading:  <a href="reading-binary.shtml">Binary Representation
of Integers in Java</a> by Christine Wright and Samuel Rebelsky, with
revisions by Marge Coahran.
</ul>

<h2>Work Started in Class</h2>

<h3>Positive Integers and Their Representation</h3>

<p>
Your reading described how positive integers are stored within a computer.
This part of the lab asks you to apply your understanding from this reading
to positive integers, as observed on a computer.
</p>

<h3>The Fixed-Size-Storage Approach for Positive Integers</h3>
<p>
The first several experiments in this lab utilize a program
<tt>integer-rep</tt>.  This program is written in the C programming
language.  In this language (and in most others), integers are stored using
a <i>fixed-size-storage approach</i>, as described in the reading.  
</p>

<ol>
<li>
<p>
Copy <tt>~walker/c/fluency-book/integer-rep.c</tt> to your account and
compile it.  Run <tt>integer-rep</tt>, which initially shows the binary
representation of the number 1.  Use the operation "A" to add 1
to the values.  Then use "A" again, and again, and again.  (When starting
with the value 1, the integers will become 2, 3, 4, and 5.)
</p>

<p>
Review the binary representation of each integer, and explain why it has
the binary representation printed.
</p>

<li>
<p>
Use the "M" option to set the value to 12.  Then use the "M" option 5
times, each time multiplying the values by 2 to obtain 24, 48, 96, 192, and
384.  Explain why the binary representation of each integer looks as it
does, including how the pattern of 0's and 1's obtained changes as you go
from one of these numbers to the next.
</p>

<li>
<p>
Try to use the "I" option to set the integer to a 5-digit positive integer
(e.g., 10000), a 10-digit positive integer (e.g., 2000000000), a 15-digit
positive integer, and a 20-digit positive integer.  Explain what happens in
each case.
</p>

</ol>

<h3>The Variable-Size-Storage Approach for Positive Integers</h3>

<p>
While <tt>integer-rep.c</tt> illustrates how integers usually are stored in
computers, a few environments utilize the variable-size-storage approach.
The Scheme programming language and environment illustrates this
alternative approach.  With variable-size-storage, the binary
representation does not have a 16-bit or 32-bit form; rather, the binary
representation uses as many bits as needed.  Our experiments will use the
script <tt>~walker/scheme/fluency-book/integer-rep</tt>
</p>

<ol start="4">
<li>
<p>
Run <tt>~walker/scheme/fluency-book/integer-rep</tt>, written in Scheme.
That is, type the following line into a terminal window:
</p>

<pre>
~walker/scheme/fluency-book/integer-rep
</pre>

<p>
This program has much the same interface as the C version you used
above.<br>  Check that the operations for entering integers, addition,
subtraction, multiplication, and division work as they did with the C
version:
</p>

<li>
<p>
Following the same approach as Step 1, determine the binary representations
for the positive integers 1, 2, 3, 4, and 5.  To what extent are these the
same or different from the fixed-size-storage approach?
</p>

<li>
<p>
Repeat Step 3 with this Scheme-based script.
</p>
</ol>

<h3>Negative Integers and Their Representations</h3>

<p>
Now that we have some experience with non-negative integers, we look at a
few negative numbers.
</p>

<h3>The Fixed-Size-Storage Approach for Negative Integers</h3>

<ol start=7>
<li>
<p>
As in Steps 1-3, use the C program <tt>integer-rep.c</tt> and the "I"
option to set the program's values to -1, -2, -3, and -5.  Review the 0's
and 1's to determine whether the computer uses sign-magnitude notation,
ones complement notation, or twos complement notation.  Write a paragraph
to justify your conclusion.
</p>

<li>
<p>
Use the "I" option to enter -32766.  Then use the "S" option four
times to subtract 1 from -32766 .  What results do you get with the 16-bit
integer form and with the 32-bit integer?  Explain why you get each result.
</p>

</ol>

<h2>Homework</h2>

<h3>The Fixed-Size-Storage Approach for Negative Integers, Continued</h3>
<ol start=9>
<li>
<p>

Use the "A" option several times to add 1 to your result of step 8.  What
can you conclude about the maximum integer that can be stored in 16 bits
(assuming the processing is allowed to handle both negative and positive
numbers)?
</p>

<li>
<p>
Use a similar approach to find the maximum integer that can be stored in a
32-bit (signed) integer.  Explain your result and how you got it.
</p>

<li>
<p>
Read the <a
href="http://www.securityfocus.com/archive/1/385571/2004-12-25/2004-12-31/0">news
account</a> of the computer-related difficulties that grounded all of
Comair's flights on December 25, 2004.  The article states, the computer
system for Comair "has a hard limit of 32,000 changes in a single month."
Other articles confirmed that this problem was due to a field in a database
that was designed as a 16-bit integer.
</p>

<ol class="withloweralpha">
<li>
<p>
What do you think was the real (not rounded) limit for changes to
crews at Comair?  
</p>

<li>
<p>
From what you know about the fixed-storage-approach for storing integers,
identify one or two ways this problem could have been avoided.
</p>

</ol>


</ol>

<h3>The Variable-Size-Storage Approach for Positive Integers</h3>

<ol start="12">
<li>
<p>
Using <tt>~walker/scheme/fluency-book/integer-rep</tt>, enter very large
negative numbers (e.g., over 20 digits).  Explain what happens.
</p>

</ol>

<h2>Summary</h2>

<ol start=13>
<li>
<p>
Review your experiments with both the fixed-size-approach and 
the variable-size-approach for storing integers, and write a paragraph
summarizing the observations you have made.
</p>
</ol>

<!--#include file="body-footer.inc" -->
</div>
<div class="footer">

<br>
<hr>
<br>

This document is available on the World Wide Web as

<BLOCKQUOTE>
<PRE>
http://www.cs.grinnell.edu/~walker/courses/161.sp14/data-representation/lab-integer-proc.shtml
</PRE>
</BLOCKQUOTE>

<hr>
<table width="100%">
<tr><td>
   <em>created 14 January 2005 by Henry M. Walker</em><br>
   <em>revised 11 February 2009 by Henry M. Walker</em><br>
   <em>revised 29 October 2011 by Henry M. Walker</em><br>
   <em>revised (program display) 20 July 2012 by Henry M. Walker</em><br>
   <em>revised (reorganized, compressed) 16 January 2014 by Henry M. Walker</em>
   </td>

   <td rowspan=3 align=right>
    <a href="http://validator.w3.org/check/referer"><img border="0"
        src="/~walker/valid-html401-blue.png"
        alt="Valid HTML 4.01!" height="31" width="88"></a>
   <a href="http://jigsaw.w3.org/css-validator/">
   <img style="border:0;width:88px;height:31px"
       src="/~walker/vcss-blue.png" 
       alt="Valid CSS!"></a>
   </td>
</tr>
<tr><td>
   For more information, please contact
   <a class="footer-a" href="/~walker/">Henry M. Walker</a> at
   <a class="footer-a" href="mailto:walker@cs.grinnell.edu">walker@cs.grinnell.edu</a>.
   </tr>
</table>

<hr>
<!--#include file="copyright-notice.inc"-->


</div>
</div>

</body>
</html>
