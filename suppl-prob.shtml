<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
    <link rel="stylesheet" type="text/css" href="style.css">
    <title>Supplemental Problems for Computer Science 161</title>
    <link rev="made" href="mailto:walker@cs.grinnell.edu">
</head>
<div class="body">

<!--#include file="header.inc"-->

<div class="labcontent">

<H2>Supplemental Problems </H2>

<p>
<b><u>Problems on this page are under revision; started problems (*) are likely
to change before the semester begins.  Do not rely upon this page until
classes start in August!</u></b>
</p>

<p>
Supplemental Problems extend the range of problems considered in the course
and help sharpen problem-solving skills.  To support this objective,
<b>all Supplemental Problems are to be done individually.</b>
</p>

<ul>
<li>
You may ask the instructor about any part of the course (including any
Supplemental Problem) at any time.
<li>
You should not discuss any Supplemental Problem with other students (e.g.,
students from the class, CS majors, or other students).
<li>
Help from assistants in the lab is limited.
See <a href="http://www.cs.grinnell.edu/~walker/courses/161.sp14/tutors-in-161.shtml">The
    Role of Tutors For Computer Science 161</a> for details.
</ul>

<p>
Problems numbered 6 or higher may be turned in for extra credit.
</p>

<p>
<i>Quick links:</i>
<a href="#1">   1</a>,       <a href="#2">   2</a>,
<a href="#3">   3</a>,       <a href="#4">   4</a>,
<a href="#5">   5</a>,       <a href="#6">   6</a>,
<a href="#7">   7</a>,       <a href="#8">   8</a>,
<a href="#9">   9</a>,       <a href="#10"> 10</a>,
<a href="#11"> 11</a>,       <a href="#12"> 12</a>,
<a href="#13"> 13</a>,       <a href="#14"> 14</a>,
<a href="#15"> 15</a></p>

<h3>Submission Details</h3>

<p>
Use the link, <a href="coursework-notes.shtml">Detailed Coursework
Instructions</a>, to find specific insturctions regarding code,
submission, and testing of supplemental problems.
</p>

<h3>Some Grading Notes:</h3>
<ul>
<li>
Since every programming task should yield readable and carefully tested code,
the grading of all programs for this course will begin with the following
algorithm (expressed in C format):

<pre><tt>
   if ((no_comments)
        || (missing pre- or post-conditions)
        || (formatting_does_not_show_structure)
        || (long_procedures_not_divided_into_sections_with_clarifying_comments)
        || (no_evidence_of_compilation)
        || (no_test_plan___no_listing_of_circumstances__OR__no_listing_of_test_cases)
        || (no_test_runs)
        || (no_commentary_on_correctness))
        || (no_signed_certification_regarding_sources_and_help)
        || (use of Bubble Sort or non-approved sorting algorithm)
     return (no_grade);
</tt></pre>

<li>
<p>
When a program and its output are submitted according to the above
instructions, it should be understood that any output was generated by the
program as given, unless explicit comments indicate changes that might have
been made.  Discrepencies between a program and an output file may
raise questions of academic dishonesty; and, by College policy, any
evidence of academic dishonesty must be turned over to the Academic
Standing Committee for action.
</p>

<li>
<p>
Grading for each supplemental problem will involve two parts:
<ul>
<li>
A <a href="grading-form.pdf">general feedback form</a> that highlights
common characteristics of good programming practice.
<li>
A problem-specific form tailored to the individual problem.
</ul>

</ul>
<hr>

<!-- 1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1 -->
<ol>
<li>
<a name="1"></a>
<h3>Currency Conversion</h3>

<p>
In the United Kingdom and some British Crown dependencies, modern
currency is based on the <i>pound sterling</i>, often identified simply as
the <i>pound</i> or by the abbreviation <i>GBP</i>.  Further, the pound may
be subdivided into 100 <i>pence</i>.  (The singular form of pence
is <i>penny</i>.)  When this problem was written, 
</p>

<center>
<p>
1.00 GBP = $1.69759 (United States dollars)
</p>
</center>

<p>
Write a program that begins with a specification of a quantity using
British currency, such as the following:
</p>

<pre>
   int pounds = 17;
   double pence = 32.85
</pre>

<p>
The program then should compute the corresponding amount in United States
dollars and cents.  This amount should then be specified in one-, five-,
ten-, and twenty-dollar bills, and pennies.  Your computation should use
the fewest number of bills.  Also, fractions of a cent should be ignored
&mdash; that is, you should not round up fractions of a penny.
</p>

<p>
For example, the program might print the following:
</p>

<pre>
   17 pounds 32.85 pence translates to $29.41
   This may be paid as
   1 twenty-dollar bill
   1 five-dollar bill
   4 one-dollar bills
   41 cents in change
</pre>

<p>
<i>Notes:</i>
</p>

<ul>
<li>
17 pounds 32.85 pence actually translates to $29.4166883.  Since fractions
of a cent are ignored (no rounding as currency exchanges never give more),
the customer would receive $29.41.  
<li>
Do NOT try to compute how many of each coin type should be given to the
customer (pennies, nickels, dimes, and quarters).
<li>
In translating this amount to dollars and cents, note that only bills
actually used are printed.  (No ten-dollar bill is listed in the above
output.)
<li>
When one bill of a given type is mentioned, the output uses the singular
form "bill" (e.g., "1 twenty-dollar bill"); but when multiple bills of a
given type are needed, then the plural form is given (e.g., "4 one-dollar
bills").
<li>
If no pennies are needed, the "cents" line should not be printed.  If only
one penny is needed, then the singular form, "1 cent in change", should be
printed.
<li>
The program should not use loops to compute bills or change.  Rather, use
integer division (/) and remainder (%) in computations.  For example,
if <tt>usd</tt> is the amount of dollars involved (as an <tt>int</tt>),
then <tt>usd&nbsp;/&nbsp;20 </tt> will compute the number of twenty-dollar
bills required, and <tt>usd&nbsp;%&nbsp;20 </tt> is the amount of money
needed in smaller bills.
</ul>

<p>
Grading Forms
</p>

<ul>
<li>
A <a href="grading-form.pdf">general feedback form</a> that highlights
common characteristics of good programming practice.
<li>
<a href="suppl1-grading-form.shtml">Problem-specific grading form for
  Supplemental Problem 1</a>
<li>
<a href="sup-prob1-start.c">A sample start for this C program</a>
</ul>

</ol>

<!-- Spring 2014 -->
<!--
<ol>
<li>
<h3>Parking Lot Charges</h3>

<p>
A downtown parking lot charges $0.75 per hour for parking between 7:00 am
and 5:00 pm, $2.00 per hour between 5:00 pm and midnight (high demand for
people seeking entertainment), and $1.25 between midnight and 7:00 am
(since late night requires an attendant to be paid time and a half).
<p>

<p>
In this problem, we consider cars parked for 24 hours or less; to avoid the
parking lot becoming a dumping ground, cars may <i>NOT</i> be parked
continuously in the lot for more than a day.
</p>

<p>
By widely-used convention, midnight is considered 12:00 am, and noon is
considered 12:00 pm.
</p>

<p>
Write a program that begins with six assignment statements regarding a
car's starting and ending times in the lot:
</p>

<ul>
<li>
starting hour:  hour car entered lot (<tt>int 1..12</tt>)
<li>
starting minute:  minute car entered lot (<tt>int 0..59</tt>)
<li>
start before or after noon:  <tt>char 'a'</tt> for am or <tt>char 'p'</tt>
for pm 
<li>
ending hour:  hour car left lot (<tt>int 1..12</tt>)
<li>
ending minute:  minute car left lot (<tt>int 0..59</tt>)
<li>
end before or after noon:  <tt>char 'a'</tt> for am or <tt>char 'p'</tt>
for pm 
</ul>

<p>
The program then should use these times to compute the parking fee charged
for the car.
</p>



<p>
Three sample variable assignments follow:
</p>

<ul>
<li>
Car parked 24 hours from 12 midnight one day to 12 midnight the next.
<pre>
   int start_hour = 12;
   int start_minute = 0;
   int start_ampm = 'a';
   int end_hour = 12;
   int end_minute = 0;
   int end_ampm = 'a';
</pre>

<li>
Car parked from 5:10 am to 10:47 pm
<pre>
   int start_hour = 5;
   int start_minute = 10;
   int start_ampm = 'a';
   int end_hour = 10;
   int end_minute = 47;
   int end_ampm = 'p';
</pre>
<li>
Car parked from 5:15 pm to noon the next day
<pre>
   int start_hour = 5;
   int start_minute = 15;
   int start_ampm = 'p';
   int end_hour = 12;
   int end_minute = 0;
   int end_ampm = 'p';
</pre>

<p>
<i>Programming Notes:</i>   
</p>

<ul>
<li>
You may NOT use loops or recursion in this program.
<li>
Rather than work with hours, minutes and am/pm throughout the program, you
may want an internal variable (e.g., <tt>starttime</tt>
and <tt>endtime</tt>) that works with a 24-hour clock.  Presumably, the
values of these internal variables would be computed based on the six
specified variables.
</ul>

<p>
Grading Forms
</p>

<ul>
<li>
<a href="suppl1-grading-form.shtml">Problem-specific grading form for
  Supplemental Problem 1</a>
<li>
<a href="sup-prob1-start.c">sample start for C program</a>
</ul>

<p>
<b>Note:</b>  In addition to the program, a separate page should indicate
what cases should be considered in the testing of this program, what test
data have been identified to test the program in each of the cases, and
what the program printed for each of the tests.
</p>

<p>
Sample solutions:
</p>

<ul>
<li>
<a href="c/parking-lot/program-stats">program statistics</a>
<li>
<a href="c/parking-lot/parking-lot-1.c">parking-lot-1.c</a>
<li>
<a href="c/parking-lot/parking-lot-min-max-1.c">parking-lot-min-max-1.c</a>
<li>
<a href="c/parking-lot/parking-lot-2.c">parking-lot-2.c</a>
<li>
<a href="c/parking-lot/parking-lot-3.c">parking-lot-3.c</a>
</ul>

</ol>
-->

<!-- Fall 2013 -->
<!--
<ol>
<li>
<h3>Car Insurance Rates for Drivers 16-24 Years Old</h3>

<p>
Insurance rates for drivers 16-24 years old depend on numerous factors,
including age, driving environment (e.g,. urban, suburban, rural), make,
model and age of car, etc.  Also, after establishing a basic insurance
rate, discounts may be available for certain types of drivers.  This
problem considers a simplified rate schedule for car insurance.
</p>

<p>
According to <a href="http://autos.aol.com/article/teen-car-insurance">Aol
    Autos</a>, the average annual base rate for a high school or
    college-age driver is:
</p>

<table border>
<tr>
   <th>Age
   <th>Average Annual Rate
</tr>
<tr>
   <td>16-19
   <td align=center>$2,999
</tr>
<tr>
   <td>20-24
   <td align=center>2,040
</tr>
</table>

<p>
From this base, insurance companies offer various discounts.  For the
purposes of this problem, consider the following discounts that may or may
not be typical.
</p>

<ul>
<li>
Students with good grades can get a "good student" discount:  25%
<li>
Young drivers who have had a driving course can get a "driver education"
discount:  21%
<li>
Young drivers who have been driving at least 3 years can get a "good
driver" discount, if they have not had an accident or traffic ticket in the
past 3 years:  17%
</ul>

<p>
When a young driver is eligible for several of these discounts, combination
rules may apply.  For the purposes of this problem, apply the following
rules which may or may not reflect practice.
</p>

<ul>
<li>
If a driver is eligible for two of these discounts, then the discounts are
added &mdash; up to a 40% discount.
<li>
If a driver is eligible for all three discounts, then the driver receives a
50% discount.
</ul>
-->
<!-- ranges from Web sources
Good student discount:  25%
Driver education: 20-30%
Good driver discount:  5-20%
Average rates:  16-19:  $2,999
                20-24   $2,040
-->
<!--
<p>
The following table summarizes these discounts:
</p>

<table border>
<tr>
  <th>Good Student
  <th>Driver Education
  <th>Good Driver
  <th>Discount
</tr>
 <tr>
  <td align=center>Yes
  <td align=center>No
  <td align=center>No
  <td align=center>25%
</tr>
<tr>
  <td align=center>No
  <td align=center>Yes
  <td align=center>No
  <td align=center>21%
</tr>
<tr>
  <td align=center>No
  <td align=center>No
  <td align=center>Yes
  <td align=center>17%
</tr>
<tr>
  <td align=center>Yes
  <td align=center>Yes
  <td align=center>No
  <td align=center>40%
</tr>
<tr>
  <td align=center>Yes
  <td align=center>No
  <td align=center>Yes
  <td align=center>40%
</tr>
<tr>
  <td align=center>No
  <td align=center>Yes
  <td align=center>Yes
  <td align=center>38%
</tr>
<tr>
  <td align=center>Yes
  <td align=center>Yes
  <td align=center>Yes
  <td align=center>50%
</tr>
</table>

<p>
Write a program that contains a drivers age (between 16 and 24, inclusive),
whether or not the driver is a "good student", has had "drivers education",
and is a "good driver" (drivers at least 19).  (For each factor, the
program should have a variable, with value 1 or 0 reflecting whether that
factor applies.  For example, a <tt>good_Driver</tt> variable would be 1 if
the driver is eligible for a "good driver" discount and 0 if not.)  The
program then should print the annual car insurance rate for this driver,
based on the above sample data.
</p>

<ul>
<li>
<a href="suppl1-grading-form.shtml">Problem-specific grading form for
  Supplemental Problem 1</a>
<li>
<a href="sup-prob1-start.c">sample start for C program</a>
</ul>

<p>
<b>Note:</b>  In addition to the program, a separate page should indicate
what cases should be considered in the testing of this program, what test
data have been identified to test the program in each of the cases, and
what the program printed for each of the tests.
</p>

</ol>
-->
<!--fall 2012-->
<!--
<h3>Classifying SAT and ACT Scores</h3>

<ol>
<li>
<p>
Each fall, the Departments of Computer Science and Mathematics and
Statistics provide recommended placements for incoming students in first
courses in computer science, mathematics, and statistics.  Overall, the
process involves about 125 rules within a reasonably complex system.
</p>

<p>
One of the early steps in this process involves the classification of
standardized scores, based on student scores on the SAT and/or ACT.  The
following edited table suggests the basic framework for a classification.
</p>

<center>
<table>
<tr>
  <th>Category  
  <th>SAT Range
  <th>ACT Range
</tr>

<tr>
  <td align=center>Superior
  <td align=center>700&ndash;
  <td align=center>31&ndash;
</tr>

<tr>
  <td align=center>Excellent
  <td align=center>640&ndash;690
  <td align=center>28&ndash;30
</tr>

<tr>
  <td align=center>Strong
  <td align=center>600&ndash;630
  <td align=center>26&ndash;27
</tr>

<tr>
  <td align=center>Good
  <td align=center>550&ndash;590
  <td align=center>24&ndash;25
</tr>

<tr>
  <td align=center>Adequate
  <td align=center>480&ndash;540
  <td align=center>20&ndash;23
</tr>

<tr>
  <td align=center>Participating
  <td align=center>&ndash;470
  <td align=center>&ndash;19
</tr>
</table>
</center>
 
<p>
Although this table provides a starting point, students scores sometimes
differ substantially from one test to another.  This leads to the following
rules for determining the actual category for a student' standardized
scores.
</p>

<ul>
<li>
If a student takes the SAT several times, only the best SAT score is
considered.
<li>
If a student takes the ACM several times, only the best ACT score is
considered.  

<li>
If a student takes the SAT or the ACT, but not both, then the above table
provides the classification.
<li>
If a student takes both the SAT and ACT,
<ul>
<li>
the student's classification is the higher of the two categories from the
above table, EXCEPT
<li>
if the categories differ by three or more levels, then the top category is
lowered by one.
</ul>
<li>
If a student has not taken either the SAT or ACT, the category is specified
as "Unknown".
</ul>

<p>
<b>Examples:</b>
</p>

<ul>
<li>
A student with a 650 SAT or 28  ACT (or both) would be placed in category
"Excellent" for standardized scores.
<li>
A student with a 650 SAT and 24 ACT would be placed in category
"Excellent", based on the 650 SAT.  (The 24 ACT is two categories lower
than the 650 SAT, and two categories is not enough to lower the
classification.)
<li>
A student with a 650 SAT and a 23 ACT would be placed in category
"Strong".  (The "Excellent" category from the SAT would be lowered by one,
since the 23 ACT is three categories lower.)
</ul>

<p>
Write a program that computes the appropriate category for a specified SAT
and ACT score.  Rather than read SAT or ACT scores from the keyboard, the
program should assign an SAT and ACT score to variables at the very
beginning of the program.   If the student has not taken an SAT or an ACT
test, then the variable for that test should be set to 0.
</p>
-->

<!--
<h3>Computing a Babysitter's Fee</h3>

<ol>
<li>
<p>
A baby sitter charges $1.50 per hour until 9:00 pm (while the kids
are still up),  $1.00 per hour between 9:00 pm and midnight, and $1.25 per
hour after midnight (since late night baby sitting interferes with morning
classes).<p>

<p>

Write a program that begins with four integer variables (the sitter's
starting time in hours and minutes and the ending time in hours and
minutes) and computes the sitter's fee.  Assume all times are between 6:00
pm and 6:00 am, and hours should be specified as being between 0 and 12
(inclusive).  Hours outside the range of 0 to 12 should be considered
invalid.
</p>

<ul>
<li>
The hour 6 should be considered as 6:00 pm, when it is entered as a
starting time.
<li>
The hour 6 should be considered as 6:00 am, when it is entered as an
ending time.
</ul>

<p>
The following table may clarify allowed time values for this problem.
</p>

<center>
<table>
<tr>

<th align="center">Starting <th align="center">Starting 
  <th align="center">Ending <th align="center">Ending 
  <th align="center">Starting<th align="center">Ending 
</tr>
<tr>
<th align="center">Hour     <th align="center">Minutes  
  <th align="center">Hour     <th align="center">Minutes
  <th align="center">Time     <th align="center">time
</tr>
<tr>
<td align="center">8        <td align="center">0        
  <td align="center">3      <td align="center">30   
  <td align="center">8:00pm <td align="center">3:30am

</tr>

<tr>
<td align="center">6        <td align="center">0        
  <td align="center">0      <td align="center">45   
  <td align="center">6:00pm <td align="center">12:45am
</tr>

<tr>
<td align="center">12        <td align="center">0        
  <td align="center">6      <td align="center">0   
  <td align="center">12:00am (midnight) <td align="center">6:00am

</tr>
</table>
</center>

<p>
<i>Programming Note:</i>  You may NOT use 
loops or recursion in this program.  
</p>

</ol>
-->

<!--Spring  2013
<h3>Making Change:</h3>

<ol>
<li>
<p>
Write a program that contains the cost of an item and the
amount paid by the customer, and then prints out the difference (the amount
owed to the customer).  Also print out how many bills of each denomination
should be given to the customer (one-, five-, ten-, and twenty-dollar
bills), and the remainder to be paid in coins.  
</p>

<p>
<i>Notes:</i>
<ul>
<li>
Rather than read the cost and amount paid, the program should assign the
cost of an item and the amount paid by the customer to variables at the
very beginning of the program.
<li>
The output should have the following form, using correct grammar:
<pre>
Item cost:  $ 12.75
Amount paid:  $ 20.00
Change:  $ 7.25
   0 twenties
   0 tens
   1 five
   2 ones
   0.25 change
</pre>

<p>
Here is another example:
</p>

<pre>
Item cost:  $ 18.45
Amount paid:  $ 50.00
Change:  $ 31.55
   1 twenty
   1 ten
   0 fives
   1 one
   0.55 change
</pre>

<p>
In summary, "twenty", "ten" "five", "one" (singular) appear if the number of
bills is one, but "twenties", "tens", "fives", and "ones" (plural) appear
if the number of bills is either zero or greater than one.
</p>

<li>
Your computation should use the fewest number of bills. 
<li>
Do NOT try to compute how many of each coin type should be given to the
customer (pennies, nickels, dimes, and quarters).
</ul>

<p>
<a href="suppl1-grading-form.shtml">Problem-specific grading form for
  Supplemental Problem 1</a>
</p>
-->

 <!-- 2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2 -->

<ol start=2>
<li> 
<a name="2"></a>
<h3>Making Early Loan Payments</h3>

<p>
When investigating a loan, a customer typically states the amount of
money (<tt>loanAmount</tt>) and specifies the loan's length (number of
months <tt>N</tt>).  A bank or other lender proposes an annual interest
rate (<tt>annRate</tt>) for the loan.  With this information, the
monthly <tt>payment</tt> for the loan is given by the formulae:
</p>

<pre>
     monthlyRate = annRate / 1200.0<br>
     payment = loanAmount * monthlyRate / (1.0 - (1 + monthlyRate)<sup>(-N)</sup>)
</pre>

<p>
For example, a loan to purchase a house might involve $26,000 for 25 years
(300 months) at an annual rate of 8.75%, yielding a monthly payment of
$213.76.
</p>

<p>
The expectation is that the customer will pay this amount (in dollars and
cents) each month, although a slight adjustment may be needed the last
month to make up for any rounding in the computation.
</p>

<p>
The expected payment notwithstanding, the terms of many loans allow the
customer to pay an additional amount for one or more months in order to
shorten the length of the loan and possibly save some interest charges.
This problem investigates the consequences of paying twice the required
amount for the first few months.
</p>

<p>
More specifically, the program should have these charactertistics:
</p>

<ul>
<li>
The beginning of the program should specify the values of the loan amount,
length (in months), and annual interest rate.
<li>
The program should compute the normal loan payment using at least two
functions:
<ul>
<li>
<tt>double compute_neg_power (double value, int n)</tt><br> that
returns <tt>1 / (value)<sup>n</sup></tt>.<br>
(In the computation, the function should use successive multiplications
rather than the more general, but less efficient, C library <tt>pow</tt>
function.) 
<li>
<tt>double compute_payment (double annRate, int months, double amt)</tt><br>
that returns the monthly payment for the given parameters.
<li>
<tt>compute_payment</tt> should call <tt>compute_neg_power</tt>.
</ul>
<li>
The <tt>main</tt> procedure should determine the actual length of the loan
and the total amount paid assuming each of three payment options:
<ul>
<li>
The customer pays exactly the expected amount each month (except that the
last month may be smaller, if appropriate)..
<li>
The customer pays twice the expected amount the first month and then the
expected amount each subsequent month (except that the last month may be
smaller, if appropriate).
<li>
The customer pays twice the expected amount each month in the first year
and then the expected amount each subsequent month (except that the last
month may be smaller, if appropriate).
</ul>
<li>
Some programming constraints:
<ul>
<li>
No global variables may be used in this program.  
<li>
When using functions, all relevant values must be passed as parameters.
<li>
Values may be returned from functions either through a return statement or
via parameters (with addresses).
<li>
No <tt>printf</tt> statements are allowed in any final function
except <tt>main</tt>. (<tt>printf</tt> may be used in functions for
testing, but these should be commented out for any final runs.)  In
particular, neither function <tt>compute_neg_power</tt> nor
function <tt>compute_payment</tt> should print anything.
</ul>
<li>
Computations of actual payments and the cost of the loan should be given
to the nearest cent.  Note that if <tt>double value</tt> is a real number,
then
<ul>
<li>
<tt> ((int)(value * 100.0)) / 100.0</tt> truncates <tt>value</tt> to
two decimal places, and 
<li>
<tt> ((int)(value * 100.0 + 0.5)) / 100.0</tt> rounds <tt>value</tt> to
two decimal places.
</ul>

<li>
In addition to computing the cost of the loan for the three payment plans,
the program should indicate the additional costs (if any) of each of the
first two payment options over the third.

</ul>

<p>
Grading Forms
</p>

<ul>
<li>
A <a href="grading-form.pdf">general feedback form</a> that highlights
common characteristics of good programming practice.
<li>
<a href="suppl2-grading-form.shtml">Problem-specific grading form for
  Supplemental Problem 2</a>
</ul>

</ol>

<!--
<h3>Times for Walking and Running</h3>

<p>
When running or walking for exercise, it is not uncommon for an individual
to determine the time it takes to travel 1/4 mile (in minutes and seconds)
and to compute one's speed in miles per hour or kilometers per hour.
</p>

<p>
Write a program that prints a table of speeds in the following format:
</p>

<pre>
           Speed in MPH and KPH, Given Time for 1/4 mile
                              Minutes
Seconds    3          4          5          6          7
   0
   1
   2
   3
 ...
  29
  30                          2.7/4.4
  31
 ...
  59
</pre>

<p>
For example, in this table, if an individual covers 1/4 mile in 5 minutes,
30 seconds, then the person is traveling about 2.7 miles per hour (MPH) or,
equivalently, 4.4 kilometers per hour (KPH).
</p>

<p>
<i>Programming Notes:</i>
</p>

<ul>
<li>
1 mile is approximately 1.60344 kilometers
<li>
Your solution must include a function <tt>compute_mph</tt> to compute miles
per hour, given time in minutes and second for traveling 1/4 mile.  The
function should have the following signature:
<pre>
double compute_mph (int min_time, int sec_time)
</pre>
<li>
Your solution also must include a function <tt>compute_kph</tt> to compute
kilometers per hour, given time in minutes and second for traveling 1/4
mile.  The function should have the following signature:
<pre>
double compute_kph (int min_time, int sec_time)
</pre>
<li>
<tt>compute_kph</tt> should call <tt>compute_mph</tt> to obtain MPH and
then convert miles to kilometers.
<li>
To print <tt>double</tt> numbers to one decimal place, use <tt>%3.1lf</tt>
format (or <tt>%4.1lf</tt>).  The .1 indicates 1 digit will be printed
after the decimal point.
</ul>

<p>
Grading Forms
</p>

<ul>
<li>
<a href="grading-form.pdf">General grading form</a>
<li>
<a href="suppl2-grading-form.shtml">Problem-specific grading form for
  Supplemental Problem 2</a>
</ul>
</ol>
-->

<!--new for fall 2013-->
<!--
<ol start=2>
<li> 
<h3>Status of Loan Balance</h3>

<p>
The wording of this problem is slightly edited from Problem 9 in Section
3.2 of "Problems for Computer Solutions Using BASIC" by Henry M. Walker,
Winthrop Publishers, 1980.
</p>

<p>
If $387.46 for an airline ticket is charged on a credit card, the company
may specify a minimum monthly payment of $15.00 each month until the loan
is paid off.  This problem asks you to investigate the "cost" of making
only the minimum payment.  Interest might be charged at the rate of 1.5% of the
outstanding balance at the end of a month.  The balance for the next month
is computed by the formula:
</p>

<center>
new balance = old balance + interest - payment
</center>

<p>
Write a program that contains the initial balance of a loan, the monthly
interest rate, and the constant monthly payment.  Have the program print a
labeled table showing the month number and the balance at the beginning of
that month (the balance at the beginning of the month 1 is the amount
borrowed).  Continue printing until a payment would cause the balance to
drop to zero or below.  Also print the final payment necessary to close the loan,
the total amount made in payments, and the "cost" of the loan (total
payments - loan).
</p>

<p>
<a href="suppl2-grading-form.shtml">Problem-specific grading form for
  Supplemental Problem 2</a>
</p>

</ol>
-->
<!-- Spring 2013 
<ol start=2>
<li> 
<h3>Mortgage Payments</h3>

<p>
The monthly <tt>payment</tt> on a mortgage which will amortize (be paid off)
in <tt>N</tt> years with a given annual interest <tt>rate</tt> is given by
the formulae:
</p>

<blockquote>
<tt>
&nbsp;&nbsp;&nbsp;&nbsp;monthlyRate = rate / 1200.0<br>
&nbsp;&nbsp;&nbsp;&nbsp;payment = amount * monthlyRate / (1.0 - (1 + monthlyRate)<sup>(-12*N)</sup>)
</tt>
</blockquote>

<p>
where <tt>amount</tt> is the amount borrowed.
</p>

<p>
Write a program that computes the monthly payment and total amount paid
over the life of the loan, and produces a table of the following form:
</p>

<center>
<table>
<tr>
  <td>annual rate
  <td>years
  <td>amount
  <td>monthly payment
  <td>total paid
</tr>
<tr>
  <td align=center>8.75
  <td align=center>25
  <td align=center>26000
  <td align=center>213.76
  <td align=center>64128.00
</tr>
<tr>
  <td align=center>5.35
  <td align=center>30
  <td align=center>90000
</tr>
<tr>
  <td align=center>5.35
  <td align=center>20
  <td align=center>90000
</tr>
<tr>
  <td align=center>4.35
  <td align=center>25
  <td align=center>90000
</tr>
<tr>
<td align=center>...
</tr>
</table>
</center>

<p>
Your program should have these features:
</p>
<ul>
<li>
Three functions should be defined:
<ul>
<li>
<tt>double compute_neg_power (double value, int n)</tt><br> that
returns <tt>1 / (value)<sup>n</sup></tt>.<br>
(In the computation, the function should use successive multiplications
rather than the more general, but less efficient, C library <tt>pow</tt>
function.) 
<li>
<tt>double compute_payment (double annRate, int years, double amt)</tt><br>
that returns the monthly payment for the given parameters.
<li>
<tt>double total_paid( (double annRate, int years, double amt)</tt><br>
that returns the total amount paid over the life of the loan.
<li>
Neither function should print anything.<br>
Rather each function should return
the desired value, to be used or printed elsewhere.
<li>
<tt>total_paid</tt> should call <tt>compute_payment</tt>.
</ul>
<li>
The <tt>main</tt> procedure should have three parallel arrays, each with
the same number of entries:
<ul>
<li>
array <tt>annualRate</tt> should contain various annual interest rates.
<li>
array <tt>years</tt> should contain various lengths of mortgages, given in
years.
<li>
array <tt>amount</tt> should contain various amounts borrowed.
</ul>
<li>
The <tt>i</tt><sup>th</sup> row of the table should given the monthly
payment and total amount paid for a computation
involving <tt>annualRate[i]</tt>, <tt>years[i]</tt>,
and <tt>amount[i]</tt>.
<br>
For example, for the table given above, the first part of each array would
be as follows:

<center>
<table>
<tr>
  <td valign=top>array values for first table row:
  <td align=left>
    <ul><li><tt>annualRate[0] = 8.75;</tt>
        <li><tt>years[0] = 25;</tt>
        <li><tt>amount[0] = 26000;</tt></ul>

</tr>
<tr>
  <td valign=top>array values for second table row:
  <td align=left>
    <ul><li><tt> annualRate[1] = 5.35;</tt>
        <li><tt>years[1] = 30;</tt>
          <li><tt>amount[1] = 90000;</tt></ul>
</tr>
<tr>
  <td valign=top>array values for third table row:
  <td align=left>
    <ul><li><tt> annualRate[2] = 5.35;</tt>
        <li><tt>years[2] = 20;</tt>
          <li><tt>amount[2] = 90000;</tt></ul>
</tr>
<tr>
  <td valign=top>array values for fourth table row:
  <td align=left>
    <ul><li><tt> annualRate[3] = 4.35;</tt>
        <li><tt>years[3] = 25;</tt>
          <li><tt>amount[3] = 90000;</tt></ul>
</tr>
<tr>
<td align=center>...
</tr>
</table>
</center>

</ul>
<p>
<a href="suppl2-grading-form.shtml">Problem-specific grading form for
  Supplemental Problem 2</a>
</p>
</ol>
-->


<!--
<h3>Computing a Polynomial</h3>

<ol start=2>
<li><p>
A polynomial function has the form
</p>

<p><tt>
p(x) = a<sub>n</sub>x<sup>n</sup> + a<sub>n-1</sub>x<sup>n-1</sup> + 
... + a<sub>2</sub>x<sup>2</sup> + a<sub>1</sub>x + 
a<sub>0</sub>
</tt></p>

<p>
Write a function <tt>compute_poly</tt> that takes three  parameters:
</p>
<ul>
<li>
an <tt>x</tt> value, 
<li>
an integer <tt>n</tt> which gives the largest power of x with a
non-zero coefficient, and 
<li>
an array <tt>a</tt> of <tt>n+1</tt> coefficients (<tt>a<sub>0</sub>,
a<sub>1</sub>, ..., a<sub>n-1</sub>, a<sub>n</sub></tt>).
</ul>

<p>
and returns the value of the polynomial <tt>p(x)</tt>.
</p>

<p>
<i>Notes:</i>
</p>

<ul>
<li>
<tt>compute_poly</tt> should make only one pass through the 
list of coefficients.
<li>
Both the number <tt>x</tt> and the elements of the array <tt>a</tt> should
be real numbers (e.g., of type <tt>double</tt>) rather than integers.
<li>
The number <tt>x</tt> may be used in a multiplication operation no more
than <tt>n</tt> times in the entire computation.  (Thus,
recomputing <tt>x<sup>i</sup></tt> from scratch for each of the <tt>n</tt>
terms is not acceptable for this problem.)
<li>
Since the <tt>pow</tt> function in the <tt>math.h</tt> library requires
many multiplication operations, use of <tt>pow</tt> in this problem would
violate the condition that no more than <tt>n</tt> multiplications are
allowed in the entire solution to this problem.  (To be specific, use
of <tt>pow</tt> in this program will yield an automatic score of 0 for this
program.) 
<li>
As a hint, you may want to search for discussion of Horner's Rule
either in a book on numerical analysis or on the Web.
<li>
Be sure that the array element <tt>a[n]</tt> is used as the coefficient
of <tt>x<sup>n</sup></tt> (not the coefficient of <tt>x<sup>0</sup></tt>).
<li>
You will need to include <tt>compute_poly</tt> in a main program for
testing.  
<li>
Be sure your testing covers an appropriate range of cases.
</ul>

</ol>
-->
<!--spring 2012-->
<!--
<h3>Bowling</h3>
<ol start=2>
<li>
<p>
Write a program to score a bowling game.  Scoring details are available
from Wikipedia under <a
href="http://en.wikipedia.org/wiki/Ten-pin_bowling#Scoring">Ten-pin
Bowling</a>
</p>

<p>
The program should ask the user to enter the number of pins hit by
successive balls, tabulate the score frame-by-frame, and give the final
score. In frames when a strike is thrown, the program should not ask for
the pins hit by the second ball (as no ball is thrown).  Also, if a spare
or strike is thrown in the tenth frame, the program should ask for the
correct number of bonus balls and compute the final total appropriately.
</p>

</ol>
-->

<!-- 3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3 -->

<!-- Spring 2014 -->
<ol start="3">
<li>
<a name="3"></a>
<h3>Family Size Simulation and Histogram</h3>

<p>
<a href="modules/cond-loops-motion/cond-loops-motion.shtml">Module 001</a>
includes
programs <a href="modules/cond-loops-motion/couple-1.c">couple-1.c</a>
and <a href="modules/cond-loops-motion/couple-2.c">couple-2.c</a> that
address the following question:
</p>

<p>
<i>Family size simulation:</i> A couple decides to have children.  They
   decide to continue to have children until they have at least one boy and
   one girl.  Then they decide to stop having children.  How many children
   might the couple expect to have?
</p>

<p>
To address this question, the programs simulate the genders of successive
children and determine the number of children for each couple.  
</p>

<ul>
<li>
<a href="modules/cond-loops-motion/couple-1.c">couple-1.c</a> prints the
results for one couple.
<li>
<a href="modules/cond-loops-motion/couple-2.c">couple-2.c</a> prints the
average number of children for 1000 couples.
</ul>

<p>
This problem asks you to tabulate the results of a simulation in both a
table and a histogram.
File <a href="couple-histogram.txt">couple-histogram.txt</a> shows the
results for one run of a simulation involving 60 children.  This output has
several features:
</p>

<ul>
<li>
Records are kept based on these program variables:
<pre>
  /* the number of couples in the simulation */
  const int numberOfCouples = 60;

  /* number of children is recorded for sizes 1 .. maxRecordedSize */
  const int maxRecordedSize = 30;
  int famSize [maxRecordedSize + 1];

  /* the highest point of the histogram will have heightOfHistogram *'s */
  const int heightOfHistogram = 20;
</pre>

<p>
By defining these programs at the start of the program, a user should be
able to easily set the number of couples in the simulation, the range of
family sizes being recorded, and the height of the resulting histogram.
</p>

<li>
The number of children recorded will range from 1
to <tt>maxRecordedSize</tt>.  If a couple has a larger number of children,
then the number of children is recorded as the maximum
(<tt>maxRecordedSize</tt>).
<li>
The program counts the number of children for each couple and prints both
the average and the maximum.
<li>
The program prints a table of the number couples with total children 0, 1,
2, ..., <tt>maxRecordedSize</tt>.
<li>
The program prints a histogram showing visually how many couples have how
many children.  In a simulation of hundreds or thousands of couples, giving
a histogram showing each couple is impractical &mdash; the height of the
histogram could be very large.  Rather, the vertical scale on the histogram
should be scaled.  The top row of the histogram should show the maximum
number of couples with a specific count (likely for couples with 2
children).  Each successive row should scale the family size.  Although the
scale of the histogram should be approximately linear, some rounding or
adjustment may be required in the vertical scale because the number of
couples of a given family size may not be divided evenly by
the <tt>heightOfHistogram</tt>.
<li>
Testing should include a range of values for the
variables <tt>numberOfCouples</tt>, <tt>maxRecordedSize</tt>,
and <tt>heightOfHistogram</tt>. 
</ul>

<p>
Grading Forms
</p>

<ul>
<li>
A <a href="grading-form.pdf">general feedback form</a> that highlights
common characteristics of good programming practice.
<li>
<a href="suppl3-grading-form.shtml">Problem-specific grading form for
  Supplemental Problem 3</a>
</ul>

</ol>

<!--
<h3>A Modified Sieve Method of Erastosthenes</h3>

<p>
This problem is adapted from Problem 8.12 in <i>Introduction to Computing
    and Computer Science with Pascal</i>, Little, Brown, and Company, 1986,
    pp. 265-266. Used with permission of the copyright holder.
</p>

<p>
Recall that a positive integer greater than or equal to 2 is
called <i>prime</i> if it is evenly divisible only by 1 and itself.  Thus,
the numbers 2, 3, and 5 are prime, but 4 and 6 are not prime (4 is
also divisible by 2 and 6 is also divisible by 2 and 3).  (Technically in
mathematics, 1 is called a <i>unit</i>, not a prime number.)
</p>

<p>
In ancient Greece, Erastosthenes gave the following algorithm for
determining all prime numbers up to a specified number M.
</p>

<ol class="withupperalpha">
<li>
Write down the numbers 2, 3, ..., M
<li>
Cross out numbers as follows
<ol class="withlowerroman">
<li>
Keep 2, but cross out all multiples of 2 (i.e., cross out 4, 6, 8, ...).
<li>
Keep 3, but cross out all multiples of 3 (i.e., cross out6, 9, 12, ...).
While 6 is crossed out twice, it only matters that it has been crossed
out at least one in Erastosthenes' Sieve.
<li>
Since 4 is already crossed out, go on to the next number that is not
crossed out (i.e., 5).  Keep 5, but cross out all multiples of 5 (i.e., 10,
15, 20, ...).
</ol>
<ul>
<li>
General step.  Suppose you have just processed the number P. Go on to the
next number that is not crossed out &mdash; Q.  Keep Q, but cross out all
multiples of Q.
</ul>
</ol>
<p>
After you have finished all the crossing out, the numbers remaining are
primes.
</p>

<p>
This method is called the <i>Sieve Method of Erastosthenes</i>.  
</p>

<p>
When implementing this approach within C, it is common to use an
array <tt>int arr [0..M+1]</tt> to record which elements are still kept and
which are crossed out.  <tt>arr[0]</tt> and <tt>arr[1]</tt> are
ignored. The rest are initialized to 0, and crossing out a number
corresponds to setting the relevant array element to 1 (or incrementing
the relevant array element by 1).
</p>

<p>
In this problem, we refine the Sieve Method of Erastosthenes to keep a
count of the number of times an integer is crossed out.  Also, we modify
the approach to cross out for each new value &mdash; not just those that
have not been crossed out previously.  In this way, <tt>arr[i]</tt>
will count the number of non-trivial factors of <tt>i</tt> (factors other
than 1 and <tt>i</tt> itself).  Note that the count will be 0 for prime
numbers.
</p>

<p>
Write a program that reads an integer <tt>M</tt> and
</p>

<ul>
<li>
prints the numbers 2, ..., <tt>M</tt> and the number of non-trivial factors
for each number, and
<li>
prints the three numbers with the most factors between 2 and <tt>M</tt>
(inclusive).  
</ul>

<p>
<i>Programming Notes:</i>
</p>

<ul>
<li>
For this problem you may assume M &ge; 4, so at least 3 numbers will be
under consideration for finding the three numbers with the highest factor
counts. 
<li>
The numbers and counts should be printed 8 to a line.  Thus, the first part
of the printout might be
<pre>
2:0     3:0     4:1     5:0    6:2    7:0     8:2   9:1
10:2   11:0    12:4  ...
</pre>

<li>
To find the numbers with the most factors, use the approach illustrated in
the module on arrays and functions with
program <a href="modules/arrays-functions/max-min.c">max-min.c</a>.  If
several numbers share the highest counts, then any numbers with the same
high counts may be printed.

<li>
This program should make one pass through the array to find a maximum in
variable <tt>max</tt> Finding the second or third largest can be done in a
similar way, with additional variables <tt>max2</tt> and <tt>max3</tt>.  In
particular, finding the top three elements should be done in a single loop
that goes through each element once.

<li>
Sorting is not needed in this problem and is inefficient for the question
asked.  Thus, an algorithm that uses a sorting algorithm will receive 0
credit for the maximum computation.
</ul>

</ol>

<p>
Grading Forms
</p>

<ul>
<li>
<a href="grading-form.pdf">General grading form</a>
<li>
<a href="suppl3-grading-form.shtml">Problem-specific grading form for
  Supplemental Problem 3</a>
</ul>

</ol>

<p>
Sample solutions
</p>

<ul>
<li>
<a href="problems/sieve-erastosthenes/sieve.c">sieve.c</a>
</ul>
-->

<!-- fall 2013 -->
<!--
<ol start="3">
<li>
<h3>A Polyalphabetic Cipher</h3>

<h4>Background:  Monoalphabetic Ciphers</h4>
<p>
A common approach for encoding messages involves replacing one letter by
another throughout the message.  Such an encoding method is called
<i>monoalphabetic substitution</i>.  As an example, consider the following
encoding scheme:
</p>

<pre><tt>
Plain alphabet:   ABCDEFGHIJKLMNOPQRSTUVWXYZ
Cipher alphabet:  XDQTVBKRAUGMZHYWCJOSENILPF
</tt></pre>

<p>
Now consider the message, "THIS IS A MESSAGE TO ENCODE."  For each letter
in the message, we encode it by looking up each letter in the plain
alphabet and replacing it by the corresponding in the cipher alphabet.
Characters not in the plain alphabet (e.g., punctuation) are left
unchanged.  Thus, the letter T is replaced by the letter S, "THIS" becomes
"SRAO", and the entire message is encoded as "SRAO AO X ZVOOXKV SY VHQYTV."
Note that the space and period characters are not changed.
</p>

<p>
<i>Note:</i>  This type of monoalpabetic substitution is the base for many
word and letter puzzles in newspapers and magazines.
</p>

<h4>Monoalphabetic Ciphers Are Reasonably Easy to Break</h4>

<p>
As you might expect from a puzzle that is used widely in the popular press,
monoalphabetic ciphers are reasonably easy to break.  Since each letter of
the alphabet in the original message is always converted to the same letter
in the enciphered message, properties of English can be considered.  For
example, in a newspaper puzzle, if a coded word is shown to be one letter
long (and if the language is English), then the coded letter likely stands
for either 'A' or 'I', since those are the only two 1-letter words in
common English.  Similarly, if one counted the number of times each coded
letter appeared, the most common coded letter likely stands for 'E' or 'T',
because those two letters arise much more often than others in typical
English text.  As one more illustration, if a three-letter coded word
appears frequently &mdash; and if the first two letters appear frequently
elsewhere, then the three-letter coded word has a good chance of
representing the word "THE".
</p>

<h4>Polyalphabetic Ciphers</h4>

<p>
To discourage code breakers from utilizing common characteristics of English
(or another language), one common encryption approach is to utilize several
alphabets.  For example, sometimes 'A' will be encrypted by one letter, and
another time 'A' will be encrypted by another letter.  Since one letter in
the original translates to several candidates, a code breaker is likely to
have a difficult time exploiting many statistical properties of language.
</p>

<p>
To implement this strategy, one approach might utilize a different cipher
alphabet for each letter to be encrypted.  However, in practice, this is
impractical.  The sender and intended receiver of the message would have to
communicate the full text of all of the cipher alphabets &mdash; a
significant challenge for extensive communications at a distance.
</p>

<p>
As an alternative, a common approach utilizes just one cipher alphabet (as
in a monoalphabetic cipher), but with some preliminary steps.  We combine
an example with a description of the general algorithm.
</p>

<h4>Encryption</h4>

<p>
Suppose we want to encrypt the message:
</p

<pre><tt>
THIS LINE TESTS BOTH ENCRYPTION AND DECRYPTION
</tt></pre>

<p>
using the same cipher alphabet as above:
</p>

<pre><tt>
Plain alphabet:   ABCDEFGHIJKLMNOPQRSTUVWXYZ
Cipher alphabet:  XDQTVBKRAUGMZHYWCJOSENILPF
</tt></pre>

<p>
<i>Step 0:</i>  Consider the following table, in which each row is the
usual English alphabet, shifted left 1 character from the previous line:
</p>

<pre><tt>
ABCDEFGHIJKLMNOPQRSTUVWXYZ
BCDEFGHIJKLMNOPQRSTUVWXYZA
CDEFGHIJKLMNOPQRSTUVWXYZAB
DEFGHIJKLMNOPQRSTUVWXYZABC
EFGHIJKLMNOPQRSTUVWXYZABCD
FGHIJKLMNOPQRSTUVWXYZABCDE
GHIJKLMNOPQRSTUVWXYZABCDEF
HIJKLMNOPQRSTUVWXYZABCDEFG
IJKLMNOPQRSTUVWXYZABCDEFGH
JKLMNOPQRSTUVWXYZABCDEFGHI
KLMNOPQRSTUVWXYZABCDEFGHIJ
LMNOPQRSTUVWXYZABCDEFGHIJK
MNOPQRSTUVWXYZABCDEFGHIJKL
NOPQRSTUVWXYZABCDEFGHIJKLM
OPQRSTUVWXYZABCDEFGHIJKLMN
PQRSTUVWXYZABCDEFGHIJKLMNO
QRSTUVWXYZABCDEFGHIJKLMNOP
RSTUVWXYZABCDEFGHIJKLMNOPQ
STUVWXYZABCDEFGHIJKLMNOPQR
TUVWXYZABCDEFGHIJKLMNOPQRS
UVWXYZABCDEFGHIJKLMNOPQRST
VWXYZABCDEFGHIJKLMNOPQRSTU
WXYZABCDEFGHIJKLMNOPQRSTUV
XYZABCDEFGHIJKLMNOPQRSTUVW
YZABCDEFGHIJKLMNOPQRSTUVWX
ZABCDEFGHIJKLMNOPQRSTUVWXY
</tt></pre>

<p>
This table can be computed easily, as follows:
</p>

<ul>
<li>
The first row (row 0) is the regular alphabet.  
<li>
The second row (row 1) is obtained from the first row by replacing each
letter in the original by one letter later.
<li>
The third row (row 2) is obtained from the first row by replacing each
letter in the original by two letters later.
<li>
The third row (row 3) is obtained from the first row by replacing each
letter in the original by three letters later.
<li>
In general, row i is obtained from the first row by replacing each letter
by the Th one later.
</ul>

<p>
For each row, once the letter 'Z' appears, the line continues with
'A', 'B', ... . Effectively, if we listed the letters as having numbers 0
(for 'A'), 1 (for 'B'), ... 25 (for 'Z'), then the ith row is (0+i)%26,
(1+1)%26, (2+i)%26, ..., (25+i)%26.
</p>

<p>
<i>Step 1:</i> We utilize a "keyword" &mdash; in this case, suppose the
sender and original receiver agree upon the word, "COMPUTER".  We use this
keyword to shift successive letters in our original message:
</p>

<ul>
<li>
For the first character in our message, we use the shift so that 'A'
becomes 'C' (the first letter in "COMPUTER").  For our overall
message, <tt>"THIS LINE TESTS BOTH ENCRYPTION AND DECRYPTION"</tt>, the
first letter 'T' will be encoded using the 'A' to 'C' shift, so that 'T'
will become 'V'.
<li> For the second character in our message, we use the shift so that 'A'
becomes 'O' (the second letter in "COMPUTER").  The second letter, 'H', in
our message becomes 'V'.
<li> For the third character in our message, we use the shift so that 'A'
becomes 'M' (the third letter in "COMPUTER").  The third letter, 'I', in
our message becomes 'U'.
<li> For the fourth character in our message, we use the shift so that 'A'
becomes 'P' (the fourth letter in "COMPUTER").  The third letter, 'I', in
our message becomes 'H'.
<li>
The fifth character in our message is a space.  As a non-letter, we leave
it as a space.
<li>
The sixth character in our message is again a letter, so we shift according
to the sixth letter in "COMPUTER" &mdash; the 'T'.  The 'L' in "LINE"
becomes an 'E' after the shift.
<li>
The seventh and eighth characters in our message 'I' and 'N' are shifted
according to the 'E' and 'R' rows in "COMPUTER" to yield 'M' and 'E'.
<li>
To encode the ninth character in our message, we have already used all
letters in "COMPUTER" for the shift, so we just start again with the shift
for 'A' to 'C'.  In this case 'E' becomes 'G'.
</ul>

<p>
To summarize for this step, each letter in the message is shifted by an
amount according to the row that shifts 'A' successively to the letters in
our keyword.
</p>

<p>
In our example, 

<pre><tt>
THIS LINE TESTS BOTH ENCRYPTION AND DECRYPTION
</tt></pre>

<p>
becomes
</p>

<pre><tt>
VVUH EMEG FTMMW DCFW XRTTMBICHR CBP XXGIADFXIG
</tt></pre>

<p>
<i>Step 2:</i>  Once we have the original letters shifted according to our
keyword, we code each shifted letter by the cipher alphabet.
</p>

<pre><tt>
Plain alphabet:   ABCDEFGHIJKLMNOPQRSTUVWXYZ
Cipher alphabet:  XDQTVBKRAUGMZHYWCJOSENILPF
</tt></pre>

<p>
The resulting encrypted message is:
</p>

<pre><tt>
NNER VZVK BSZZI TQBI LJSSZDAQRJ QDW LLKAXTBLAK
</tt></pre>

<h4>Decryption</h4>

<p>
To decrypt an encoded message, we follow the steps for encryption in
reverse order.
</p>

<ul>
<li>
We look up each letter in the coded message in the cipher alphabet and
replace it with the plain alphabet ("ABCDE...").
<li>
We shift each letter backward, based on successive letters in the keyword.
</ul>

<h4>Problem</h4>

<p>
Write a program that encrypts a message according to a cipher alphabet and
a keyword.
</p>

<ul>
<li>
The program should read the cipher alphabet and the keyword.
<li>
The program should read a message on one line.  (Messages extending over
two or more lines need not be considered for this problem.)
<li>
The program should encrypt and print the message, according to the
polyalphabetic cipher described in this narrative.
</ul>

<p>
<i>Notes:</i>
</p>

<ul>
<li>
Although letters (in the alphabets, keyword, and message) may be entered in
lower case or upper case, the program should convert all letters to upper
case.  Thereafter, processing in this problem may assume all letters are
upper case.
<li>
Non-letters should be left alone in the encoding.
<li>
You may assume the message will not exceed 100 characters.
<li>
You may assume the cipher alphabet contains only distinct letters.
<li>
While the description of the shifts of alphabets in Steps 1 and 2 involve a
table, it is not necessary to utilize a table.  Modular arithmetic on the
numbers 0 to 25 (for letters 'A' through 'Z') can reduce the complexity of
this problem substantially.  Think of the upper case character <tt>ch</tt>
as corresponding to the index <tt>ch - 'A'</tt>.
<li>
You are encouraged to store the cipher alphabet in a character array.
<li>
If one knows the index <tt>i</tt> of the plain text character, then the
corresponding cipher letter is <tt>cipherAlphabet[i]</tt>.
<li>
The encryption code need not be complicated and lengthy.  I packaged
encryption of the message into a procedure of less than 25 lines, including
procedure header, comments, and lines containing a single left or right brace.
</ul>

<h4>Extra Credit</h4>

<p>
This problem involves primarily encryption.  As this problem is being written,
its complexity is unclear, and a student could earn 25 of 25 points for a
complete and well-tested encryption program.
</p>

<p>
Students wishing to extend their work to include decryption would be
eligible for up to 10 additional points (for a total of 35 out of 25).
</p> 

<p>
<b>Reference:</b>  A nice treatment of transposition ciphers may be found
in Abraham Sinkov, "Elementary Cryptanalysis:  A Mathematical Approach",
The New Mathematical Library, Random House and the Mathematical Association
of America, 1968, Chapter 3.  A revised edition of the book is available
in Abraham Sinkov and Todd Feil, "Elementary Cryptanalysis Second Edition",
The New Mathematical Library, Mathematical Association of America, 2009.
</p>
<p>
<a href="suppl3-grading-form.shtml">Problem-specific grading form for
  Supplemental Problem 3</a>
</p>
</ol>
-->

<!--spring 2013
<ol start="3">
<h3>Histogram of Letters</h3>
<p>
When given a number of data elements, it sometimes is convenient to
visualize how many times each outcome occurs.  For example, in reviewing 
text, we might count the number of times each letter occurs
(ignoring case), and the print this number of asterisks (*) for each
letter.  The resulting diagram is called a <i>histogram</i>.  As an
illustration, the following diagram shows a histogram for the letter counts
in this paragraph.
</p>

<pre>
Histogram follows:
         *                                          
         *                                          
         *                                          
         *                                          
         *                                          
         *                             *            
         *                             *            
         *                             *            
         *                             *            
         *                             *            
         *       *                     *            
         *       *                     *            
 *       *       *                     *            
 *       *       *                     *            
 *       *       *                     *            
 *       *       *                     *            
 *       *       *         * *     * * *            
 *       *       *         * *     * * *            
 *       *       *         * *     * * *            
 *       *       *         * *     * * *            
 *       *       *         * *     * * *            
 *       *       *         * *     * * *            
 *       *     * *         * *     * * *            
 *       *     * *       * * *     * * *            
 *       *     * *       * * *     * * *            
 *   *   *     * *       * * *     * * *            
 *   *   *     * *     * * * *     * * *            
 *   *   *   * * *     * * * *     * * *            
 *   *   *   * * *     * * * *     * * * *          
 *   *   *   * * *     * * * *     * * * *          
 *   *   *   * * *     * * * *     * * * *          
 *   *   *   * * *     * * * *     * * * *          
 *   *   * * * * *     * * * *     * * * *          
 *   *   * * * * *     * * * *     * * * *   *      
 *   * * * * * * *     * * * *     * * * *   *      
 *   * * * * * * *     * * * * *   * * * * * *      
 * * * * * * * * *     * * * * *   * * * * * *      
 * * * * * * * * *     * * * * *   * * * * * * *    
 * * * * * * * * *   * * * * * *   * * * * * * * * *
 a b c d e f g h i j k l m n o p q r s t u v w x y z
</pre>

<p>
<i>Programming Notes:</i>
</p>

<ul>
<li>
This program should allow any number of characters to be entered before the #
character is typed, and the input may be on one or more lines.
<li>
In this histogram of letters, all non-letters should be ignored.
<li>
Use of C functions, <tt>tolower</tt> and <tt>isalpha</tt>, within
the <tt>ctype.h</tt> library is encouraged.
<li>
In order to determine the number of lines in the histogram, the program
will need to determine the maximum count for any letter.  For letters with
this maximum count, the histogram will have a column of asterisks that goes
from the top row to the bottom (just before the row of printed letters).
</ul>

<p>
<a href="suppl3-grading-form.shtml">Problem-specific grading form for
  Supplemental Problem 3</a>
</p>
<p>
<a href="suppl3-examples/">Clarifying Examples</a>
</p>
</ol>
-->

<!--fall 2012-->
<!--
<h3>Grading Passwords</h3>

<ol start="3">
<li>
<p>
Since many modern computer systems use passwords as a means to provide
protection and security for users, a major issue can be the identification
of appropriate passwords.  The main point should be to choose passwords
that are not easily guessed, but which the user has a chance of
remembering.  For example, passwords related to birthdays, anniversaries,
family names, or common words are all easily guessed and should be avoided.
</p>

<p>
Some common guidelines suggest that a password should contain at least 6
characters and include characters from at least three of the following
categories: 
</p>

<p>
<ul>
<li>
uppercase letters
<li>
lowercase letters
<li>
digits
<li>
punctuation (considered to be anything not a letter or a digit)
</ul>

<p>
Other guidelines indicate that elements of passwords should be
pronounceable.  One simple measure of this guideline suggests that any group
of letters in a password should contain both vowels and consonants.
</p>

<p>
This supplemental problem asks you to write and test a procedure
</p>

<pre><tt>
   char gradePassword (char * password)
</tt></pre>

<p>
that assigns a grade to the given <tt>password</tt>, as follows:
</p>

<ul>
<li>
Assign 1 point for each of the following elements in the password:
<ul>
<li>
password contains at least 6 characters
<li>
password contains at least 1 vowel
<li>
password contains at least 1 consonant
<li>
password contains at least 1 upper-case letter
<li>
password contains at least 1 lower-case letter
<li>
password contains at least 1 numeric character
<li>
password contains at least 1 punctuation mark
</ul>

<li>
Assign a letter grade to the password by applying the sum of the points
above to the following.
<ul>
<li>
6 or 7 points:  A
<li>
5 points: B
<li>
4 points: C
<li>
3 points: D
<li>
0 or 1 or 2 points:  F

</ul>

</ul>
</ol>
-->
<!--
<h3>Emergency Telephones</h3>

<ol start=3>
<li>

<p>
[This problem is inspired by Problem 3 on the 1985 Advanced Placement
Computer Science Examination; folklore now sometimes refers to this
exercise as "The Dreaded TelLocs Problem".] 
</p>

<p>
The arrangement of streets in many midwestern cities resembles a
2-dimensional grid.  If emergency telephones are placed at the intersection
of streets, then their location can be modeled by a 2-dimensional array:
</p>

<pre><tt>
    #define north_south_size 20
    #define east_west_size   25
    int tel_locs [north_south_size] [east_west_size];
</tt></pre>

<p>
For this array, the location <tt>tel_locs[0][0]</tt> is considered to be in
the southwestern corner of the grid; and the location
<tt>tel_locs[1][2]</tt> has the location that is north 1 block and east 2
blocks of the southwestern corner of the grid.
</p>

<p>
Within this array, <tt>tel_locs[i][j]</tt> is 1 if an emergency telephone
is located at intersection of streets <tt>i</tt> and <tt>j</tt>, and
<tt>tel_locs[i][j]</tt> is 0 otherwise.
</p>

<p>
In a certain city, intersection <tt>[r][s]</tt> is considered "safe" if the
<tt>[r][s]</tt> is within 2 blocks of an emergency telephone &mdash; moving
north or west.  Thus, (ignoring the edge of the array), <tt>[r][s]</tt> is
"safe" if there is an emergency telephone at <tt>[r][s]</tt>, <tt>[r+1][s]</tt>,
<tt>[r+2][s]</tt>, <tt>[r][s-1]</tt>, <tt>[r][s-2]</tt>, or
<tt>[r+1][s-1]</tt>.  (Due to one-way streets, the notion of "safe" does
not consider emergency telephones located to the south or east of intersections.)
</p>

<p>
Write a C program that analyzes a proposed placement of emergency
telephones in a city to determine if all intersections in the city can be
considered "safe".  The program should have these characteristics:
</p>

<ol class="withloweralpha">
<li>
The array <tt>tel_locs</tt> should be declared and initialized as part of
the program.  (You should not read in the placement of telephones; the
program will have to be edited for each proposed telephone placement.) 
<li>
A function <tt>safe</tt> should take a location and a <tt>tel_locs</tt>
array as parameters and return 1 or 0 if the location is "safe" or not
(respectively).  
<li>
The program should print the coordinates of any intersection that is not
"safe". 
<li>
The end of the program should indicate "all safe" if all intersections in
the city are "safe" or "unsafe intersections exist" if there is at least
one intersection that is not "safe".

</ol>

</ol>
-->

 <!-- 4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4 -->

 
<!-- Spring 2014 -->
<ol start=4>
<li>
<a name="4"></a>
<h3>A Daily Calendar Program</h3>

<p>
This problem outlines a simplified version of a program to maintain a
person's daily calendar.  Individual appointments will be stored in a
<tt>struct</tt>:
</p>

<pre>
   const maxLen = 80;
   struct appt {
      int year;
      int month; /* 1=January, 2=February, ..., 12=December */
      int day;
      char text [maxLen];
   }
</pre>

<p>
As this <tt>struct</tt> suggests, in this problem ignores the time of day
for an appointment.
</p>

<p>
The program should handle the following processing tasks:
</p>

<ul>
<li>
The user may enter an appointment by specifying information in a standard
date/text format: <br> month (chars) day (int), (comma) year (int): (colon)
text (chars).  For example,
<pre>
     September 23, 2014:  Module 001 Project Due
     October 20, 2014:  Fall Break begins
     October 24, 2014:  Fall Break ends
     November 27, 2014:  Thanksgiving Day
     November 28, 2014:  Thanksgiving Recess 
</pre>
<li>
The user may sort appointments either chronologically by date or
alphabetically by appointment text.
<li>
The user may print the list of appointments.
</ul>

<p>
When running this program, a user should be given a menu of options,
such as the following:
</p>

<pre>
Calendar program options:
   e:  enter a new appointment (date, text)
   d:  sort appointments by date
   a:  sort appointments alphabetically by appointment text
   p:  print current appointments
   q:  quit
</pre>

<p>
Within the program, the collection of appointments will be stored in an
array, because sorting an array with an insertion sort is reasonably
efficient.  Of course, use of an array is complicated by the need to allocate
space for the array.  One way to accomplish this would be to declare an
array of a specific size:
</p>

<pre>
     int maxSize = 100; /* some specified maximum */
     struct appt apptArray [maxSize];
</pre>

<p>
With such an array, a separate variable <tt>int numAppts</tt> would keep
track of how many appointments are actually recorded
in <tt>apptArray</tt>.  Thus, <tt>numAppts</tt> would be initialized to 0
and then incremented by 1 each time a new apppointment was entered.
</p>

<p>
While this approach will work for awhile, it is still limited
by <tt>maxSize</tt>; the program must maintain the condition
that <tt>numAppts<=maxSize</tt>. 
</p>

<p>
To remove this restriction, the array could be stored in dynamic memory.
The revised declarations would be:
</p>

<pre>
     int maxSize = 100; /* current size of the apptArray */
     struct appt * apptArray = malloc (maxSize * sizeof (struct appt)):
     int numAppts = 0;
</pre>

<p>
With this initialization, addition of new appointments can continue until
the array is full.  When no more space is available in <tt>apptArray</tt>,
</p>

<ul>
<li>
a new and larger array would be allocated,
<li>
the appointments in the old array would be copied into the new array,
<li>
the old array would be deallocated,
<li>
the <tt>apptArray</tt> would point to the new array
<li>
additional appointments can now be added
</ul>

<p>
Write a program to implement this calendar program.
</p>

<p>
As extra credit, add one menu option to read appointments from a file
rather than from the keyboard, and add a second menu option to write the
current collection of appointments to a file.
</p>

<p>
<i>Programming notes:</i>
</p>

<ul>
<li>
Although the program may add a name anywhere in the array, it is suggested
that a new appointment be inserted after all existing appointments.
<li>
During insertion, the user must type the full month (e.g., January,
February), not a number, a single letter, or other abbreviation.
<li>
If the user enters an invalid month name, the program should report the
error, disregard the appointment entered, and continue with the menu again.
<li>
The program is not responsible for checking that the day numbers are valid
for the month (e.g., February 30 need not be flagged as an error).
<li>
When printing, the program should print the full month, day, year, and
text.  Printing just the number of the month is not adequate.
<li>
Converting from a month's name to an internal number may be accomplished in
any way a programmer wishes (as long as January is stored as 1, etc.).  For
example, two possibilities are:
<ul>
<li>
A sequence of <tt>if ... else</tt> statements might be used.
<li>
An array of month names might be used.
</ul>
<li>
Printing may be accomplished in any way a programmer wishes, as long as the
full month name, etc. are given.  For example, three possibilities are:
<ul>
<li>
A sequence of <tt>if ... else</tt> statements might be used.
<li>
A <tt>switch</tt> statement might be used.
<li>
An array of month names might be referenced.
</ul>
<li>
Sorting must use an insertion sort with a parameter <tt>comesFirst</tt>
that indicates when one <tt>struct appt</tt> comes before another.  The
program also should define two comparison procedures:

<pre>
/* returns 1 if the date for appointment app1 comes before the 
   date for app2, and returns 0 otherwise */
int comesFirstByDate (struct appt app1, struct appt app2)

/* returns 1 if the text for appointment app1 comes before the 
   date for app2, and returns 0 otherwise */
int comesFirstByText (struct appt app1, struct appt app2)
</pre>
<p>
With this framework, implementing the "sort by date" option involves a
simple call to the insertion sort procedure with <tt>comesFirstByDate</tt>
as one parameter.  Implementing the "sort by text" option involves a simple
call to the insertion sort procedure with <tt>comesFirstByText</tt> as one
parameter.
</ul>

<p>
Grading Forms
</p>

<ul>
<li>
A <a href="grading-form.pdf">general feedback form</a> that highlights
common characteristics of good programming practice.
<li>
<a href="suppl4-grading-form.shtml">Problem-specific grading form for
  Supplemental Problem 4</a>
</ul>

</ol>

<!--
<h3>Playing Modified Scrabble</h3>

<p>
The game of Scrabble is a word game, in which players place letters on a
grid to form words.  After the first word is placed on the board,
subsequent words must intersect one or more existing words.  In the game,
letters from a player are connected to letters already on the board to form
words.  Many descriptions of the game are available online, including a
reasonably thorough discussion
on <a href="http://en.wikipedia.org/wiki/Scrabble">Wikipedia</a>.
</p>

<p>
This problem considers the addition of a word to the board, where a new
word will intersect with an existing word.  For example, consider the
following grid:
</p>

<pre><tt>
        P R O G R A M 
  M E M O R Y
      N E T W O R K 
  S Y S T E M                   E
        S T R I N G     A N T I Q U E
                O       L       U
              C O L L E G E     A
    T P       A D       E       T S
    H H       L L       B       I C
    E Y       C E       R       O H I O
    O S       U         A       N E
  G R I N N E L L                 M
    Y C       U                   E
      S       S
</tt></pre>
<
<p>
This grid contains numerous words arranged horizontally or vertically, and
each word is connected to one or more other words at various letters.  When
inserting a word, it is not required that every letter of the new word must
form a word with every adjacent letter.  For example, the words PROGRAM,
MEMORY, NETWORK, SYSTEM and STRING at the top left are positioned along the
vertical word POETS. Reading down in the next column from POETS, one gets
the sequence RRTET; this is not a word, but that is irrelevant to the rules
for this problem.
</p>

<p>
Within this context, a first word may be placed anywhere on the grid.
Thereafter adding a new word requires that the word connect with at least
one existing letter already on the grid.  If the new word would extend over
several existing letters, then the corresponding letters must match.  For
example, in the illustration, the word RARE could be added vertically using
the R in PROGRAM and the R in NETWORK.  However, the word RAKE could not be
added in this position.  The first R would fit with the R of PROGRAM, but
the K in RAKE does not match the grid element already on the grid (the R in
NETWORK).
</p>

<p>
This problem asks you to write a program to support the addition of new
words for this type of word grid.  In particular, the program should do the
following.
</p>

<ul>
<li>
When the program starts, it should ask for the number R of rows and the
number C of columns for the grid, and a blank grid of this size should be
created internally.  (This blank grid need not be printed.)
<li>
Subsequent processing will consider squares identified with a row and
column, i and j, with 0 &le; i &le; R and 0 &le; j &le; C.
<li>
The user inputs new words, specifying two or four pieces of data:
<ul>
<li>
If the user enters a word, followed by a space and the letter R, then the
program is free to place the word any place at random where the word fits.
<li>
If the user enters a word, followed by a space, the letter H, a space, a
number i, a space, and another number j, then the word is to be placed
horizontally with the first letter at row i and column j.  
<li>
If the user enters a word, followed by a space, the letter V, a space, a
number i, a space, and another number j, then the word is to be placed
vertically with the first letter at the row i and column j.  
</ul>

<li>
If the word placement is given and is valid, the word is added to the grid,
and the grid is printed.  (I.e., the word is added if it intersects with at
least one letter already on the board, and the letters match each time the
new word intersects an existing one letter in the grid).

<li>
If the word placement is not given (letter R is entered), then the word is
added to the grid once at any valid position (if such a position exists),
and the grid is printed.
<li>
If the word cannot be added at the specified location or if no position is
possible for an open placement, then an error message is printed.
<li>
The program continues to ask the user to enter words until the user enters
QUITQUIT, in which case the program stops.

</ul>

<p>
<i>Programming Notes:</i>
</p>

<ul>
<li>
In placing any word, it should not run off the edge.  That is, if a word is
too long to fit in the space from its designated start to the edge of the
grid, then no part of the word may be inserted.

<li>
The program should contain a function <tt>check_horizontal</tt> that
determines if a word can be added horizontally to the grid at a given
location:

<pre>
/* check if the given word can be added horizontally at the given location
   pre-conditions
      row is a valid row location within the grid
      col is a valid column location within the grid
      word is a valid string
      num_rows is the total number of rows in the grid
      num_cols is the total number of columns in the grid
      grid is the two-dimensional array representing the grid
   post-conditions
      returns true (i.e., 1) if the word can be added to the grid
              horizontally with the first letter at the given row and col
      returns false (i.e., 0) otherwise
      the grid is NOT changed
*/
int check_horizontal (char * word, int row, int col, 
                      int num_rows, int num_cols, char grid[num_rows][num_cols])
</pre>

<li>
The program should contain a function <tt>check_vertical</tt> that
determines if a word can be added vertically to the grid at a given
location:

<pre>
/* check if the given word can be added horizontally at the given location
   pre-conditions
      row is a valid row location within the grid
      col is a valid column location within the grid
      word is a valid string
      num_rows is the total number of rows in the grid
      num_cols is the total number of columns in the grid
      grid is the two-dimensional array representing the grid
   post-conditions
      returns true (i.e., 1) if the word can be added to the grid
              vertically with the first letter at the given row and col
      returns false (i.e., 0) otherwise
      the grid is NOT changed
*/
int check_vertical (char * word, int row, int col, 
                      int num_rows, int num_cols, char grid[num_rows][num_cols])
</pre>

</ul>

<p>
Grading Forms
</p>

<ul>
<li>
<a href="grading-form.pdf">General grading form</a>
<li>
<a href="suppl4-grading-form.shtml">Problem-specific grading form for
  Supplemental Problem 4</a>
</ul>

<p>
Sample solutions:
</p>

<ul>
<li>
<a href="problems/scrabble/code-statistics">program statistics</a>
<li>
<a href="problems/scrabble/sup-prob4a.c">sup-prob4a.c</a>
<li>
<a href="problems/scrabble/sup-prob4b.c">sup-prob4b.c</a>
<li>
<a href="problems/scrabble/test-script">test-script</a>
</ul>
</ol>
-->

<!--fall 2013-->
<!--
<ol start=4>
<li>
<h3>Word Arrangement/Adjacent Letters</h3>

<p>
Many word puzzles and games involve words placed in a 2-dimension grid.
For example, consider the following 17 words:
</p>

<pre><tt>
THEORY
STRING
ARRAY
APPLE
GRINNELL
COMPUTER
PHYSICS 
CALCULUS
ALGEBRA
SCHEME 
NETWORK
PROGRAM
NEW
EQUATION
MEMORY
LOGIC 
SYSTEM
</tt></pre>

<p>
These words might be placed in the following 14 by 21 grid. (In this
display, the digits on the left and top help identify the row and column of
each letter, but these numbers should not be considered part of the grid.)
<pre><tt>
            Column
               11111111112 
     012345678901234567890
Row   
 0       SYSTEM          
 1   COMPUTER            
 2      PROGRAM           
 3   MEMORY NETWORK    E  
 4      STRING   A     Q  
 5       A  L    L     U  
 6       R CO    G     A  
 7    TP R AG    E     TS 
 8    HH A LI    B     IC 
 9    EY Y CC    R     OH  
10    OS   U     A     NEW
11   GRINNELL           M 
12    YC   U            E 
13     S   S                        
</tt></pre>

<p>
With any arrangement of words, one can count the number of letters
immediately adjacent to a position (up, down, left, right, or one square
along a diagonal.  For the above example, such a count would yield the
following table, where each entry is the number of adjacent letters.
(Again, row and column numbers are included for reference, but these
identifiers can be ignored in the problem that follows.)
</p>

<pre><tt>
            Column
               11111111112 
     012345678901234567890
Row   
 0   233445543110000000000
 1   123578877420000000000
 2   467787766443321001110
 3   124687877533321002120
 4   234565555435441003230
 5   001446654103230003230
 6   122425443003230003341
 7   233526553003230003442
 8   355626553003230003553
 9   355515442003230003564
10   466646552002120002453
11   366424431001110001444
12   355535441000000000212
13   132202120000000000111
</tt></pre>

<p>
Write a program that 
</p>

<ul>
<li>reads the size of a grid (the number of rows <tt>m</tt> and columns <tt>n</tt>),
<li>reads an <tt>m</tt> by <tt>n</tt> grid of characters
<li>once read, the program outputs the grid of characters (do not label
  row numbers or column numbers)
<li>computes and prints the grid of counts (do not label
  row numbers or column numbers)i
<li>identifies the two locations with the highest counts
</ul>

<p>
<i>Notes:</i>
</p>

<ul>
<li>Your program may assume that there are at least <tt>n</tt> characters
  entered for each row of the grid (more than <tt>n</tt> characters may be
  entered on a row, but any extra characters should be ignored.)

<li>In the example, any row/column with the count 8 could be identified as
  having the highest count, and any other row/column with the count 8 could
  be identified as having the second highest count.  

<li>If several row/column locations have the same highest or the same
  second-highest counts, then any row/column with the correct count could
  be reported.
</ul>

<p>
<a href="suppl4-grading-form.shtml">Problem-specific grading form for
  Supplemental Problem 4</a>
</p>

</ol>
-->

<!--fall 2012; revised for spring 2013
<ol start=4>
<h3>A Simple Route Cipher</h3>

<li>
<p>
When sending a message from one place to another, it is common for the
sender to encode the message before it is sent with the understanding that
the receiver would know how to decode the message when it is sent.  With
this encoding process, anyone intercepting the message in transit would not
be able read the text.
</p>

<p>
For encoding, one approach is a <i>substitution cipher</i>, in which each
letter in original message is replaced by another letter.  (For example,
each "a" in the message might be replaced by "d" and each "t" might be
replaced by "w".  This type of cipher is commonly used in many word puzzles
in newspapers and puzzle books.
</p>

<p>
A second approach for encoding is called <i>transposition</i>, in which the
characters of the original message are rearranged in a different order.
This problem implements a simple type of transition cipher, called
a <i>route cipher</i>.  (Historically, the Union forces in the American
Civil War used a variation of a route cipher, called <i>the Union Route
    Cipher</i>.) 
</p>

<p>
<i>Encoding:</i> In a simple route cipher, letters of a message are placed
into a rectangular table.  As an example, suppose the cipher is based on a
table of 5 rows and 9 columns, and suppose we wish to encode the text "this
short example illustrates a route cipher".

The first step of a route cipher is to insert
the message row-by-row into the table, on character at a time.

<center>
<table>
<tr>
  <td><tt>t</tt>
  <td><tt>h</tt>
  <td><tt>i</tt>
  <td><tt>s</tt>
  <td><tt>&nbsp;</tt>
  <td><tt>s</tt>
  <td><tt>h</tt>
  <td><tt>o</tt>
  <td><tt>r</tt>
</tr>
<tr>
  <td><tt>t</tt>
  <td><tt>&nbsp;</tt>
  <td><tt>e</tt>
  <td><tt>x</tt>
  <td><tt>a</tt>
  <td><tt>m</tt>
  <td><tt>p</tt>
  <td><tt>l</tt>
  <td><tt>e</tt>
</tr>
<tr>
  <td><tt>&nbsp;</tt>
  <td><tt>i</tt>
  <td><tt>l</tt>
  <td><tt>l</tt>
  <td><tt>u</tt>
  <td><tt>s</tt>
  <td><tt>t</tt>
  <td><tt>r</tt>
  <td><tt>a</tt>
</tr>
<tr>
  <td><tt>t</tt>
  <td><tt>e</tt>
  <td><tt>s</tt>
  <td><tt>&nbsp;</tt>
  <td><tt>a</tt>
  <td><tt>&nbsp;</tt>
  <td><tt>r</tt>
  <td><tt>o</tt>
  <td><tt>u</tt>
</tr>
<tr>
  <td><tt>t</tt>
  <td><tt>e</tt>
  <td><tt>&nbsp;</tt>
  <td><tt>c</tt>
  <td><tt>i</tt>
  <td><tt>p</tt>
  <td><tt>h</tt>
  <td><tt>e</tt>
  <td><tt>r</tt>
</tr>
</table>

</center>
<p>
With this arrangement, the encoded message is obtained by retrieving the
letters according a designated path or route from the rectangle.  For this
problem, we will retrieve the letters from the table column by column.  For
example, reading column-by-column from the above table, we obtain the coded
message "tt tth ieeiels sxl c auaisms phptrholroereaur".
</p>

<p>
<i>Decoding:</i>  Given an encoded message, the receiver places the text
character-by-character into the rectangle according the prescribed path
(e.g., column by column).  With the letters in the rectangle, the original
message can be restored by reading the rectangle row-by-row.
</p>

<p>
<i>Extensions:</i>  In the basic encoding approach, the original message is
placed in a rectangle of a designated size.  If the rectangle has r rows
and c columns, this approach works well if the message has length r*c, the
size of the rectangle.   Extensions are needed if the
original message has length other than r*c characters.
</p>

<ul>
<li>
If the original message has less than r*c characters, additional characters
might be added to get the needed number.  For example, we might add letters
of the alphabet a, b, c, d, e, ... at the end of message as needed to fill
the rectangle.
<li>
If the original message has more than r*c characters, the message is
divided into blocks of r*c characters, and each block is encoded
separately.  
</ul>

<p>
As another example, suppose the rectangle is specified with 3 rows and 4
columns, and suppose we want to encode the message "this extended example
shows the full algorithm".
</p>

<p>
Encoding follows these steps:
</p>

<ol class="withloweralpha">
<li>
<p>
Divide the message into blocks of 3*4 = 12 characters.  The last block
would have only 10 characters, so "a" and "b" have been added to complete
the block.
</p>

<center>
<table>
<tr>
  <td><tt>t</tt>
  <td><tt>h</tt>
  <td><tt>i</tt>
  <td><tt>s</tt>
  <td><tt>&nbsp;</tt>
  <td><tt>e</tt>
  <td><tt>x</tt>
  <td><tt>t</tt>
  <td><tt>e</tt>
  <td><tt>n</tt>
  <td><tt>d</tt>
  <td><tt>e</tt>
</tr>
<tr>
  <td><tt>d</tt>
  <td><tt>&nbsp;</tt>
  <td><tt>e</tt>
  <td><tt>x</tt>
  <td><tt>a</tt>
  <td><tt>m</tt>
  <td><tt>p</tt>
  <td><tt>l</tt>
  <td><tt>e</tt>
  <td><tt>&nbsp;</tt>
  <td><tt>s</tt>
  <td><tt>h</tt>
</tr>
<tr>
  <td><tt>o</tt>
  <td><tt>w</tt>
  <td><tt>s</tt>
  <td><tt>&nbsp;</tt>
  <td><tt>t</tt>
  <td><tt>h</tt>
  <td><tt>e</tt>
  <td><tt></tt>
  <td><tt>f</tt>
  <td><tt>u</tt>
  <td><tt>l</tt>
  <td><tt>l</tt>
</tr>
<tr>
  <td><tt>&nbsp;</tt>
  <td><tt>a</tt>
  <td><tt>l</tt>
  <td><tt>g</tt>
  <td><tt>o</tt>
  <td><tt>r</tt>
  <td><tt>i</tt>
  <td><tt>t</tt>
  <td><tt>h</tt>
  <td><tt>m</tt>
  <td><tt>a</tt>
  <td><tt>b</tt>
</tr>
</table>

</center>

<li>
Place each block into a rectangle, row-by-row:

<center>
<table>
<tr>
  <td><tt>t</tt>
  <td><tt>h</tt>
  <td><tt>i</tt>
  <td><tt>s</tt>

  <td><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt>
  <td><tt>d</tt>
  <td><tt>&nbsp;</tt>
  <td><tt>e</tt>
  <td><tt>x</tt>

  <td><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt>
  <td><tt>o</tt>
  <td><tt>w</tt>
  <td><tt>s</tt>
  <td><tt>&nbsp;</tt>

  <td><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt>
  <td><tt>&nbsp;</tt>
  <td><tt>a</tt>
  <td><tt>l</tt>
  <td><tt>g</tt>

</tr>
<tr>
  <td><tt>&nbsp;</tt>
  <td><tt>e</tt>
  <td><tt>x</tt>
  <td><tt>t</tt>
  <td><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt>

  <td><tt>a</tt>
  <td><tt>m</tt>
  <td><tt>p</tt>
  <td><tt>l</tt>
  <td><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt>

  <td><tt>t</tt>
  <td><tt>h</tt>
  <td><tt>e</tt>
  <td><tt></tt>
  <td><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt>
  <td><tt>o</tt>
  <td><tt>r</tt>
  <td><tt>i</tt>
  <td><tt>t</tt>
</tr>
<tr>
  <td><tt>e</tt>
  <td><tt>n</tt>
  <td><tt>d</tt>
  <td><tt>e</tt>

  <td><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt>
  <td><tt>e</tt>
  <td><tt>&nbsp;</tt>
  <td><tt>s</tt>
  <td><tt>h</tt>

  <td><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt>
  <td><tt>f</tt>
  <td><tt>u</tt>
  <td><tt>l</tt>
  <td><tt>l</tt>

  <td><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt>
  <td><tt>h</tt>
  <td><tt>m</tt>
  <td><tt>a</tt>
  <td><tt>b</tt>
</tr>
</table>

</center>

<li>
<p>
Read characters from each block, column-by-column:
<br>
<tt>"t ehenixdste"&nbsp;&nbsp;&nbsp;"dae m
epsxlh"&nbsp;&nbsp;&nbsp;"otfwhusel&nbsp;&nbsp;l"&nbsp;&nbsp;&nbsp;"
  oharmliagtb"</tt> 
<br><br>
Combining the encoded blocks gives:
<br>
<tt>"t ehenixdstedae m epsxlhotfwhusel&nbsp;&nbsp;l oharmliagtb"</tt> 
</ol>

<p>
<b>Problem:</b>  
</p>

<ul>
<li>
Write a program that reads the rectangle size (a row and a
column) and the text of a message and prints the encoded message.
<li>
Explain how the above program can also be used for decoding and illustrate
your explanation with an example.
</ul>

<p>
<b>Programming Notes:</b>  
</p>

<ul>
<li>
Although conceptually the first encoding step reads the entire message and
then divides it into pieces, in practice, the program should read and
process one block at a time:
<ol>
<li>
Read rectangle size and create rectangle(s) of the appropriate dimensions
to process a single block.
<li>
Continue until all input is processed
<ol class="withloweralpha">
<li>
Read one block
<li>
Process characters for the one block
<li>
Print encoded characters for that block
</ol>
</ol>
<li>
C allows arrays to be declared of a length that is determined during run
time.
See <a href="http://gcc.gnu.org/onlinedocs/gcc/Variable-Length.html">Arrays
    of Variable Length</a> for details.
</ul>

<p>
<b>Reference:</b>  A nice treatment of transposition ciphers may be found
in Abraham Sinkov, "Elementary Cryptanalysis:  A Mathematical Approach",
The New Mathematical Library, Random House and the Mathematical Association
of America, 1968, Chapter 5.  A revised edition of the book is available
in Abraham Sinkov and Todd Feil, "Elementary Cryptanalysis Second Edition",
The New Mathematical Library, Mathematical Association of America, 2009.
</p>
<p>
<a href="suppl4-grading-form.shtml">Problem-specific grading form for
  Supplemental Problem 4</a>
</p>

</ol>
-->

<!--fall 2012-->
<!--
<h3>Distance to Fire Hydrants</h3>

<ol start=4>
<li>
<p>
Within cities, rates for property insurance often depend upon the distance
between a house and the nearest fire hydrant.  This problem outlines a
simple version of this rather-general problem.
</p>

<p>
Here are some details.  We suppose that a city is organized as a grid of
streets, and that fire hydrants are located near selected street
intersections.  The best insurance rates (category A) are available to
houses who are at an intersection where there is also a fire hydrant.  The
second best insurance rates (category B) are available to houses at an
intersection where the nearest fire hydrant is 1 block away (there is no
fire hydrant at the house's intersection, but there is a fire hydrant 1
block away).  The third best insurance rates (category C) are available to
houses at an intersection where the nearest fire hydrant is 2 blocks away.
The worst insurance rates (category D) are applied to houses for which
there is no fire hydrant within 2 blocks (all hydrants are 3 or more blocks
away).  
</p>

<p>
Of course, this problem is not unrelated to the Emergency Telephone problem
(supplemental problem 3), with telephones replaced by fire hydrants and
with searching possible in any direction.  However, in this case, the issue
is how close the nearest fire hydrant might be.  Also, for this problem,
the fire hydrant information will be located in a file.
</p>

<p>
Additional details follow:
</p>

<ul> 
<li>
Fire hydrant information will be stored in a file, organized as follows:
<ul>
<li>
The first line of the file will contain the city name (up to 40
characters).
<li>
The second line of the file will contain two integers:  the north-south
size of the city grid and the east-west size of the city grid.
<li>
A line of 0's and 1's for the fire hydrants at successive intersections
(west to east) for a row of the grid; a 0 indicates no hydrant at that
intersection, and a 1 indicates there is a hydrant.  The 0's and 1's are
separated by one or more spaces.
<li>
Each successive lines of 0's and 1's represents an east-west street in the
town, going from north to south.
</ul>

<li>
The program is to read the file name from the command line.
<li>
The program is to print the name of the city, followed by a table of
intersections, with the category rating (A, B, C, or D) for each
intersection.  The table of intersection ratings will be the same size and
organization as the city grid specified in the file.
<li>
For example, file <tt>/home/walker/161/problems/one-hydrant</tt> contains
the following data:
<pre>
one hydrant city
3 5
0 0 1 0 0
0 0 0 0 0 
0 0 0 0 0
</pre>
For this data, the program should print the following:
<pre>
one hydrant city
C B A B C
D C B C D
D D C D D
</pre>
<li>
You should test your program on various files, including
<ul>
<li>
<a href="problems/one-hydrant"><tt>/home/walker/161/problems/one-hydrant</tt></a>
<li>
<a href="problems/corner-hydrants"><tt>/home/walker/161/problems/corner-hydrants</tt></a>
<li>
<a href="problems/box-of-hydrants"><tt>/home/walker/161/problems/box-of-hydrants</tt></a>
<li>
<a href="problems/hydrants-at-east"><tt>/home/walker/161/problems/hydrants-at-east</tt></a>
<li>
<a href="problems/hydrants-at-edge"><tt>/home/walker/161/problems/hydrants-at-edge</tt></a>
</ul>
</ul>

</ol>
-->


<!-- 5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5 -->

<!-- Spring 2014 -->

<ol start=5>
<li>
<a name="5"></a>
<h3>Commodities and Prices</h3>

<p>
A store sells a wide range of items.  For this problem, we will store the
price of each item and its name on a singly-linked list using node
declarations:
</p>

<pre>
     const maxNameLen = 50;
     struct item {
         char name [maxNameLen];
         double price;
         struct item * next;
         }
</pre>

<p>
From time to time, the store adjusts all prices in its inventory by
applying a function to each price.  In this problem, three price-adjustment
functions (unimaginatively called "a", "b", and "c") will be defined.  When
running the program, a user is given the following menu:
</p>

<pre>
   Store-inventory options:
      e:  add an item (cost, name) to the inventory
      p:  print all items in the inventory
      a:  apply function "a" to all prices in the inventory
      b:  apply function "b" to all prices in the inventory
      c:  apply function "c" to all prices in the inventory
      s:  sort the inventory by placing the items in ascending order of price
      q:  quit
</pre>

<p>
<i>Programming notes:</i>
</p>

<ul>
<li>
Addition of a new inventory item should be at the front of the linked
list.  (For example, one might use the approach of  Scheme-like lists.)
<li>
Printing should display item names and prices from the front of the list to
the end.  Printing should not change the list itself.
<li>
Functions <tt>a</tt>, <tt>b</tt>, and <tt>c</tt> should all act on
one <tt>double</tt> parameter and return a <tt>double</tt>.  No assumptions
should be made regarding the nature of these functions.  Here are some
possible examples:
<pre>
/* reduce a price by 10% */
double a (double orig_price)
{
   return 0.90 * orig_price;
}

/* increase a price using a linear formula */
double b (double orig_price)
{
   return 2.50 + 1.15 * orig_price;
}

/* change prices up and down in a curious way */
double c (double orig_price)
{
   return 12.00 + 9 * cos(orig_price);
}
</pre>

<li>
Application of a function to all inventory prices should use a variant
of Scheme's <tt>map</tt> function. In Scheme, the <tt>map</tt> procedure
takes a procedure and one or more list(s) as parameters and returns the
list obtained by applying the procedure parameter to the list(s).  

<p>
In this problem you should write a basic version of <tt>map</tt> in C with
the following signature:
</p>

<pre><tt>
void (double f (double), struct item * lst)
</tt></pre>

<p>
where  <tt>f</tt> is a function that can be applied to an double to
obtain another double.
</p>

<p>
<i>Notes:</i>
</p>

<ul>
<li>
The parameter <tt>lst</tt> points to the first node of a singly-linked
list of inventory items.
<li>
The list designated by <tt>lst</tt> is changed by <tt>map</tt> by applying
the function <tt>f</tt> to each price in the inventory list.
<li>
This <tt>map</tt> function may be solved either iteratively or recursively.

</ul>

<p>
With this <tt>map</tt> function, menu options a, b, and c can be
implemented simply by calling <tt>map</tt> with the relevant function
parameter.
</p>

<li>
Sorting should proceed by starting with a null list and successively
removing nodes from the original list and inserting them in order.  In
outline, such an approach is quite similar to an insertion sort for
arrays.  An <tt>insert</tt> procedure should add one inventory item to
sorted list.  The relevant procedure would have the following signature:
<pre>
   /* param:  lst designates a list of inventory items, sorted by price
      param:  inv_item points to an inventory item
      post-condition:  inv_item has been added to lst, in such a way
              that the resulting list is sorted by price
    */
    void sort (struct item ** first, struct item inv_item)
</pre>

<li>
Since this problem involves a linked list of inventory items, arrays of
inventory items or prices are not appropriate in a program solution.

</ul>

<ul>
<li>
A <a href="grading-form.pdf">general feedback form</a> that highlights
common characteristics of good programming practice.
<li>
<a href="suppl5-grading-form.shtml">Problem-specific grading form for
  Supplemental Problem 5</a>
</ul>

</ol>


<!--
<h3>Singly-linked-list Processing</h3>

<p>
Program <a href="c/linked-list/namelist-2014-sp.c">namelist-2014-sp.c</a>
contains a simple framework for maintaining a singly-linked list of names
(with no more than 20 characters).  The program has these features:
</p>

<ul>
<li>
A singly-linked-list structure is defined.
<li>
The list is initially null.
<li>
A basic menu identifies several processing options, the program reads a
user option, and the program calls a procedure for that option.
<li>
Procedure <tt>addName</tt> allows names to be added anywhere on the list.
<li>
Procedure <tt>print</tt> allows current names to be printed from the first
to the last.
</ul>

<p>
This problem asks you to implement three additional functions within this
program.  
</p>

<ul>
<li>
<p>
Function <tt>addNamesFromFile</tt> asks the user for the name of a file.
Then names on separate lines from that file are added to beginning (not the
middle or end) of the current list.
</p>

<ul>
<li>
If no file exists by the given name, the program should print an error
message, exit the function, and continue with other processing.
<li>
If the file exists, each line of the file will be considered a single name,
and each name is added, in order, to the beginning of the list.  For
example, suppose a list begins with the nodes "original" "list" in two nodes:

<center>
<img src="name-list-file1.gif" alt="original list">
</center>

<p> 
and suppose the file contains the lines 

<pre>
first
second
third
fourth
</pre>

Then the resulting list would become

<center>
<img src="name-list-file2.gif" alt="original list">
</center>

<p>
As this example illustrates, each new name in the file is added at the
front of the list, as it exists at that time.
</p>

</ul>

<li>
<p>
Function <tt>removeDuplicates</tt> removes duplicate nodes from the current
list:
</p>

<ul>
<li>
The first copy of a name on the list is retained.
<li>
All copies of a name after the first are deleted.
<li>
In the final list, the first copies of the names of the original list
should be in the same order as at the start.
</ul>

<p>
In this processing, duplicate nodes should be removed and space
deallocated, but no new nodes should be created.
</p>

<li>
<p>
Function <tt>duplicate</tt> adds a duplicate of each node after the node
on the current list:
</p>
<ul>
<li>
For each node on the list, 
<ul>
<li>
A new is created.
<li>
The name from the existing node is copied to the  new node
<li>
The new node is inserted into the list after the existing node.
</ul>

<p>
For example, if the original list had 3 nodes:
</p>

<center>
<img src="name-list-1.gif" alt="original list">
</center>
<p>
Then the new list after <tt>duplicate</tt> would have 6 nodes:
</p>

<center>
<img src="name-list-2.gif" alt="revised list">
</center>


</ul>
</ul>

<p>
<i>Programming Hints:</i>
</p>

<ul>
<li>
In
Program <a href="c/linked-list/namelist-2014-sp.c">namelist-2014-sp.c</a>,
code for <tt>addName</tt> and <tt>print</tt> should not be changed in any
way.
<li>
Program <tt>namelist-2014-sp.c</tt> also contains stubs for the new
operations, but the bodies of these procedures only print a message that
the operations are not implemented.  This problem asks you to expand these
stubs to working procedures.
<li>
In reading from a file, a name may contain spaces and/or punctuation.
However, you may assume each line of the file contains a separate
name, and the name has no more than 20 characters.  Multiple names
will not appear on the same line of a file.
<li>
Although code within the existing <tt>addName</tt> procedure itself should
not be changed, parts of that code could be copied, modified, and
streamlined in another procedure (e.g., <tt>addNamesFromFile</tt>) for
insertion of names from a file.
<li>
In identifying duplicate names, it is up to the programmer to decide
whether or not names with letters in different cases (upper case and lower
case) are considered as the same name.  Names with the same string of
characters (with the same case) should be considered the same, but names
with the same characters in different cases may or may not be considered the
same (at programmer's discretion).
</ul>

<p>
<a href="suppl5-grading-form.shtml">Problem-specific grading form for
  Supplemental Problem 5</a>
</p>
</ol>
</ol>
-->

<!--fall 2013-->
<!--revised from spring 2009; spring 2013
    for fall 2013, processing at the ends of the list are switched from the
    earlier version -->
<!--
<ol start=5>
<li>
<h3>Singly-linked-list Processing</h3>
<p>
Program <a href="c/linked-list/namelist.c">namelist.c</a> contains a simple
framework for maintaining a singly-linked list of names (with no more than
20 characters).  The program has these features:
</p>

<ul>
<li>
A singly-linked-list structure is defined.
<li>
The list is initially null.
<li>
A basic menu identifies several processing options, the program reads a
user option, and the program calls a procedure for that option.
<li>
Procedure <tt>addName</tt> allows names to be added anywhere on the list.
<li>
Procedure <tt>print</tt> allows current names to be printed from the first
to the last.
</ul>

<p>
This problem asks you to implement three additional functions within this
program.  
</p>

<ul>
<li>
<p>
Function <tt>addNamesFromFile</tt> asks the user for the name of a file.
Then names on separate lines from that file are added to beginning (not the
middle or end) of the current list.
</p>

<ul>
<li>
If no file exists by the given name, the program should print an error
message, exit the function, and continue with other processing.
<li>
If the file exists, each line of the file will be considered a single name,
and each name is added, in order, to the end of the list.
</ul>

<li>
<p>
Function <tt>removeDuplicates</tt> removes duplicates from the current list:
</p>

<ul>
<li>
The first copy of a name on the list is retained.
<li>
All copies of a name after the first are deleted.
<li>
In the final list, the first copies of the names of the original list
should be in the same order as at the start.
</ul>

<p>
In this processing, duplicate nodes should be removed and space
deallocated, but no new nodes should be created.
</p>

<li>
<p>
Function <tt>putLast</tt> moves a node for a specified name to the front
of the list.
</p>
<ul>
<li>
The function asks the user for a name
<li>
If the name is found as the last item on the list, a note is printed to
confirm this location, but the list is not changed.
<li>
If the name is found on the list, but the name is not last, 
<ul>
<li>
the first node with that name is located
<li>
that node is removed from its current location
<li>
that node is inserted at the end of the current list
</ul>
<p>
In this processing no new node is created and no existing node is freed.
Rather an existing node is moved.
</p>
<li>
If the name is not found on the list, an error message is printed and the
list is not changed.
</ul>
</ul>

<p>
<i>Programming Hints:</i>
</p>

<ul>
<li>
In Program <a href="c/linked-list/namelist.c">namelist.c</a>, code
for <tt>addName</tt> and <tt>print</tt> should not be changed in any way.
<li>
Program <tt>namelist.c</tt> also contains stubs for the new operations,
but the bodies of these procedures only print a message that the operations
are not implemented.  This problem asks you to expand these stubs to
working procedures.
<li>
In reading from a file, a name may contain spaces and/or punctuation.
However, you may assume each line of the file contains a separate
name, and the name has no more than 20 characters.  Multiple names
will not appear on the same line of a file.
<li>
Although code within the existing <tt>addName</tt> procedure itself should
not be changed, parts of that code could be copied, modified, and
streamlined in another procedure (e.g., <tt>addNamesFromFile</tt>) for
insertion of names from a file.
<li>
In identifying duplicate names, it is up to the programmer to decide
whether or not names with letters in different cases (upper case and lower
case) are considered as the same name.  Names with the same string of
characters (with the same case) should be considered the same, but names
with the same cases in different cases may or may not be considered the
same (at programmer's discretion).
</ul>

<p>
<a href="suppl5-grading-form.shtml">Problem-specific grading form for
  Supplemental Problem 5</a>
</p>
</ol>
-->
<!--fall 2012-->
<!--
<h3>Word-Find Puzzle</h3>

<p>
<ol start=5>
<li>
<p>
This exercise is based on a programming problem by Marge Coahran.
</p>

<p>
This problem asks you to write a program that solves a "word-find" puzzle
similar to puzzles that can be found in newspapers and magazines. An <a
href="#wordpuzzle-example">example is given below.</a>
</p>

<p>
The input data for your program will be a 16 x 16 grid of characters (the
puzzle board) followed by a list of words. The object of the puzzle is to
search the puzzle board for the words in the word list. Words may appear in
the puzzle board horizontally or vertically (but not diagonally). Horizontal
words will run left to right; vertical words will run top to bottom. Words
will not "wrap around" in either direction, so for example, a word could
not occupy columns <tt>{15,16,1,2}</tt>. Each word will appear at most once
in the puzzle board.
</p>

<p>
An example data file is available at
<tt>/home/walker/161/problems/puzzleboard</tt> for your use, but your program
should work on any input file that conforms to the following
specifications. 

<h3>Puzzle Specifications</h3>

<p>
The puzzle board will be given first. It will consist of a matrix of 16 x 16
upper-case letters, with a single space between each character on each row.
Next the file will contain a list of upper-case words, each on a separate
line, and each of which could fit within the puzzle board. The number of
words is not specified, so your program should read until the end of the
file is reached. There will be no blank lines anywhere in the file.
</p>

<p>
Your program should specify the input file name as a command-line parameter,
and the program should print the name of the file as part of its output.  
</p>

<p>
Your program should output a "key" to the word-find puzzle as shown in the
example below. Essentially, the key is a copy of the puzzle board matrix
that contains only the words which your program has found. All other
characters of the board should be removed.
</p>

<p>
<i>Anti-hint:</i> There are C library functions called <tt> strstr(),</tt>
<tt>strchr()</tt>, and <tt>strrchr()</tt>, which you are <i>NOT ALLOWED</i>
to use in this program. These functions would take away too much of your
fun.
</p>

<h3>Test Cases</h3>

<p>
As part of your write up, please describe a set of cases that would be
appropriate for testing this program. (Since designing these puzzles is
non-trivial, you need not submit a puzzle of your own containing your
tests, but describe what situations you would want to test.) It would also
be wise of you to modify the example below if there are test cases missing
from it, to allow you to thoroughly test your code.
</p>

<p>
An (overly-simplified) list of test cases might look something like this:
</p>

<ul>
<li>
include a horizontal word
<li>
include a vertical word
</ul>

<a name="wordpuzzle-example"></a>
<h3>Example</h3>

<p>
Consider the input:
</p>

<pre><tt>
G R N L R S Y S T E M E E O M R
O C O M P U T E R E H I A I C U
R A I M P R O G R A M A N R R R
Q M E M O R Y A N T C R N T T M
L A O N E T W O R K R O H H E U
G T R Y S T R I N G I A E G Q E
R R R N E A N Y L Y I L E E U R
T R P T A R E C O S S G I T A A
R L T P A R N A G O M E R U T S
E I H H T A G L I K L B S R I C
N T E Y T Y I C C M C R M I O H
Y R O S A H N U U G R A E D N E
P G R I N N E L L U U C A R S M
C G Y C E K E U R S S B A S L E
C N S S R E R S O U R R T P R B
C N P O C N R M R U A I G A S O
THEORY
STRING
ARRAY
APPLE
GRINNELL
COMPUTER
PHYSICS 
CALCULUS
ALGEBRA
TIGER 
SCHEME 
NETWORK
PROGRAM
HOUSE 
EQUATION
MEMORY
SLEEP 
LOGIC 
SYSTEM
PIANO 
</tt></pre>

<p>
When given this input, the program should print:
</p>

<pre><tt>
          S Y S T E M 
  C O M P U T E R 
        P R O G R A M 
  M E M O R Y
      N E T W O R K         E
        S T R I N G   A     Q
          A     L     L     U
          R   C O     G     A
    T P   R   A G     E     T S
    H H   A   L I     B     I C
    E Y   Y   C C     R     O H
    O S       U       A     N E
  G R I N N E L L             M
    Y C       U               E
      S       S
</tt></pre>

</ol>
-->

<hr>
<p>
<i>Any of the following problems may be done for extra credit.</i>
As noted in the course syllabus, however, a student's overall problems'
average may not exceed 120%.<p>


<!-- Fall 2014 -->
<!-- idea:  find all prime factors of each integer from 1 to 100
            need to define both factor and prime factor
-->

<!-- Spring 2014 -->
<ol start=6>
<li>
<a name="6"></a>
<H3>Defective, Perfect, and Superperfect Numbers</h3>

<p>
<b>Definitions:</b>  For a positive integer <i>n</i>:
</p>
<ul>
<li>
A number <i>k</i> is a <i>factor</i> of <i>n</i> if <i>k</i>
divides <i>n</i> with no remainder.  For example, integers 1, 2, 3, 4, 6,
and 12 are factors of 12, but 5, 7, 8, 9, 10, and 11 are not factors of 12.
<li>
The numbers 1 and <i>n</i> are called <i>trivial factors</i> of <i>n</i>; 1
divides every positive integer, and every positive integer divides itself.
<li>
A number <i>k</i> is a <i>non-trivial factor</i> of <i>n</i> if <i>k</i> is
a factor of <i>n</i> other than 1 or <i>n</i>.
<li>
A number <i>k</i> is a <i>proper factor</i> of <i>n</i> if <i>k</i> is
a factor of <i>n</i> other than <i>n</i>.
<br><br>
<li>
The number 1 is called a <i>unit</i>.
<li>
A number <i>n</i> is called <i>prime</i> if it not a unit and if its
only factors are trivial.
<li>
A number <i>n</i> is called <i>defective</i> if it is neither a unit nor a
prime and if the sum of its proper divisors is smaller than <i>n</i>.  For
example, 8 is defective, because its proper divisors are 1, 2, and 4, and
the sum 1+2+4 = 7 which is less than 8.
<li>
A number <i>n</i> is called <i>perfect</i> if the sum of its proper
divisors is exactly <i>n</i>.  For example, 6 is perfect, because its
proper divisors are 1, 2, and 3, and the sum 1+2+3 is the number 6.
<li>
A number <i>n</i> is called <i>super perfect</i> if the sum of its proper
divisors is greater than <i>n</i>.  For example, 12 is super perfect,
because the sum of its proper divisors is 1+2+3+4+6 = 16 which is greater
than 12.
</ul>

<p>
Write a program that reads a number <i>max</i> and prints, for each integer
between 1 and <i>max</i>,
</p>

<ul>
<li>
followed by its non-trivial factors, 
<li>
the sum of its proper factors, and 
<li>its classification.
</ul>

<p>
The results should be printed in a table with the following format (shown
when <i>max</i> is 12).
</p>

<pre>
    The classification of numbers

    n : non-trivial factors : sum of proper factors : classification
    1 : : 0 : unit
    2 : : 1 : prime
    3 : : 1 : prime
    4 : 2 : 3 : defective
    5 : : 1 : prime
    6 : 1, 2, 3 : 6 : perfect
    7 : : 1 : prime
    8 : 2, 4 : 7 : defective
    9 : 3 : 4 : defective
   10 : 2, 5 : 8 : defective
   11 : : 1 : prime
   12 : 2, 3, 4, 6 : 16 : super perfect
</pre>

<i>Programming Notes:</i>
<ul>
<li>
Use C's remainder operator (<tt>%</tt>) to check remainders; integer
division (<tt>/</tt>) should not be used without the instructor's explicit
approval.
<li>
Arrays should not be used in this problem.
<li>
The program should be reasonably efficient.  For example, a single set of
nested loops (one outer loop and one inner loop) or a loop and a single
recursive fucntion should be adequate for this problem.
</ul>

<p>
<i>Bonus Option:</i>  Bonus points are possible with this problem if the
table is formatted with the listing of non-trivial factors at the end:
</p>

<pre>
    The classification of numbers
                         sum of proper
    n : classification :  factors      :  non-trivial factors
    1 : unit           :      0        :
    2 : prime          :      1        :
    3 : prime          :      1        :
    4 : defective      :      3        : 2 
    5 : prime          :      1        :
    6 : perfect        :      6        : 1, 2, 3 
    7 : prime          :      1        :
    8 : defective      :      7        : 2, 4
    9 : defective      :      4        : 3
   10 : defective      :      8        : 2, 5 
   11 : prime          :      1        :
   12 : super perfect  :     16        : 2, 3, 4, 6 
</pre>

<i>Programming Hint:</i>
<ul>
<li>In addition to the earlier notes for this problem, one might consider a
  recursive fucntion for printing part of a row in the table.
</uL>

</ol>

<!--
<h3>Syracuse Numbers</h3>
<p>
This problem was suggested by Professor Arnold Adelberg.  
<br>
The wording of this problem is slightly edited from Problem 14 in Section
4.3 of "Problems for Computer Solutions Using BASIC" by Henry M. Walker,
Winthrop Publishers, 1980.
</p>

<p>
Consider the following iteration procedure applied to a positive integer
n<sub>0</sub> to generate a sequence
</p>

<center>
n<sub>0</sub>, n<sub>1</sub>, n<sub>2</sub>, n<sub>3</sub>, ...
</center 

<p>
Once the integer n<sub>j</sub> is known, the next integer n<sub>j+1</sub>
is computed by the rules:
</p>

<ol class="withloweralpha">
<li>
n<sub>j+1</sub> = n<sub>j</sub> / 2, if n<sub>j</sub> is even;
<li>
n<sub>j+1</sub>= 3*n<sub>j</sub> + 1, if n<sub>j</sub> is odd;
</ol>

<p>
The original number,  n<sub>j</sub>, is called "Syracuse" if the number 1
appears in the sequence n<sub>0</sub>, n<sub>1</sub>, n<sub>2</sub>,
n<sub>3</sub>, ... .
</p>

<p>
<b>Example:</b>  The number 5 is "Syracuse" because if the iteration begins
with n<sub>0</sub> = 5, the sequence is 5, 16, 8, 4, 2, 1, ... .
</p>

<p>
Write a program to show that all integers between 1 and 2000 inclusive are
"Syracuse".
</p>

<p>
<i>Note:</i>  You should not use arrays for this problem.
</p>

</ol>
-->

<!-- fall 2013 -->
<!--
<ol start=6>
<li>
<h3>Insipid Integers</h3>
<p>
This problem was suggested by Professor Arnold Adelberg.  
<br>
The wording of this problem is slightly edited from Problem 20 in Section
3.2 of "Problems for Computer Solutions Using BASIC" by Henry M. Walker,
Winthrop Publishers, 1980.
</p>

<p>
Consider the iteration procedure which begins with a positive number
n<sub>0</sub>, and generates a sequence by the rule:
</p>
<center>
n<sub>j+1</sub> = sum of the squares of the digits of n<sub>j</sub>
</center>

<table>
<tr>
  <td valign=top><i>Remarks:</i>
  <td><ol>
      <li>If any term in the sequence equals 1, then all successive terms
      are 1.
      <li>If any term in the sequence equals 58, then the sequence cycles:
<center>
..., 58, 89, 145, 42, 20, 4, 16, 37, 58, 89, ...
</center>
      <li>It is known that either condition 1 or 2 must occur.
      </ol>
</tr>
<tr>
   <td valign=top><i>Definition:</i>
   <td>An integer n<sub>0</sub> is called "insipid" if condition 1 occurs.
</tr>
</table>

<p>
<i>Problem:</i>  Find all integers between 1 and 99 which are insipid.
</p>

<p>
<i>Programming Notes:</i>
<ul>
<li>
In solving this problem you should <i>not</i> use string functions.
Rather, consider using C's arithmetic operations for integers, such as /
(integer division) and % (integer remainder) to extract the digits of an integer.
<li>
In organizing your solution, write a function <tt>isInsipid</tt>, which
takes an integer as parameter and which returns true (1) or false (0) as to
whether or not the integer is insipid.
<li>
The main C procedure should call the <tt>isInsipid</tt> function in
checking which of the numbers between 1 and 99 are insipid.
<li>
Although the definition of an insipid integer involves a sequence, the
program need not store all numbers in the sequence.  Presumable one would
want to store the original number n<sub>0</sub>. Otherwise, once
n<sub>j+1</sub> is computed, there is no need to retain the value of n<sub>j</sub>.
</ul>

</ol>
-->

<!--spring 2012
<h3>6174 Game</h3>
<ol start=6>
<li> 
 <p>
This problem was suggested by Professor Arnold Adelberg.  
<br>
The wording of this problem is slightly edited from Problem 21 in Section
3.2 of "Problems for Computer Solutions Using BASIC" by Henry M. Walker,
Winthrop Publishers, 1980.
</p>

<p>
The following iteration procedure begins with any four-digit number
n<sub>0</sub>.  The procedure is best explained by an example:  Let
n<sub>0</sub>&nbsp;=&nbsp;3087.  Then n<sub>1</sub> is set equal to the
difference of two integers formed from 3087.  First, the digits are
arranged in descending order (8730) and then in increasing order (0378).
Then
</p>

<table>
<tr>
  <td>n<sub>1</sub>
  <td>=8730 - 0378
  <td>=8352
</tr>
<tr>
  <td>n<sub>2</sub>
  <td>=8532 - 2358
  <td>=6174
</tr>
<tr>
  <td>n<sub>3</sub>
  <td>=7631 - 1467
  <td>=6174
</tr>
<tr>
  <td>n<sub>4</sub>
  <td>= ...
  <td>=6174
</tr>
</table>

<p>
It is known that for any four-digit number n<sub>0</sub> who digits are not
all the same, the process generates the number 6174 in fewer than seven
iterations.
</p>

<p>
Problem:  Find all numbers n<sub>0</sub> between 2000 and 2500 inclusive
which initiate sequences for which n<sub>4</sub> = 6174 but n<sub>3</sub>
&ne; 6174.
</p>

<p>
<i>Note:</i>  In solving this problem you should <i>not</i> use string
functions.  Rather, consider using C's arithmetic operations for
integers, such as / (integer division) and % (integer remainder).
</p>
</ol>
-->

<!--
<h3>Unusual Canceling</h3>
<ol start=6>
<li> 
<p>
The fraction 64/16 has the unusual property that its reduced value of 4 may
be obtained by "canceling" the 6 in the numerator with that in the
denominator.  Write a program to find the other fractions whose numerators
and denominators are two-digit numbers and whose values remain unchanged
after "canceling."
</p>

<p>
Of course, some fractions trivially have this property.  For example,
when numerator and denominator are multiples of 10, such as 20/30,
one can always "cancel" the zeroes.  Similarly, cancellation is always
possible when the numerator and denominator are equal, as in 22/22.
Your program should omit these obvious cases.
</p>

<p>
<i>Note:</i>  An extensive discussion of this problem may be found at
<a href="http://www.rowan.edu/colleges/csm/departments/math/facultystaff/osler/87%20Lucky%20Fractions.pdf">Lucky
  fractions:  Where bad arithmetic gives the correct answer</a> by Tom
  Osler, Rowan University.
</ol>
-->


<ol start=7>
<li>
<a name="7"></a>
<h3>Checking Proximity to Electrical Service</h3>

<p>
Archetectural plans for a building often show the location of electrical
outlets.  In this problem, a program reviews the minimum distances from
room locations to elctrical outlets throughout the building.
</p>

<p>
Since walls often are constructed with 2" by 4" studs, consider placing the
floor plan of a building on a 4" <!--"--> grid.  A sample floor plan is
shown below for a 25' by 15' structure (grid size 76 by 46) (where the
numbers show distance in feet):
</p>

<pre>
                                  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2
    0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
 0  wwwwwwwwwwwwwwwwwvwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwvwwwwwwwwwwwwwwwwwwwww
    w                                w                                         w
    w                                w                                         w
 1  w                                w                                         w
    w                                w                                         w
    .                                w                                         w
 2  .                                =                                         <
    .                                w                                         w
    .                                w                                         w
 3  .                                w                                         w
    .                                w                                         w
    .                                .                                         w
 4  .                                .                                         w
    .                                .                                         w
    .                                .                                         w
 5  .                                .                                         w
    .                                .                                         <
    .                                .                                         w
 6  w                                .                                         w
    w                                .                                         w
    w                                .                                         w
 7  w                                .                                         w
    w                          f     w                                         w
    w                                w                                         w
 8  wwwwwwwwwwwwww|wwwwwwwwwwwwwwwwwwwwwwww.............www|wwwwwwwwwwwwwwwwwwww
    w                                                                          w
    w                                                                          w
 9  w                          f                                               <
    w                                                                          w
    w                                                                          w
10  w                                                                          .
    w                                                                          .
    w                                                                          .
11  w                                                                          .
    w                                                                          .
    >                                                                          .
12  w                                                                          .
    w                                                                          .
    w                                                                          .
13  w                                                                          .
    w                                                                          .
    w                                                                          w
14  w                                                                          w
    w                                                               f          w
    w                                                                          w
15  wwwwwwwwwww^wwwwwwwwwwwwwwwwwwwwwwwwww^wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww
</pre>

<P>
This floor plan uses a simple notation for these main elements:
</p>

<ul>
<li>
w represents part of a wall
<li>
. represnets part of a door
<li> 
a space represents open space within a room
<li>
&lt;, &gt; and = represent electrical outlets in the left,
right side, and both sides of a wall shown vertically on the diagram,
<li>
^, v, and | represent electrical outlets on the top, bottom, and both sizes
of walls shown horizontally on the diagram.
<li>
f represents the location of a floor plug inside a room.
</ul>

<p>
In the example, the left wall has two electrical outlets accessible to the
room on the right, the right wall has two outlets accessible to the left,
and the middle wall has one location where outlets are available on both
the left and right. Similarly the wall at the top has two outlets available
to the rooms at the top, the wall at the bottom as two outlets available to
the room above, and the middle wall has two locations with outlets
available to the rooms on both sides.

<p>
Although this representation is reasonably primitive, it translates simply
to a 2-dimensional character array.  Pragmatically, this should be set up
by first asking the user for the size of the grid and then entering the
character codes row by row.
</p>

<p>
Write a program that reads the grid and then reads positions in the grid.
For each position read, the program should compute the approximate shortest
distance (in inches) to an electrical outlet.
</p>

<p>
<i>Programming notes:</i>
</p>

<ul>
<li>
Each horizontal character in the grid represents 4".
<li>
Each vertical character in the grid represents 4".
<li>
Diagonal distances can be computed using the Pythagorean Theorem.
<li>
Of course, wires cannot go through walls &mdash; only through open space
and through doors.
</ul>

</ol>

<!--Spring 2014 -->
<!--
<h3>Numbers in Alphabetical Order</h3>

<p>
Consider the positive numbers, written as names, such as
</p>

<pre>
   one, two, three, four, five, six, seven, eight, nine, ten,
   eleven, twelve, thirteen, ...
   twenty one, twenty two, ...
</pre>

<p>
Write a program that reads a positive integer <i>n</i> and prints the
names of the integers from 1 to <i>n</i> in alphabetical order,
where <i>n</i> &le; 300.
</p>


</ol>
-->

<!-- fall 2013 -->
<!--
<ol start=7>
<li>
<h3>Multiplication of Three-, Four-, or Five-Digit Numbers</h3>

<p>
Write a program <tt>show-multiplication</tt> that reads two integers of
three, four, or five digit from the keyboard and then prints their product
in the following format:
</p>

<pre><tt>
Enter first number:  <i>749</i>
Enter second number: <i>381</i>


        749
    x   381
    &ndash;&ndash;&ndash;&ndash;&ndash;&ndash;&ndash;
        749
      5992
     2247
    &ndash;&ndash;&ndash;&ndash;&ndash;&ndash;&ndash;
     285369
</tt></pre>

<p>
As in any long multiplication, there should be a line of intermediate
results for each digit of the second number.
</p>

</ol>
-->

<!--fall 2012
<h3>Alphabetizing Numbers</h3>

<ol start=7>
<li> 
<p>
Write a C program that generates the names of the numbers from zero to two
hundred and prints them in alphabetical order.
</p>

<p>
<i>Notes:</i>  
</p>

<ul>
<li>
All numbers should be written as lower-case names.
<li>
The program should be as compact as possible and utilize logic rather 
than brute force.  (For example, a program consisting of 200
<tt>printf</tt> statements will earn very little credit.)
<li>
The program should run efficiently.  (For example, few points will be
given for a program utilizing a bubble sort.)
</ul>

</ol>
-->

<!--
<h3>Roman Numerals</h3>
<ol start=7>
<li> 
<p>
Write a procedure that reads an integer <i>N</i> between 1 and 1000 from
the keyboard and prints the Roman numerals between 1 and <i>N</i> in
alphabetical order.
</p>

<p>
<i>Note:</i>  The Bubble Sort is not covered in this course, because it is
<i>never</i> considered to be an acceptable algorithm.
</p>

</ol>
-->


<!-- spring 2010  with refined rules for words, sentences-->
<ol start=8>
<li>
<a name="8"></a>

<!--fall 2012-->
<h3>Dealing Bridge Hands</h3>
<p>
Write a program that simulates the dealing of a deck of cards to give four
bridge hands.  Each run of the program should give a different random
assignment of the cards.  The program should print both the cards held for
each hand and the point-count for bidding.
</p>

<p>
A simple scoring system gives an ace 4 points, a king 3 points, a queen 2
points, and a jack 1 point, with an extra point given if a hand contains
all aces and a point deducted if it contains no aces.  Points also are
given for distribution, with a point given if a hand contains only 2 cards
in a suit (a doubleton), 2 points given if a hand contains a single card in
a suit (a singleton), and 3 points given if a hand has no cards in some
suit.
</p>

</ol>

<!--
<h3>Anagrams</h3>

<p>
Sometimes one can simplify a problem by removing the parts that don't
matter, and then looking at what's left.
</p>

<p>
For instance if you wanted to figure out if two collections of "stuff" were
the same, you might remove matching items from each collection until you
see if there are items left over.  If you have leftover items, the collections
were different, and if both collections become empty at the same time, they
are identical. 
</p>

<p>
Use this technique to write a program which will determine whether or
not two strings are anagrams  of each other.
</p>

<p>
Test it by deciding whether or not "one PLUS twelve"  is an anagram of
"eleven PLUS two", among other test cases.  (Note that spaces should match
as well as letters.)
</p>

<p>
<i>Note:</i>  Two programs, one iterative and one recursive, might be
eligible for bonus points.
</p>

</ol>
-->

<!--fall 2012

<h3>Computing Store Discounts</h3>

<ol start=8>
<li>
<p>
A store has two policies to encourage shoppers to buy as many goods as possible:
</p>

<ol>
<li>
The purchase of 1 item is full price, but the cost of a second identical
    item is 10% off, the cost of a third identical item is 20% off, etc.,
    although no item is sold for less that 10% of its original price. 
<li>
The shop offers a global discount for high spenders:
<ul>
<li>
If a shopper's overall bill is between $100 and $200 (inclusive), then the
        shopper is given a 15% discount (beyond any reduction for purchases
        of multiple identical items). 
<li>
If a shopper's overall bill is over $200 (i.e., $200.01 or higher), then
the shopper is given a 25% discount (beyond any reduction for purchases of
multiple identical items).  
</ul>
</ol>

<p>
Write a program that reads a sequence of original item costs as input and
computes the total charge a customer will pay after discounts. For this
exercise, assume that the costs of identical items will be grouped together
on the list, and all consecutive equal costs relate to identical items. To
illustrate, suppose the program reads the following costs: 
</p>

<pre>
1.25 8.73 5.55 5.55 5.55 12.84 5.55 5.55 20.30 20.30 20.30 20.30
</pre>

<p>
Here, we assume the first item purchases costs $1.25 and the second costs
$8.73. The third, fourth, and fifth items have the same cost, so we assume
they are identical items (the cost of these items after multiple-item
discount will be 5.55 + 0.9*5.55 + 0.8*5.55). The sixth item costs
12.84. The next two items again cost 5.55, but these must represent a
different item than the earlier ones of the same price, since these costs
are not contiguous with the previous run of 5.55 prices. Thus, the cost of
the seventh and eighth items is 5.55 + 0.9*5.55. The last four items again
are considered identical, with costs 20.30 + 0.9*20.30 + 0.8*20.30 *
0.7*20.30.
</p>

<p>
Notes:
</p>
<ul>
<li>
The program should allow successive numbers to be typed on one or multiple lines.
<li>
The program should continue processing numbers until a cost of $0.00 is
read.  
<li>
The program should consider negative costs as errors.  If a negative is
encountered in input, the program should print an error message and stop.
<li>
Processing should make one pass only through the initial list of costs.
<li>
The program may utilize any functions that seem convenient. However, even
    with multiple functions, processing should not make multiple passes
    through the data.
<li>
The use of arrays on this problem is actively discouraged and will likely
lose credit.
</ul>
</ol>
-->

<!--
<h3>Common Letters</h3>

<ol start=8>
<li>
<p>
Write a program that reads two strings and counts how many letters the
strings have in common.  To determine common letters, each letter of one
word should be matched with exactly one letter of the second word.  the
case of the letters (upper case versus lower case) should be ignored.)
</p>


<p>
<i>Examples:</i>  
</p>

<ul>
<li>
"room" and "tool" have two letters in common (each "o" in "room" is matched
with a separate "o" in "tool").
<li>
"fewer" and "red" have two letters in common (the "e" in "red" matches one
of the "e"s in "fewer" and both words contain one "r").
<li>
"Mississippi" and "Iowa" has just one letter in common (the "I" of Iowa
matches one of the "i"s in "Mississippi").
</ul>

</ol>
-->

<a name="9"></a>
<!-- fall 2013 -->
<ol start=9>
<li>
<h3>A Simplified Eliza Program</h3>

<p>
One of the early, well-known programs within the field of artificial
intelligence was called <i>Eliza</i>, a program by Joseph Weizenbaum.  The
idea was to simulate conversation between a patient and psycho-therapist,
based on a series of patterns and corresponding responses.  Although the
original program had an extensive sequence of patterns, this assignment
focuses on the following five rules:
</p>

<p>
<table>
<tr>
<TH><b> Pattern</b>	<TH>&nbsp;&nbsp;&nbsp; <TH> Response Template 
</tr>
<tr>
<TD>---<sub>1</sub> <b> my</b> <i> singleWord</i> ---<sub>2</sub> <b>

me</b> ---<sub>3</sub>
	<TD><TD>tell me about your <i> singleWord</i>  
</tr>
<tr>
<TD>---<sub>1</sub> <b> i am</b> ---<sub>2</sub>

	<TD><TD>i am sorry to hear you are ---<sub>2</sub>  
</tr>
<tr>
<TD>---<sub>1</sub> <b> am i</b> ---<sub>2</sub>
	<TD><TD>do you believe you are ---<sub>2</sub> 

</tr>
<tr>
<TD>---<sub>1</sub> <b> you</b> ---<sub>2</sub> <b> me</b> ---<sub> 3 </sub>

	<TD><TD>why do you think i ---<sub>2</sub> you 
</tr>
<tr>
<TD>---<sub>1</sub>
	<TD><TD>in what way 
</tr>
</table>


<p>
In this table, the blank spaces in a pattern, denoted by subscripted dashes,
can be filled in with any sequence of words.  Similarly, <i> singleWord</i>
represents exactly one word in a sentence.  For example, these patterns
might generate the following "conversation," where the responses are 
indented and in italics:
</p>

<h3> Sample Dialogue:</h3>

<p>
<blockquote>
well my friend made me come here<br>

&nbsp;&nbsp;&nbsp; <i> tell me about your friend</i><br>
he says i am depressed<br>
&nbsp;&nbsp;&nbsp; <i> i am sorry to hear you are depressed</i><br>
i think i need help<br>
&nbsp;&nbsp;&nbsp; <i> in what way</i><br>
i wonder if you would help me learning to program Scheme<br>

&nbsp;&nbsp;&nbsp; <i> why do you think i would help you</i><br>
 when i registered for the course i wondered am i crazy<br>
&nbsp;&nbsp;&nbsp; <i> do you believe you are crazy</i>
</blockquote>

<p>
Each of these statements and responses follows the template/response
patterns given.  For example, in the first statement:

<blockquote>
well my friend made me come here

</blockquote>

<p>
the presence of the word <code>my</code> near the start of the sentence
with the word <code>me</code> later on corresponds to the first pattern,
with the following matches: 

<center>
<table>
<tr>
<th>Pattern Element&nbsp;&nbsp;&nbsp;&nbsp;   <th>Words from this Sentence</tr>

<tr>
<td>---<sub>1</sub>   <td>well</tr>
<tr>
<td><b>my</b>         <td>my</tr>
<tr>
<td><i>singleWord</i> <td>friend</tr>
<tr>

<td>---<sub>2</sub>   <td>made</tr>
<tr>
<td><b>me</b>         <td>me</tr>
<tr>
<td>---<sub>3</sub>   <td>come here</tr>
</table>

</center>

<p>
After identifying these pattern elements for the first pattern, the Eliza
program uses the corresponding response template.  In this case, the
program prints "<i>Tell me about your friend"</i>.  The first four of these
words come directly from the template.  For the final word,
<i>singleWord</i> in the template was matched with the word "friend" in the
above analysis.

<h4>Historical Note</h4> 

<p>
Although this approach may seem simple today, Joseph Weizenbaum used this
approach as the basis for his widely heralded <i> Eliza</i> in 1966.  In
1976, Weizenbaum noted he "was startled to see how quickly and how deeply
people conversing with [<i> Eliza</i>] became emotionally involved" in the
conversation.  People shared their hopes and secrets, and they became
annoyed if other people looked over their shoulders or otherwise
interrupted.  Even when they knew <i> Eliza</i> was a program, they often
talked as if it were a close personal friend.
</p>

<h4>Exercise</h4>

<p>
Write a C program to solve this Eliza-based pattern-matching problem.
For example, if you entered the successive dialog strings from the "Sample
Dialog" above, the program would respond as the example indicates.  The
program should continue to read user input until the user types "quit".
</p>
</ol>



<!--fall 2012
<h3>Printing Cross Words</h3>

<ol start=9>
<li>
<p>
Consider the problem of printing two words, the first word vertically (one
letter per line) and the second word horizontally, so the words cross at a
common letter.  For example, if the first word is FUNCTIONAL and the second
is SCHEME, then the desired output is:
</p>

<pre>
<tt>
 F
 U
 N
SCHEME
 T
 I
 O
 N
 A 
 L
</tt>
</pre>

<p>
In this problem, you are to write a program that reads two words from a
terminal window and prints them in the crossed pattern shown above
(assuming they have a letter in common).  If the words have more than
one letter in common, then they may be printed with the crossing at any
common letter.  If the words have no letters in common, then the program
should print an error message.
</p>

</ol>
-->

<a name="10"></a><!--fall 2012-->

<ol start=10>

<li>
<h3>Simulation of Hi Ho! Cherry-O</h3>
<p>
This problem explores statistics for the game of Hi Ho! Cherry-O.  For our
purposes, we will follow the description of the game <a
href="http://en.wikipedia.org/wiki/Hi_Ho!_Cherry-O"> as described in
Wikipedia</a>.  Note, however, that the number of cherries on a player's
tree is always between 0 and 10.  
</p>

<ul>
<li>
If one spins 1, 2, 3, or 4, that number of cherries is removed from the
tree (except that the number of the tree can never be negative).
<li>
If one spins a bird and the number of cherries on the tree is 9 or fewer,
then the number of cherries on the tree goes up by 1.  However, if one
spins a bird and the number of cherries on the tree is 10, then the number
of cherries on the tree is unchanged.
<li>
If one spins a dog and the number of cherries on the tree is 8 or fewer,
then the number of cherries on the tree goes up by 2. However, if one spins
a dog and the number of cherries on the tree is 9 or 10, then the number of
cherries on the tree becomes 10 (not higher).
<li>
If one spins a spilled bucket, then all of the cherries return to the tree.
</ul>

<p>
The game progresses in rounds, during which each player in turn spins a
game spinner that has seven outcomes (as described in the Wikipedia
article).  In our simulations, we will assume that each outcome of the
spinner arises randomly with equal probability.
</p>

<p>
Within this framework, the specific purpose of this supplemental problem is
general statistics on how many rounds the game is likely to continue, based
on the number of people playing the game.  The required work for this
problem involves three C procedures, combined within a <tt>main</tt> program.
</p>

<ul>
<li>
Procedure <tt>turn</tt> simulates one turn of a player; that is, it takes a
number <tt>init_cherries</tt> as parameter, and adjusts the number of
cherries on the tree appropriately &mdash; using C's <tt>rand</tt>
function to determine the outcome of the spinner.
<li>
Procedure <tt>playGame</tt> has <tt>players</tt>, the number of players, as
input parameter, and returns the number of rounds taken until some player
wins. 
<li>
Procedure <tt>playNGames</tt> has two parameters:  <tt>players</tt>, the
number of players in a game, and <tt>games</tt>, the number of games to be
simulated.  <tt>playNGames</tt> returns a list with the maximum, minimum,
and average number of rounds taken by the players over the full number of
games.
</ul>

<p>
<i>Hints:</i>  Although you are free to approach this problem however you
want, the following pieces might help.
</p>

<ul>
<li>
Write a procedure <tt>init_games</tt> that takes a number of
<tt>players</tt> as parameter and generates a list of that number of 10's
(the initial number of cherries on the trees for each of those players).
<li> 
Write a procedure <tt>play_round</tt> that takes a list of tree-cherry
numbers as parameter, plays one round for each player, and returns a list
of new totals for the number of cherries for each player.
<li>
Write a procedure <tt>check_win</tt> that takes a list of tree-cherry
numbers as parameter and checks if any of the players has won.
</ul>

</ol>

<a name="11"></a>
<ol start=11>
<li>
<h3>Shopping Bargains</h3>


A store has two policies to encourage shoppers to buy as many goods as
possible:

<ol>
<li>
The purchase of 1 item is full price, but the cost of a second identical
item is 10% off, the cost of a third identical item is 20% off, etc.,
although no item is sold for less that 10% of its original price.
<li>
The shop offers a global discount for high spenders:
<ul>
<li>
If a shopper's overall bill is between $100 and $200 (inclusive), then the
shopper is given a 15% discount (beyond any reduction for purchases of
multiple identical items).
<li>
If a shopper's overall bill is over $200 (i.e., $200.01 or higher), then
the shopper is given a 25% discount (beyond any reduction for purchases of
multiple identical items).
</ul>
</ol>

<p>
Write a program that reads a sequence of original item costs as input and
computes the total charge a customer will pay after discounts.  Reading
should continue on one or more lines until the user enters a cost of 0.00.
For this exercise, assume that the costs of identical items will be grouped
together, and all consecutive equal costs relate to identical items.  To
illustrate, consider this sequence of costs:
</p>

<pre><tt>
1.25 8.73 5.55 5.55 5.55 12.84 5.55 5.55 20.30 20.30 20.30 20.30 0.00
</tt></pre>

<p>
Here, we assume the first item purchases costs $1.25 and the second costs
$8.73.  The third, fourth, and fifth items have the same cost, so we assume
they are identical items (the cost of these items after multiple-item
discount will be 5.55 + 0.9*5.55 + 0.8*5.55).  The sixth item costs 12.84.
The next two items again cost 5.55, but these must represent a different
item than the earlier ones of the same price, since these costs are not
contiguous with the previous run of 5.55 prices.  Thus, the cost of the
seventh and eighth items is 5.55 + 0.9*5.55.  The last four items again
are considered identical, with costs 20.30 + 0.9*20.30 + 0.8*20.30 *
0.7*20.30.  The number 0.00 at the end signifies the end of the input.
</p>

<p>
<i>Notes:</i>  
</p>

<ul>
<li>
Processing should make one pass only through the initial list
of costs.
<li>
The program may utilize any helper functions that seem convenient, although
the user interface must be as prescribed.  (However, even with helper
functions, processing should not make multiple passes through the data.)
<li>
The program should print a cost of 0.00 if the initial sequence of costs
is empty.
<li>
The program should produce an error message, if any of the prices is a
non-number or if any of the items are negative numbers.
</ul>


</ol>

<a name="12"></a> 
<ol start=12>
<li> 
<H3>Elementary Text Analysis</H3>

<p>
Write a C program  that takes the name of a
file as a command-line argument, opens the file, reads through it to determine the
number of words in each sentence, displays the total number of words and
sentences, and computes the average number of words per sentence.  The
results should be printed in a table (at standard output), such as shown
below:
</p>

<pre><tt>
     This program counts words and sentences in file "comp.text ".

     Sentence:  1    Words: 29
     Sentence:  2    Words: 41
     Sentence:  3    Words: 16
     Sentence:  4    Words: 22
     Sentence:  5    Words: 44
     Sentence:  6    Words: 14
     Sentence:  7    Words: 32

     File "comp.text" contains 198 words words in 7 sentences
     for an average of 28.3 words per sentence.
</tt></pre>

<p>
<i>Notes for this problem:</i>
</p>

<ul>
<li>
<p>
A word is defined as any contiguous sequence of letters.  Apostrophes at
the beginning or the end of a word should be ignored.  Apostrophes with
letters immediately before and after are considered part of a word.  For
example, "O'Henry", "I've", "you're", "friend's" and "friends'" should each
be considered as one word.
</p>

<li>
<p>
A sentence is defined as any sequence of words that ends with a period,
exclamation point, or question mark,
<i>except</i> a period after a single capital letter (e.g., an initial)
or embedded within digits (e.g., a real number) should not be counted as
being the end of a sentence.
</p>

<li>
<p>
Digits and punctuation (other than apostrophes, periods, explanation
points, and question marks) should be considered the same as white space.
Thus, 
</p>
<pre>
   After they walked, talked, and ate, the first person said, "I'd like 
   to swim: crawl, side stroke, and butterfly."
</pre>

<p>
Should be considered the same as
</p>

<pre>
   After they walked  talked  and ate  the first person said   I'd like 
   to swim  crawl  side stroke  and butterfly
</pre>

<li>
<p>
White space (e.g., spaces, tabs, line feeds, and return characters) are
considered as equivalent.  Multiple white space characters are considered
the same as one space character.  Thus, the above passage would equivalent
to the following:
</p>

<pre>
After they walked talked and ate the first person said I'd like to swim crawl side stroke and butterfly
</pre>
</ul>

</ol>

<a name="13"></a> 

<ol start=13>
<li>
<h3>County Data</h3>

<p>
The file <tt> /home/walker/207/data-sets/iowa-population-by-county.txt</tt>
contains population and race information for Iowa counties from the 2010
census.  County information is contained on two successive lines, followed
by a blank line (for readability).

<ol>
<li>
The first county line contains  the county name
<li>
The second county line specifies the population of various
racial groups within the county.

<ul>
<li>
Column 1 gives the total population
<li>
Column 2 gives the number of whites only (no mixed race) 
<li>
Column 3 gives the number Black or African Americans only
<li>
Column 4 gives the number of American Indians and Alaska Natives only
<li>
Column 5 gives the number of Asians only
<li>
Column 6 gives the number of Native Hawaiians and Other Pacific Islanders
only
<li>
Column 7 gives the number of people identifying two or more races
</ul>

</ol>

<p>
Write a program that reads a filename from the terminal and then 
determines the ranking of Poweshiek County regarding the total number of
Black/African Americans.  The result should be a ranking number (where 1
means that the county has the largest number of Black/African Americans and
99 means that the count has the smallest number of Iowa's 99 counties).
</p>

<p>
<i>Programming Notes:</i>
</p>

<ul>
<li>
In consideration of space efficiency, arrays may not be used in this
problem.  Arrays place constraints on the number of counties that might be
present in a state.
<li>
In consideration of processing efficiency, the program should read through
the file no more than twice.  Multiple passes through the data would
require many disk accesses, which involves substantial overhead.
</ul>

</ol>

<!-- From CSC 207, Spring 2013, Test 1, version 1 -->
<!--
<p>
The file <tt> /home/walker/207/data-sets/iowa-counties.txt</tt> contains
population and race information for Iowa counties from the 2010 census.
County information is contained on two successive lines.
</p>

<ul>
<li>
The first county line begins with the county name, followed by
several spaces, and the  entire population of the county.
<li>
The second county line specifies the population of various
racial groups within the county.
<ul>
<li>
Column 1 gives the number of whites only
(no mixed race) 
<li>
Column 2 gives the number Black or African
Americans only 
<li>
Column 3 gives the number of American
Indians and Alaska Natives only
<li>
Column 4 gives the number of Asians only
<li>
Column 5 gives the number of Native
Hawaiians and Other Pacific Islanders only
<li>
Column 6 gives the number of people
identifying two or more races
</ul>
</ul>
<p> 
Write a program that reads a filename from the terminal and then finds the
three counties with the highest percentage of non-whites.
</p>

</ol>
-->

<!--fall 2012-->
<!--
<ol start=12>
<li>

<h3>City Data</h3>
<p>
The file <tt>~walker/151p/labs/lab26.dat</tt> contains several items of
information about large American cities. More specifically, in
<tt>~walker/151p/labs/lab26.dat</tt> , each entry consists of the
name of the city (line 1), the county or counties (line 2) and the state
(line 3) in which it is situated, the year in which it was incorporated
(line 4), its population as determined by the census of 1980 (line 5), its
area in square kilometers (line 6), an estimate of the number of telephones
in the city (line 7), and the number of radio stations (line 8) and
television stations (line 9) serving the city.  Thus a typical entry reads
as follows:
</p>

<pre><tt>
Albuquerque
Bernalillo
New Mexico
1891
331767
247
323935
14
5
</tt></pre>
A blank line follows each entry, including the last.

<p>
Write a procedure which has a filename as parameter and which answers the
following questions about the cities represented in the data files.

<ol type=a>
<li>
Which of those cities has the highest population density (population
divided by area)?

<li>
Which of these cities has over one million telephones?

<li>
Which city has the lowest per capita number of radio and television
stations (together)?
</ol>

The answers to each of these questions should be printed neatly and clearly
by the procedure.<p>

</ol>
-->
<!--
<h3>Information on the 1997-1998 Iowa Senate</h3>
<ol start=12>
<li> 
File <tt>/home/walker/151s/labs/ia-senate</tt> contains information about the
members of the 1997-1998 Iowa Senate.  After a title line and a blank line,
a typical line has the following form:

<pre><tt>
Angelo          Jeff        44      Creston           IA 50801
Kramer          Mary        37      West Des Moines   IA 50265
Lundby          Mary        26      Marion            IA 52302-0563
</tt></pre>    

Thus, a typical line gives the last name, the first name, the district
number, the town of residence, the state (always <tt>IA</tt>), and the
town's zip code. The information in these lines is arranged in columns.<p>

Design and write a Scheme program that reads in data from this file and
creates two output files, <tt>senators-by-district</tt> and
<tt>senators-by-zip-code</tt>, in the current working directory.  The 
<tt>senators-by-district</tt>  file should contain the same data as the
source file, in the same format, but with the lines arranged by senate
district (column 3).  The other file, <tt>senators-by-zip-code</tt>, should
contain a list of all senators in the following format

<pre><tt>
 Angelo
Creston, IA 50801
</tt></pre>    

A blank line should appear after each senator and city address.
In this format, the name appears on a first line (first name, then last),
and the city, a comma, the state, and zip code is on the next line &mdash;
separated by single spaces in the format shown.  Note that a variation of
this format (with a street address, if available) might be used for a
mailing label.
</ol>
-->

<ol start=14>
<li> 
<a name="14"></a>
<!--spring 2013-->
<h3>Filtering and Reporting Data</h3>
<p>
Gemstones are attractive forms of rock crystal, commonly used for
decoration and in jewelry.  Gemstones also have interesting mineral
properties.  Gemstones may be classified in a variety of ways, including
chemical composition,  crystal structure, color, specific gravity,
refractive index,  and hardness:
</p>

<ol type=a>
<li>
<p>
<i>Chemical Composition:</i>  While some gemstones are primarily composed
of atoms of one element (e.g., diamonds are mostly carbon, with coloring
coming from traces of other elements), other gemstones are made up of atoms
of several atoms (e.g., mica molecules include oxygen, hydrogen, silicon,
aluminum, iron, and/or many others).   On-line sources of information
include general references (e.g., <a
href="http://www.earth.ox.ac.uk/~davewa/pt/pt02.html"> Common Mineral
Groups</a>) and references to specific minerals (e.g., <a
href="http://www.earth.ox.ac.uk/~davewa/pt/pt02_mica.html"> micas</a>).
</p>

<li>
<p>
<i>Color</i> may be classified informally (e.g., red, yellow, etc.) or more 
formally by viewing thin slices of mineral crystals through the microscope, 
using polarized light (see, for example, <a
href="http://www.gly.bris.ac.uk/www/teach/opmin/mins.html"> Minerals under the 
Microscope</a>).
</p>

<li>
<p>
<i>Specific Gravity</i> is a measure of the density of a mineral.  More
precisely, specific gravity is the ratio of the weight of the mineral in
air to its weight in an equal volume of water.  More details are available
from various on-line sources (see, for example, <a
href="http://www.minerals.net/glossarymain.aspx?alp=all"> the Mineral and
Gemstone Kingdom's glossary</a> for <a
href="http://www.minerals.net/resource/property/specificgravity.aspx"> specific gravity</a>.
</p>

<li>
<p>
<i>Refractive Index</i> provides a measure of how much light bends within a 
crystal.  The higher the refractive index, the more bending and the more
brilliant a crystal is likely to appear.  For more information, see various 
on-line sources, such as   <a
href="http://en.wikipedia.org/wiki/Refractive_index"> Refractive
Index</a>. 
</p>

<li>
<p>
<i>Crystal Structure:</i> Crystals typically have one of several standard
shapes or structures, including cubic, tetragonal, orthorhombic, hexagonal,
monoclinic, and triclinic.  While the details of such structures are beyond
the scope of this problem, the World Wide Web contains many useful
references, including <a
href="http://www.rockhounds.com/rockshop/xtal/part2.html"> crystal forms </a>
(at the macro-level) and <a
href="http://www.chem.ox.ac.uk/icl/heyes/structure_of_solids/lecture1/lec1.html#anchor3">the 
(atomic-level)
representation of structures</a> prepared as part of <a
href="http://www.chem.ox.ac.uk/icl/heyes/structure_of_solids/lecture1/lec1.html">lecture
series</a> by S. J. Heyes.
</p>

<li>
<p>
<i>Hardness</i> often is measured on the (nonlinear) Mohs Scale, which
associates a hardness number to each mineral, from 1 (softest) to 10
(hardest): 
</p>

<p>
<ol>
<li>Talc
<li>Gypsum
<li>Calcite
<li>Fluorite
<li>Apatite
<li>Orthoclase
<li>Quartz
<li>Topaz
<li>Corundum
<li>Diamond
</ol>

<p>
As a comparison, a fingernail has hardness 2.5, glass has hardness 5.5,
and a steel file has hardness 6.5.  Minerals of the same hardness should
not scratch each other, but a mineral of one hardness will scratch minerals
with a lower hardness number. 
</p>

</ol>
<p>
File <tt>/home/walker/151s/labs/gems.txt</tt> contains information on
several gemstones, including color, hardness, specific gravity, and
refractive index. Within the file, each line contains information about a
specific gemstone.
</p>

<p>
Here are a couple of sample lines, and a character 'ruler' to show
how wide the fields are:
</p>

<pre>
          11111111112222222222333333333344444444445555555555666666666677777
012345678901234567890123456789012345678901234567890123456789012345678901234

                Zircon        RED           7.5         4.50         1.95
                 Topaz     YELLOW             8         3.53         1.62
</pre>

<p>
To clarify, the names of the gemstones come first in a line and are
right-justified in a column.  The colors come next, followed by hardness
(on a scale 1 to 10), then specific gravity, and finally refractive index 
(generally between 1.3 and 2.5).
</p>

<p>
Write a program <tt>print-by-color</tt> that will let you select the
gemstones of a certain color and print the information about those
gemstones, where the resulting table is in alphabetical order by gemstone
name and where the columns are labeled.
</p>
 
<p>
For example, if this procedure is invoked with the statement

<pre><tt>
(print-by-color "GREY")
</tt></pre>

the procedure should return a table, such as the following:

<pre><tt>
                                                      Specific   Refractive
              Gemstone       Color       Hardness      Gravity      Index

             Alabaster       GREY             2         2.32         1.53
              Bakelite       GREY           2.5         1.28         1.65
               Calcite       GREY             3          2.7         2.71
                Casein       GREY           2.5         1.33         1.55
              Celluoid       GREY             2         1.35         1.50
            Chalcedony       GREY             7         2.62         1.53
              Corundum       GREY             9         3.99         3.99
               Diamond       GREY            10         3.52         3.52
              Hematite       GREY             6         5.10         5.05
                 Ivory       GREY           2.5         1.80         1.54
               Jadeite       GREY             7         3.34         3.33
           Labradorite       GREY             6          2.7         2.70
                Marble       GREY             3         2.71         1.50
            Meerschaum       GREY             2         1.50         1.53
              Nephrite       GREY           3.5         3.00         2.96
                  Opal       GREY             6         2.10         2.10
                Quartz       GREY             7         2.65         1.55
                Quartz       GREY             7         3.33         2.65
                  Talc       GREY             1         2.70         2.75
</tt></pre>

Another possible format might be:


<pre><tt>
                                       Specific   Refractive
Gemstone Name       Color    Hardness   Gravity      Index

Alabaster            GREY       2         2.32        1.53
Bakelite             GREY       2.5       1.28        1.65
Calcite              GREY       3         2.70        2.71
Casein               GREY       2.5       1.33        1.55
Celluoid             GREY       2         1.35        1.50
Chalcedony           GREY       7         2.62        1.53
Corundum             GREY       9         3.99        3.99
Diamond              GREY      10         3.52        3.52
Hematite             GREY       6         5.10        5.05
Ivory                GREY       2.5       1.80        1.54
Jadeite              GREY       7         3.34        3.33
Labradorite          GREY       6         2.70        2.70
Marble               GREY       3         2.71        1.50
Meerschaum           GREY       2         1.50        1.53
Nephrite             GREY       3.5       3.00        2.96
Opal                 GREY       6         2.10        2.10
Quartz               GREY       7         2.65        1.55
Quartz               GREY       7         3.33        2.65
Talc                 GREY       1         2.70        2.75
</tt></pre>

<p>
As shown in each example, the gemstone names and properties must appear in
labeled columns.  Gemstone names may be either left-justified or
right-justified. 
</p>

<p>
Note that some gemstones, such as Quartz above, appear several times in the 
table, since variations of a gemstone may have different properties.
</p>

</ol>
<!--fall 2012-->
<!--
<h3>File Analysis</h3><p>
<ol start=13>
<li> 
<p>
Write a C program  that takes the name of a
file as a command-line argument, opens the file, reads through it to determine the
number of words in each sentence, displays the total number of words and
sentences, and computes the average number of words per sentence.  The
results should be printed in a table (at standard output), such as shown
below:
</p>

<pre><tt>
     This program counts words and sentences in file "comp.text ".

     Sentence:  1    Words: 29
     Sentence:  2    Words: 41
     Sentence:  3    Words: 16
     Sentence:  4    Words: 22
     Sentence:  5    Words: 44
     Sentence:  6    Words: 14
     Sentence:  7    Words: 32

     File "comp.text" contains 198 words words in 7 sentences
     for an average of 28.3 words per sentence.
</tt></pre>

<p>
In this program, you should count a word as any contiguous sequence of
letters, and apostrophes should be ignored.  Thus, "word", "sentence",
"O'Henry", "government's", and "friends'" should each be considered as one
word. 
</p>

<p>
Also in the program, you should think of a sentence as any sequence of
words that ends with a period, exclamation point, or question mark.
</p>

<p>
<i>Exception:</i> A period after a single capital letter (e.g., an initial)
or embedded within digits (e.g., a real number) should not be counted as
being the end of a sentence.<br> 
White space, digits, and other punctuation should be ignored.
</p>

</ol>
-->

<ol start=15>
<li> 
<!--fall 2012-->
<a name="15"></a>
<h3>Parenthesis Checking</h3>
<p>
Write a program that reads a line of text from the terminal and checks if
the parentheses in the line are balanced.
</p>

<p>
Notes
</p>

<ol class="withloweralpha">
<li>
The program should distinguish among three types of parentheses, {&nbsp;},
[&nbsp;], (&nbsp;).
<li>
Parentheses checking should involve working from the inside of nested
parentheses to the outside.
<li>
In each case, the appropriate right parenthesis should be matched with a
left parenthesis of the same type.
</ol>

<p>
Examples
</p>

<ol class="withloweralpha">
<li>
( these { parentheses[] match } perfectly ) !!!
<li>
(the {right [parentheses ) on } this line ] are in the wrong order.
<li>
this ( line { is missing } one (round ) right parenthesis. 
</ol>

<p>
Comments on a solution to the problem:
This problem can be solved reasonably easily using a single left-to-right
scan of a line, if left parentheses are placed on a stack as they are
encountered.  Then, when a right parenthesis is found, the stack can be
popped and one can check if the right parenthesis has the same type as the
left one.
</p>

<p>
Programming Note:  Your program should use a self-contained 
Stack library package, as described in the <a
href="modules/pointers-stacks-queues/lab-stacks.shtml">lab on Stacks</a> and implemented as lists.
</p>

</ol>

<!--fall 2013-->

<!--#include file="body-footer.inc" -->

</div> <!--labcontent-->

<div class="footer">

<hr><p>

This document is available on the World Wide Web as

<div class="address">
<PRE>
    http://www.cs.grinnell.edu/~walker/courses/161.fa14/suppl-prob.shtml
</PRE>
</div> <!--address-->

<hr>
<table width="100%">
<tr><td>
   <em>created 22 May 2008</em><br>
   <em>revised 26 August 2012</em><br>
   <em>revised 7 January 2013</em><br>
   <em>Problem 2 clarified 1 February 2013</em><br>
   <em>Problems 1-9 replaced August 2013</em><br>
   <em>Academic Honesty Policy clarified 4 February 2013</em><br>
   <em>Typo fixed in problem 1 17 September 2013</em><br>
   <em>Typos fixed in problem 3 28 October 2013</em><br>
   <em>Minor editing 3 February 2014, 4 April 2014</em><br>
   <em>Problems rewritten 16-31 July 2014</em>
   </td>
   <td rowspan="2" align="right">
   <a href="http://validator.w3.org/check/referer"><img border="0" 
      src="/~walker/valid-html401-blue.png" alt="Valid HTML 4.01!" height="31"
      width="88"></a>
   <a href="http://jigsaw.w3.org/css-validator/"><img border="0"
       src="/~walker/vcss-blue.png" 
       alt="Valid CSS!" height="31"
       width="88"></a>
   </td>
</tr>

<tr><td>
   For more information, please contact
   <a class="footer-a" href="http://www.cs.grinnell.edu/%7Ewalker/">Henry M. Walker</a> at
   <a class="footer-a" href="mailto:walker@cs.grinnell.edu">walker@cs.grinnell.edu</a>.
   </td></tr>
</table>

<hr>
<!--#include file="copyright-notice.inc"-->

</div> <!--footer-->
</div> <!--body-->
</body>
</html>
