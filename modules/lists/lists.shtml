<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
   <link rel="stylesheet" type="text/css" href="style.css">
   <title>CSC 161 Module Highlighting  Music Composition with Dynamic Data Structures</title>
    <link rev="made" href="mailto:walker@cs.grinnell.edu">
</head>

<body>
<div class="body">
<!--#include file="header.inc"-->

<div class="labcontent">

<h1>CSC 161 Module Highlighting Music Composition with Dynamic Data Structures</h1>

<h2>Summary and Main Topics</h2>
<p>
The purpose of this module is to cover pointers, and their use in dynamic
data structures, such as linked lists.  The main topics covered are:
</p>

<ol>
  <li>  pointers
  <li>  dynamic memory allocation
  <li>  linked lists 
</ol>

<h2>Day-by-day Details</h2>

<table border>
  <tr>
    <th>Day
    <th>Topic
    <th>Preparation
    <th>In-class
    <th>Due Date
    <th>Availability<br>for<br>Extra<br>Credit
  </tr>
  
  <tr>
    <td>Tuesday, November&nbsp;4
    <td>Pointers
    <td>Review:<br>
      <ul class="index">
        <li>
          King:
          <ul class="index">
            <li>Review:  Chapter 11
            <li>Read:  Chapter 12
          </ul>
          <li>
         K&amp;R:
           <ul class="index">
            <li>Review:  5.1-5.2
            <li>Read:  5.3-5.6
           </ul>
      </ul>                  
    <td><a href="malloc-example.c">malloc-example.c</a><br>
      <a href="list-example.c">list-example.c</a><br>
      <a href="array-list.c">array-list.c</a>
        
    <td>&nbsp;
    <td>&nbsp;
  </tr>
  
  <tr>
    <td>Wednesday, November&nbsp;5
    <td>Pointers
    <td>
      <ul class="index">
        <li>
          King:
          <ul class="index">
            <li>Review:  Chapter 11
            <li>Read:  Chapter 12
          </ul>
          <li>
            K&amp;R:
            <ul class="index">
              <li>Review:  5.1-5.2
              <li>Read:  5.3-5.6
            </ul>
          <li> 
            <a href="scribbler-movie.c">scribbler-movie.c</a>
      </ul>
    <td>
      <a href="lab-pointers.shtml">Pointers Lab</a>
    <td>&nbsp;
    <td>&nbsp;
  </tr>
  
  <tr>
    <td>Friday, November&nbsp;7
    <td>Scheme-like Lists in C
    <td>
      <ul class="index">
        <li>
          King:
          <ul class="index">
            <li>Review:  Chapter 11
            <li>Read:  Chapter 12
          </ul>
          <li>
            K&amp;R:
            <ul class="index">
              <li>Review:  5.1-5.2
              <li>Read:  5.3-5.6
            </ul>
          <li>
            <a href="reading-lists-c.shtml">Reading on Linked Lists in C</a>
          <li> 
            <a href="scheme-lists.c">scheme-lists.c</a>
      </ul>
    <td>
      <a href="lab-lists-c-1.shtml">Scheme-like Lists in C</a>
    <td>Wednesday, November&nbsp;12
    <td>&nbsp;
  </tr>
  
<tr>
  <td valign=top>Monday, November&nbsp;10
    <td>Linked Lists in C
    <td>
      <ul class="index">
        <li>
          King:
          <ul class="index">
            <li>Review:  Sections 17.1, 17.4
            <li>Read:  Sections 17.5-17.6
          </ul>
          <li>
            K&amp;R:
            <ul class="index">
              <li>Review:  6.1-6.3
              <li>Read:  6.4-6.7
            </ul>
          <li>
            <a href="reading-lists-c.shtml">Reading on Linked Lists in C</a>
      </ul>
      
    <td>
      <a href="lab-lists-c-2.shtml">Linked Lists in C</a>
    <td>Monday, November&nbsp;17
    <td>&nbsp;
</tr>

<tr>
    <td>Tuesday, November&nbsp;11
    <td>More Linked Lists
    <td>&nbsp;
    <td>
      <a href="lab-lists-c-movie.shtml">Linked Lists for a Movie</a>
    <td>&nbsp;
    <td>
      <!--
      <a href="lab-lists-c-action.shtml">Linked Lists with Actions</a>:  
      Extra credit if submitted by ?????
      -->
      &nbsp;
  </tr>
  <tr>
    <td>Wednesday, November&nbsp;12
    <td><i>Pause for Breath</i>
    <td>&nbsp;
    <td><i>Pause for Breath</i>
    <td>&nbsp;
    <td>
      <!--
      <a href="lab-lists-c-action.shtml">Linked Lists with Actions</a>:  
      Extra credit if submitted by ?????
      -->
      &nbsp;
  </tr>
  
  
  <tr>
    <td>Friday, November&nbsp;14
  <td valign=top>Program management:  header files
  <td>
    <ul class="index">
      <li>
        King, Chapter 15.
      <li>
        K&amp;R, Section 8.5, pages 81-82.
      <li>
        <a href="reading-prog-mgmt.shtml">Reading on Program Management</a>
    <li>
      <a href="Makefile">Makefile</a>
</ul>

  <td valign=top><a href="lab-prog-mgmt.shtml">Lab on Program Management</a>
  <td valign=top>&nbsp;
  <td valign=top>Extra credit if submitted by Monday, December&nbsp;1
  </tr>

  <tr>
    <td>Monday, November&nbsp;17
    <td valign=top>Project: Music Composition
    <td valign=top>&nbsp;
    <td valign=top>
      <a href="#project5">Project: Music Composition</a> 
    <td valign=top>&nbsp;
    <td valign=top>Extra credit if turned in by Monday,
    December&nbsp;1
  </tr>
    
</table>

<a name="project5"></a>
<h2>Project:  Music Composition</h2>

<h3>Introduction</h3>

<p>
When developing a song, a composer may have an initial idea for a melody,
including pitches (frequencies) and durations (length of the pitch).  After
writing down some first ideas, the composer likely will want to edit the
melody: altering some notes, adding new notes, removing others, reordering
notes, etc.
</p>

<p>
Of course, a full melody-composition program would require extensive
development and is far beyond the scope of what might be done for a CSC 161
project.  Instead, this project provides some basic capabilities for
developing a melody and suggests ideas for a more extensive system.
</p>

<h3>Picking Data Structures</h3>

<p>
In considering how to store a single note, the natural choice is
a <tt>struct</tt> with fields for pitch and frequency.  The choice for an
entire melody requires some analysis.  
</p>

<ul>
<li>
A melody may contain any number of pitches.
<li>
The composer may want to insert, delete, or modify notes anywhere within
the melody.
<li>
The composer may want to transpose a melody from one key to another (e.g.,
adjust the melody by moving all notes up 3 steps in the scale).
<li>
The composer may want to insert one sequence of notes into the melody at a
specific place.
</ul>

<p>
The need for flexibility suggests a linked structure be used.  To use an
array, we would need to determine how long the array should be.  Further,
insertion within the array would likely require moving many existing notes
over to make room for the new addition.  Deletion of a note would likely
require moving many existing notes toward the start to take up the place of
the deleted note.  Linked lists do not have size or ordering constraints,
so linked lists seem better suited to the storage of note information than
arrays.
</p>

<p>
For this project, the simplest approach for storing a melody would be a
singly-linked list, as discussed in several labs in this module.  Other,
more sophisticated list structures are beyond the scope of this project.
</p>

<a name="specifying-notes"></a>
<h3>Specifying Notes</h3>

<p>
When writing a melody, a composer likely would want to identify the name of
a note and its octave.  For example,
see <a href="http://en.wikipedia.org/wiki/Piano_key_frequencies">Piano key
frequencies</a> on Wikipedia for some details.
</p>

<p>
Following this approach, <a href="pitch.h">file <tt>pitch.h</tt></a> defines a
    pitch as a <tt>struct</tt> with name, octave, and pitch information.
</p>

<ul>
<li>
As a complication, the "black" keys on a piano normally have two names.
For example, an "A flat" or "Af" is the same pitch as a "G sharp" or "Gs".
<li>
For this reason, the <tt>struct pitch</tt> contains both a <tt>name</tt>
field and an alternative name field <tt>altName</tt>.
 </ul>

<h4>Specifying Notes on the Piano</h4>

<p>
Using the <tt>struct pitch</tt>
in <a href="pitch.h">file <tt>pitch.h</tt></a> , it is natural to define
the notes on a piano as an array with an entry for each of the 88 keys on
the piano.  Further, we only need one copy of this array.  For this reason,
we utilize file <a href="scale.c"><tt>scale.c</tt></a> to define the array
of pitches corresponding to all keys on a piano. This array can be compiled
once and then used where necessary.
</p>

<p>
When using the <tt>scale</tt> array, a single index gives a structure with
full information about any note on the piano.  For example, here are
several entries from the array:
</p>

<table>
<tr>
  <th>index
  <th>note<br>name
  <th>alternative<br>name
  <th>octave
  <th>frequency
  <th>comment
</tr>

<tr>
  <td align=center>39
  <td align=center>"C" 
  <td align=center>""
  <td align=center>4
  <td align=center>262
  <td>(middle C)
</tr>

<tr>
  <td align=center>40
  <td align=center>"Df"
  <td align=center>"Cs"
  <td align=center>4
  <td align=center>277
  <td>(D flat or C sharp)
</tr>

<tr>
  <td align=center>48
  <td align=center>"A" 
  <td align=center>""
  <td align=center>4
  <td align=center>440
  <td>("Concert A" used for tuning)
</tr>

</table>

<p>
As this table suggests, given an array index, one can quickly retrieve
name, octave, and frequency information.
</p>


<p>
With this notation, the first 5 notes
of <a href="../getting-started/spirit-song.c"> Spirit Song</a>
(from the Getting Started Module) might be represented as follows:
</p>

<table>
<tr>
  <th>index
  <th>name
  <th>octave
  <th>frequency
  <th>duration
</tr>

<tr>
  <td align=center>62
  <td align=center>"B"
  <td align=center>5
  <td align=center>988
  <td align=center>0.75
</tr>

<tr>
  <td align=center>60
  <td align=center>"A"
  <td align=center>5
  <td align=center>880
  <td align=center>0.25
</tr>

<tr>
  <td align=center>58
  <td align=center>"G"
  <td align=center>5
  <td align=center>783
  <td align=center>1
</tr>

<tr>
  <td align=center>55
  <td align=center>"E"
  <td align=center>5
  <td align=center>659
  <td align=center>0.75
</tr>

<tr>
  <td align=center>56
  <td align=center>"F"
  <td align=center>5
  <td align=center>698
  <td align=center>0.75
</tr>

</table>

<p>
Since the index provides information about name and octave, we need store
only the array index to obtain the rest of the note information.  
</p>

<h4>Technical Note</h4>

<p>
Within a music composition program, there is no need to have multiple
copies of the <tt>scale</tt> array, but we may want to refer to that array
in several places.  Thus, the main declaration of the array will be in a 
file <a href="scale.c">scale.c</a> which we will define and compile
separately.
</p>

<p>
In order to reference this array in other parts of the program, we
place the line
</p>

<pre>
extern struct pitch scale[88];
</pre>

<p>
in any implementation files that may need to use this array.  This will
allow the compiler to know that a <tt>scale</tt> array will be supplied
separately where ever it is needed.
</p>

<h3>Storage of a Note</h3>

<p>
Putting the above pieces together in the context of a composer creating a
melody, a single note will contain just an array index and a duration.  For
a linked list of melody notes, a node could use these declarations:
</p>

<pre>
typedef struct noteNode * noteNode_t;

typedef struct noteNode {
  int arrInd;
  double duration;
  noteNode_t * next;
} noteNode;
</pre>

<p>
In reviewing this framework, a <tt>noteNode</tt> is a <tt>struct</tt> with three
fields:  an array index frequency, a duration, and a pointer to the next
node in the melody.  Also, the type <tt>nodeNode_t</tt> refers to a pointer
to a <tt>noteNode</tt>.  For convenience, these declarations are contained
in the header file <a href="noteNode.h">noteNode.h</a>.
</p>

<h3>Melody Development:  a Musical Phrase</h3>

<p>
One reasonable element of music composition involves the use of a musical
phrase, separate from the melody.  The idea is that a composer might develop
a basic melody, and then want to insert a new phrase (or series of notes)
into the phrase at various points.  Pragmatically, this means that the
composer might develop/edit both a main melody and a separate phrase and
periodically insert the phrase into the melody.  Common editing techniques
might apply to both the melody and the phrase, but  an insertion
operation  of the phrase into the melody also should be possible.
</p>

<h3>Referencing a Note within a Melody or a Phrase</h3>

<p>
In a professional, music-editing context, a composer might work with parts
of a melody or phrase in many ways (e.g., by pointing to a note on the
screen, by moving backward and forward from a given note, etc.).  However,
many of these approaches require considerable sophistication within a
computer program&mdash;well beyond the scope of our CSC 161 project.
</p>

<p>
For this project, we will simply number the notes in a melody or phrase,
with the first note having index 1.  Thus, the first five notes in a melody
would be notes 1, 2, 3, 4, and 5.  Also, once a note is inserted within a
melody, numbering will start fresh with the first number being 1.  
For example, suppose a melody has 5 notes and we insert 3 notes before the
last one.  The new melody will have 8 notes, and the last note (formerly
number 5 in the original melody) now has number 8.
</p>

<h3>Musical Composition Functions for this Project</h3>

<p>
Altogether, this project involves the following operations:
</p>

<ol>
<li>
Editing either the melody or a separate musical phrase.
<ol class="withloweralpha">
<li style="color:blue">
Setting the sequence of notes to null
<li style="color:blue">
Adding a sequence of notes at the end of the current melody or phrase
<li>
Changing any single note
<li>
Deleting a single note
<li>
Inserting a new note after a specified note.
</ol>
<li>
Displaying/playing a melody or a separate musical phrase
<ol class="withloweralpha">
<li style="color:blue">
Printing a table of the notes (i.e., sequence number, note name, octave,
frequency, duration)
<li>
Playing the melody or phrase (i.e., on the Scribbler 2)
</ol>
<li>
Modifying a melody or a separate musical phrase
<ol class="withloweralpha">
<li>
Transposing each note in the sequence up or down by a specified number of
half steps.
<li>
Inverting each note in a sequence, so that if the original melody goes up a
certain number of half steps, the inverted melody goes does the same number
of half steps.
</ol>
<li>
Inserting the separate musical phrase into the melody following a specified
note.
</ol>

<p>
As described below, <font style="color:blue">parts of the outline in blue
    are implemented in the code below.</font>
</p>

<h3>Project Organization</h3>

<p>
Work on this project falls into approximately three main categories:
</p>

<ul>
<li>
Information about notes 
<ul>
<li>
Storing note information a <tt>struct pitch</tt>
(in <a href="pitch.h">pitch.h</a>)
<li>
Storing information about notes on a piano (in <a href="scale.c">scale.c</a>).
</ul>
<li>
The data and operations for linked lists of notes (for a melody or separate
musical phrase)
<ul>
<li>
Definition of a node for the linked list
(<a href="noteNode.h">noteNode.h</a>)
<li>
Logical operations on a linked list (e.g., insert notes at end, change
node, delete node) (<a href="noteSeq.h">noteSeq.h</a>)
<li>
Implementation of the logical list operations
(<a href="noteSeq.c">noteSeq.c</a>)
</ul>
<li>
Main program that uses pitch and note-sequence information to perform
operations for the composer (<a href="composerMain.c">composerMain.c</a>)
</ul>

<p>
Following the <a href="reading-prog-mgmt.shtml">reading on program
    management</a>, these elements could be placed within the following
    file structure:
</p>

<center>
<img src="project-composer.png" alt="files for the composer project">
</center>

<p>
As illustrated in this diagram, <tt>noteNode</tt>s are used for the linked
list (<tt>noteSeq.h</tt>).  Similarly, information about note pitches
in <tt>pitch.h</tt> is used in the user's <tt>composerMain</tt> program and
within linked list processing (in <tt>noteSeq.c</tt>).  However,
information about note pitches in <tt>pitch.h</tt> may or may not be used
in the definition of various linked-list operations
(in <tt>noteSeq.h</tt>).  An array of notes on a piano
(in <tt>scale.c</tt>) is used in the implementation of note operations
(in <tt>noteSeq.c</tt> and maybe <tt>noteSeq.h</tt>) and possibly in the
user <tt>composerMain</tt> program.  Linked list operations (defined
in <tt>noteSeq.h</tt>) are used by the user <tt>composerMain.c</tt>
program, but the details of implementation of those operations (given
in <tt>noteSeq.c</tt>) are not needed by the user.
</p>

<h3>Getting Started</h3>

<p>
To begin this project, code is available in the various files mentioned
above to create a simple melody or separate musical phrase and to print the
table of notes for the melody or phrase.  (These are operations 1a, 1b, and
2a in the outline above.  For further clarification, the outline displays
these operations in blue.)
</p>

<p>
Existing files:
</p>

<ul>
<li>
<a href="pitch.h">pitch.h</a>
<li>
<a href="scale.c">scale.c</a>
<li>
<a href="noteNode.h">noteNode.h</a>
<li>
<a href="noteSeq.h">noteSeq.h</a>
<li>
<a href="noteSeq.c">noteSeq.c</a>
<li>
<a href="composerMain.c">composerMain.c</a>
</ul>

<h2>Work for this Project</h2>

<p>
Expand the initial files to complete the operations identified above (steps
1c, 1d, 1e, 2b, 3a, 3b, and 4 in the outline).
</p>

<ul>
<li>
For each operation, you will need to consider what parts relate
specifically relate to list processing (and thus should be defined
in <tt>noteSeq.h</tt> or implemented in <tt>noteSeq.c</tt>).
<li>
For each operation, you will need to consider what is largely a
user-application matter and thus should be handled
in <tt>composerMail.c</tt>.
</ul>

<p>
Define a <tt>Makefile</tt> to compile and link the various parts of your
program.
</p>

<p>
  <em>Extra Credit:</em> 
</p>
<ul>
  <li>Add up to two new operations to the composer program
    functions.  An example might be creating a musical phrase by playing a
    melody backward (called a <i>retrograde</i> phrase in musical jargon).
  </ul>

<h4>Grading</h4>

<ul>
<li>
<a href="grading-form.pdf">General Grading Form</a>
<li>
<a href="dynamic-structures-grading-form.shtml">Project-specific Grading Form</a>
</ul>

</div>  <!--- labcontent -->

<div class="footer">
  <hr>

  <p>
    This document is available on the World Wide Web as
  </p>

  <PRE>
    http://www.cs.grinnell.edu/~walker/courses/161.fa13/modules/lists/lists.shtml
  </PRE>

  <hr>
  <table width="100%">
    <tr><td valign=top>
        <em>created created 24 June 2011</em><br>
        <em>full revision 19 July 2011 by David Cowden</em><br>
        <em>dates edited 2 September 2011 by Henry M. Walker</em><br>
        <em>full revision 14 November 2011 by Henry M. Walker</em><br>
        <em>refinement 20 April 2012 by Henry M. Walker</em><br>
        <em>revision (new project) 20-24 August 2012 by Henry M. Walker</em><br>
        <em>dates corrected 1 September 2012, 14 August 2013, 12 November 2013 
          by Henry M. Walker</em><br>
        <em>modest reorganization and editing 8-9 February 014 by Henry M. Walker</em><br>
        <em>dates updated 12 June 2014 by Henry M. Walker</em>
      </td>
      <td valign=top rowspan="2" align="right">
        <a href="http://validator.w3.org/check/referer">
          <img border="0" 
               src="/~walker/valid-html401-blue.png" 
               alt="Valid HTML 4.01!" height="31"
               width="88"></a>
        <a href="http://jigsaw.w3.org/css-validator/">
          <img border="0" src="/~walker/vcss-blue.png"
               alt="Valid CSS!" height="31"
               width="88"></a>
      </td>
    </tr>
    
    <tr><td valign=top>
        For more information, please contact
        <a class="footer-a" href="/~walker/">Henry M. Walker</a> at
        <a class="footer-a"  href="mailto:walker@cs.grinnell.edu">
          walker@cs.grinnell.edu</a>.
    </tr>
  </table>

<hr>
<!--#include file="copyright-notice.inc"-->

</div> <!-- footer -->
</div> <!-- body -->
</body>
</html>












