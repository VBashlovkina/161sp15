<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
    <link rel="stylesheet" type="text/css" href="style.css">
    <title>Computer Science 161: Program Management</title>
    <link rev="made" href="mailto:walker@cs.grinnell.edu">
</head>

<body>
<div class="body">

<!--#include file="header.inc"-->

<div class="labcontent">

<h1>Program Management: Header Files and <tt>make</tt></h1>

<h2>The namelist.c Program</h2>

<p>
Previous labs, <a href="lab-lists-c-1.shtml">Scheme-like linked Lists</a>
and <a href="lab-lists-c-movie.shtml">Linked Lists for a Movie</a>,
developed a
program <a href="scribbler-list-movie.c">scribbler-list-movie.c</a> that
kept track of pictures taken by a robot.  In that program, successive
pictures were stored on a linked list, in which each node contained a
picture and next pointer.
</p>

<p>
To simplify the current discussion, this reading utilzes a program  <a
href="namelist.c">namelist.c</a> that just stores a name and next pointer
in each node.  That is, a node contains a character array and next field:
</p>

<div class="block">
  <pre>
/* Maximum length of names */
#define strMax 20
struct node
{
   char data [strMax];
   struct node * next;
};
  </pre>
</div>

<p>
In contrast to <a href="scribbler-list-movie.c">scribbler-list-movie.c</a>,
all functions in <a href="namelist.c">namelist.c</a> have been completely
implemented.
</p>

<h2>Reorganizing namelist.c</h2>

<p>
The program <code>namelist.c</code> contains all components of the
linked-list code in a single file.  Specifically, this program contained:
</p>

<p>
<ul>
<li>
definition of a list node,
<li>
function prototypes for all list operations,
<li>
implementation of all list operations, and
<li>
a <code>main</code> program providing a user interface and 
tying all the above pieces together.
</ul>

<p>
While such a monolithic framework works fine for small projects, the use of
a single file for an entire program has several drawbacks:
</p>

<ul>
<li>
a single file requires a long time to compile,
<li>
only one developer at a time can work on the program file,
<li>
a change in one part of the program requires recompilation of the entire
program, and
<li>
individual procedures or segments of the program cannot be easily reused in
other programs without copying and recompiling.
</ul>

<p>
In C (and other languages), such problems are resolved following a
two-pronged approach:
</p>

<ol>
<li>
A program is divided into multiple files.
<li>
Compiling is automated, so that multiple files can be compiled as needed 
using a simple command line.
</ol>

<h3>Dividing the <code>namelist.c</code> Program Into Pieces</h3>

<p>
Since <code>namelist.c</code> contains several independent components, a
separate component could be defined for each component.  The relevant files
and their dependencies are shown below:
<p>

<center>
<img src="list-file-dependencies.jpg"  ALT="list program file dependencies"> 
</center>

<p>
As this diagram indicates, the original <code>namelist.c</code> program may be
divided into the following four components: 
</p>

<ul>
<li>
File <a href="prog-mgmt/node.h">node.h</a>:  definition of a list node
<li>
File <a href="prog-mgmt/list-proc.h">list-proc.h</a>: function
prototypes for all list operations 
<li>
File <a href="prog-mgmt/list-proc.c">list-proc.c</a>:
implementation of all list operations
<li>
File <a href="prog-mgmt/main.c">main.c</a>:  the main program
</ul>

<p>
The source files for all of these files may be found in directory
<code>~walker/c/lists/prog-mgmt</code>.

<p>
Within this structure, <code>node.h</code> is independent of the
others.  However, information about a node structure is needed elsewhere,
so that both <code>list.h</code> and <code>main.c</code> contain references
to <code>node.h</code> in <code>include</code> statements.  
Similarly, both implementation files (<code>list-proc.c</code> and
<code>main.c</code>) reference tree operations, so both contain references
to <code>list-proc.h</code>.
</p>

<p>
Technically, you may have noted that <code>list-proc.h</code> includes
<code>node.h</code>, so an explicit inclusion of <code>node.h</code> in 
<code>main.c</code> is unnecessary.  However, in such a distributed
structure of files, it is not uncommon that some definitions are referenced
in several places.  (A programmer could track down all possible references,
but this may undermine some of the advantages of dividing the program into
pieces.)  
</p>

<p>
Unfortunately, this multiple referencing of a file could mean that a
definition is twice in a program, and compilers take a dim view of
such matters.  To resolve this problem, <a
href="prog-mgmt/node.h">node.h</a> contains lines:

<pre><code>
#ifndef _NODE_H
#define _NODE_H

...

#endif
</code></pre>

<p>
In C, files can define identifiers for the compiler, and the compiler can
check if an identifier has been defined previously.  For example, the
identifier <code>strMax</code> is defined as the number 20 for a global
constant, just as was done in previous programs.  However, in <a
href="prog-mgmt/node.h">node.h</a>, a new identifier
<code>_NODE_H</code> also is defined.  With this new identifier, when a
file first references <code>node.h</code>, the identifier
<code>_NODE_H</code> will not have been defined.  The test
<code>#ifndef</code> asks the compiler if an identifier is not defined, and
in this case processing continues within the <code>if</code> statement.
This first call, therefore, defines identifier <code>_NODE_H</code>.  With
any subsequent references to <code>node.h</code>, identifier
<code>_NODE_H</code> will have been defined, so processing within the
<code>ifndef</code> statement will not happen a second time.
</p>


<h3>Compiling</h3>

<p>
With this structure, the header files <code>node.h</code> and
<code>list-proc.h</code> contain definitions, but do not yield any code
directly.  Files <code>list-proc.c</code> and <code>main.c</code>, however,
must be compiled.  Since these files are independent, they can be compiled
in either order, with the commands:
</p>

<pre><code>
gcc -c list-proc.c
gcc -c main.c
</code></pre>

<p>
Here the <code>-c</code> flag tells the compiler to produce a
machine-language or "object" file, but not to expect the whole program to
be present.  The resulting files have a <code>.o</code> extension.
</p>

<p>
These pieces then can be linked together with the command:
</p>

<pre><code>
gcc -o main main.o list-proc.o
</code></pre>

<p>
Alternatively, if <code>main.c</code> is to be compiled after
<code>list-proc.c</code>, then compiling and linking of
<code>main.c</code> can be done in one step.  The resulting commands are:

<pre><code>
gcc -c list-proc.c
gcc -o main main.c list-proc.o
</code></pre>

<p>
As this illustrates in the second line, the main <code>.c</code> program is
given before any object files.
</p>

<h3><code>make</code> and <code> Makefile</code> in Linux/Unix</h3>

<p>
While the division of software into multiple files can ease development,
the manual compiling all of the pieces can be tedious.  Unix provides a
<code>make</code> capability to automate this process, where instructions
for compiling are given in a file called <code>Makefile</code>.  Here is
one version of such a file: <a
href="prog-mgmt/Makefile"><code>Makefile</code></a>.
</p>

<p>
While this program is slightly more complex than is absolutely necessary,
this version shows several common elements of many <code>Makefile</code>s.
Running this twice at a workstation provides the following interaction.
</p>

<pre><code>
$ make
gcc -ansi -c main.c
gcc -ansi -c list-proc.c
gcc -o main main.o list-proc.o
$ make
make: Nothing to be done for `all'.
</code></pre>

<p>
As this illustrates, <code>make</code> and <code>Makefile</code> keep track
of what needs to be done to compile and link the designated files.  Work
occurs only as needed.  Thus, the first time <code>make</code> was run,
both programs were compiled and the resulting object files linked.
However, the second time <code>make</code> was run, the machine detected
that no files had changed from the first time, so no further work was
needed.  To expand on this point, if file <code>list-proc.c</code> were
changed, but no other changes were make, running <code>make</code> might
produce the following: 
</p>

<pre><code>
$ make
gcc -ansi -c list-proc.c
gcc -o list list.o list-proc.o
</code></pre>

<p>
Here, nothing related to file <code>main.c</code> had changed, so that was
not recompiled.  More generally, <code>make</code> reviews the
status of all relevant files and compiles and links only those that are out
of date.
</p>

<p>
With this overview of <code>make</code>, we now look at the
<code>MakeFile</code> instructions more carefully.  While comments are very
helpful for documentation, general processing in a <code>MakeFile</code>
has three components: <i>dependencies</i>, <i>rules</i>, and <i>macros</i>.
</p>

<p>
<i>Comments</i> in a <code>MakeFile</code> begin with the character #.  The
comment continues for the rest of the line, as in <i>bash</i> or <i>csh</i>
shell programming. 
</p>

<p>
<i>Dependencies</i> within <code>MakeFile</code> indicate which files
depend on which.  In the example, these dependencies are given by:
</p>

<pre><code>
all: main
main:  main.o list-proc.o
list.o:  main.c node.h list-proc.h
list-proc.o:  list-proc.c list-proc.h node.h
</code></pre>

<p>
After the first line, each line indicates which other files are needed in
order to compile or link the given resulting file.  The target file is
given first, followed by a colon, and the required files follow.
</p>

<p>
The first line in the example actually has a similar purpose, although this
first line also provides the primary target or goal for the entire process.
In the case at hand, we might have moved the <code>main:</code> line to the
top of the file.  However, we wanted to specify some other information
early as well, so this placement of <code>main:</code> would have been
awkward.  Instead, we used the dummy target <code>all</code>, and specified
that this target would depend on our real goal:  <code>main</code>.  (If we
had wanted several final program files, all of them could have been listed
here.)
</p>

<p>
<i>Rules</i> specify what command(s) must be given to create the desired
targets.  In the example, we could have used the following rules, one for
each actual file to be created: </p>

<pre><code>
gcc -ansi -c main.c
gcc -ansi -c list-proc.c
gcc -o main main.o list-proc.o
</code></pre>

<br>
<i>Typing Note:  By convention, such rules must begin with a tab character.</i>

<p>
<i>Macros:</i>
While such explicit specification of commands works fine within a
<code>Makefile</code>, this approach sometimes may cause trouble if the
software is to be compiled and linked on multiple platforms.  To anticipate
such matters, it is common to use <i>macros</i> to specify various
compiling details.  Then, if the files are moved to other systems, only the
macros need be changed -- not the entire <code>Makefile</code>.  
</p>

<p>
In the example at hand, we specify both which C compiler to use
(<code>gcc</code>) and what flags to use for that compiler
(<code>-ansi</code>).  Such macros are defined at the start of the example
<code>Makefile</code>.

<pre><code>
CC = gcc
CFLAGS = -ansi
</code></pre>

<p>
Each of these lines defines a new variable that can be used later.  As in
C-shell programming, referencing these variables is achieved by preceding
the variable name with a dollar sign $.  Parentheses also are allowed, as
illustrated in the example.
</p>

<pre><code>
	$(CC) -o main main.o list-proc.o
	$(CC) $(CFLAGS) -c main.c
	$(CC) $(CFLAGS) -c list-proc.c
</code></pre>

<p>
<i>Cleaning up your Directory:</i>  In addition to compiling a program, the
very last line of the <tt>Makefile</tt> defines  rule to <tt>clean</tt>
your directory, deleting unneeded <tt>.o</tt> files and <i>emacs</i>
backups to your <tt>.c</tt> programs.  When you have finished working on
your program, you can accomplish this clean up with the command:
</p>

<pre>
   make clean
</pre>

<p>
Beyond these basic capabilities, <code>make</code> and
<code>Makefile</code> allow many additional features.  However, the pieces
here may be adequate for many common applications.  
</p>

<p>
Extensive documentation regarding <code>make</code> may be found through
the online 
<a href="http://www.gnu.org/software/make/manual/make.html">GNU make
Manual</a>, Free Software Foundation, 2006.
</p>

</div> <!--labcontent-->

<div class="footer">
<hr>

<p>
This document is available on the World Wide Web as
</p>

<div class="address">
<PRE>
     http://www.cs.grinnell.edu/~walker/courses/161.fa12/modules/module-pointers-stacks-queues/reading-prog-mgmt.shtml
</PRE>
</div> <!--address-->

<hr>
<table width="100%">
<tr><td>
   <em>created 3 December 2001</em><br>
   <em>revised 4 April 2010 by Henry M. Walker</em><br>
   <em>revised 16-18 November 2011 by Henry M. Walker</em><br>
   <em>revised 12 December 2011 by Henry M. Walker</em><br>
   <em>minor editing 22 August 2012 by Henry M. Walker</em>
   <td rowspan="2" align="right">
   <a href="http://validator.w3.org/check/referer"><img border="0"
      src="/~walker/valid-html401-blue.png" alt="Valid HTML 4.01!" height="31"
      width="88"></a>
   <a href="http://jigsaw.w3.org/css-validator/"><img border="0"
       src="/~walker/vcss-blue.png"
       alt="Valid CSS!" height="31"
       width="88"></a>
   </td>
</tr>
<tr><td>
   For more information, please contact
   <a class="footer-a" href="/~walker/">Henry M. Walker</a> at
   <a  class="footer-a" href="mailto:walker@cs.grinnell.edu">walker@cs.grinnell.edu</a>.
   </tr>
</table>

<hr>
<!--#include file="copyright-notice-reading.inc"-->

</div> <!--footer-->
</div> <!--body-->
</body>
</html>
