<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
    <link rel="stylesheet" type="text/css" href="style.css">
    <title>Laboratory Exercise on Linked Lists</title>
    <link rev="made" href="mailto:walker@cs.grinnell.edu">
</head>

<body>
<div class="body">
<!--#include file="header.inc"-->
<div class="labcontent">


<h1>Laboratory Exercise on Linked Lists</h1>

<h2>Goals:</h2>  

<p>
This laboratory helps you gain more experience with the use of lists and
pointers.
</p>

<h2>Preparation before Class</h2>

<ul>
<li>Reading from text:
    <ul>
    <li>King:
        <ul>
        <li>Review: Sections 17.1, 17.4
        <li>Read: Sections 17.5-17.6
        </ul>
    <li>K&amp;R:
        <ul>
        <li>Review: 6.1-6.3
        <li>Read: 6..4-6.7
        </ul>
    </ul>
<li><a href="reading-lists-c.shtml">Reading on Linked Lists in C</a>
</ul>

<h2>Introduction</h2>

<p>
Throughout this lab, work directly with C pointers and <tt>struct</tt>s.
<u>Do not use the Scheme-like functions <tt>car</tt>, <tt>cdr</tt>,
and <tt>cons</tt></u> that were included in some parts of the previous lab.
</p>

<p>
Some parts of this lab ask you to utilize work you may have done in
parts of the <a href="lab-lists-c-1.shtml">previous lab on Scheme-like
    lists</a>.  After this practice, additional functionality is explored.
</p>


<p>
This lab involves working with lists of data, using an existing driver
program which actually constructs the lists.  In particular, file 
<a href="namelist.c"><tt>namelist.c</tt></a> contains a menu-driven program
to maintain a list of names.
</p>

<p>
As written, the program contains functions to insert a name on the list
(before a designated node), to delete a specified name from the list, and
to print the names on the list.
</p>

<ol>
<li>
Copy <a href="namelist.c"><tt>namelist.c</tt></a> to your account, compile
it, and run it several times to discover just what the program does.
</ol>

<p>
As you may have discovered, in addition to the above features, program
<tt>namelist.c</tt> contains several stubs for additional functions, but
details of these functions  are not given.  Your task in this lab is
to fill in the pieces for two of these new functions on the menu.
</p>

<h2>Work Started in Class</h2>

<p>
<ol start=2>
<li>
<p>
  Write the details for <i>countList (struct Node * first) </i>
  which counts the number of items in the list.
</p>
<p>
  To perform this task, you will want to move along the list item-by-item,
  counting the items as you go.
</p>

<li>
<p>
Write the details for function <i>printLast (struct Node * first)</i>
which should print the data for the last item on the list.  (If the
list is null, the procedure should print a message to that effect
instead.)  
</p>
<p>
To perform this task, proceed iteratively, moving along the list item-by-item
until coming to the end, where the <i>next </i> field is <i> NULL </i>.
</p>

<li>
<p>
Before moving to the <tt>putFirst</tt> function, review the code for
<i>namelist.c</i> carefully.  Functions <i>print, printLast, and
countList,</i> take parameters of type
<i>Node *</i>, while functions <i>addName</i> and <i>deleteName</i>
take parameters of type <i>Node **</i>.  Give a careful statement of why
two types of parameters are used in these various functions.
</p>

<p>
  <i>Note:</i> Do <b>NOT</b> go on to the next part until you have written a
  convincing answer to this question!<p>
</p>

<li>
<p>
Write the details for function <i>putFirst (struct Node ** firstPtr)</i> 
which reads the name of an item on the list and moves that item to the
front of the list.
</p>

<p>
To perform this task, you first have to read in the name of the
item desired.  Then you need to search the list item-by-item to find the
desired item.  Next you need to remove that given item from its current
place in the list (if it is not already first).  Finally you need to insert
that given item at the beginning of the list.
</p>
<p>
Since manipulation of lists is most efficient if only pointers are
manipulated, your program should neither create new nodes nor dispose of
existing ones.  In particular, your program should not use either the
<i>malloc</i> or <i>free</i> functions during the processing of
<i>putFirst</i>.
</p>
<p>
Also, your program should respond appropriately in all cases.  In
particular, <i>putFirst</i> should print appropriate messages if either
list is null or the item designated is not found on the list.
</p>
</ol>


<h2>Homework</h2>

<ol start=6>

<li>
<p>
The original <i>namelist.c</i> program included a <tt>print</tt> 
function that worked iteratively (with a <tt>while</tt> loop) to print the
elements in the list.  Write a function <tt>printRec</tt> that
produces a similar listing using recursion.
</p>

<li>
<p>
Write a function <i>printLast (struct Node * first) </i>
which uses recursion to print the last item on the list.
</p>

<li>
<p>
Write a function <i>printReverse (struct Node *first)</i>
that prints the names in the nodes from the last node to the front.
</p>
<p>Test your program to see if it works for different cases such
    as a null list. 
</p>

<p>
<i>Hint:</i>  As with Step 6, think recursively.
</p>

</ol>

<!--#include file="body-footer.inc" -->

</div>

<div class="footer">
<p>
<hr><p>

This document is available on the World Wide Web as

<PRE>
     http://www.cs.grinnell.edu/~walker/courses/161.fa14/modules/module-lists/lab-lists-c-2.shtml
</PRE>

<hr>
<table width="100%">
<tr><td>
   <em>created 4 August 2011 by David Cowden and Dilan Ustek</em><br>
   <em>revised 4 August 2011 by David Cowden and Dilan Ustek</em><br>
   <em>edited 17 November 2011 by Dilan Ustek</em><br>
   <em>additional editing 17 November 2011 by Henry M. Walker</em><br>
   <em>reorganized and rethought 9 February 2014 by Henry M. Walker</em><br>
   <em>readings added 19 September 2014</em> by Henry M. Walker
   </td>
   <td rowspan="2" align="right">
   <a href="http://validator.w3.org/check/referer"><img border="0"
      src="/~walker/valid-html401-blue.png" alt="Valid HTML 4.01!" height="31"
      width="88"></a>
   <a href="http://jigsaw.w3.org/css-validator/"><img border="0"
       src="/~walker/vcss-blue.png"
       alt="Valid CSS!" height="31"
       width="88"></a>
   </td>
</tr>
<tr><td>
   For more information, please contact
   <a class="footer-a" href="/~walker/">Henry M. Walker</a> at
   <a class="footer-a" href="mailto:walker@cs.grinnell.edu">walker@cs.grinnell.edu</a>.
   </ class="footer-a"tr>
</table>

<hr>
<!--#include file="copyright-notice.inc"-->

</div>
</div>
</body>
</html>

