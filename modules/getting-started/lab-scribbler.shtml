<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>

<head>
	<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">    
	<link rel="stylesheet" type="text/css" href="style.css">
 	<title>Laboratory Exercise: Using the Scribbler 2 </title>
        <link rev="made" href="mailto:walker@cs.grinnell.edu">
</head>

<body>
<div class="body">

<!--#include file="header.inc"-->

<div class="labcontent">

<H1>Laboratory Exercise: Using the Scribbler 2</H1>

<h2>Goals</h2>  

<p>
This lab introduces the Scribbler 2 robot to students and combines the
Scribbler 2 with eSpeak. 
</p>

<h2>Class Preparation before Class</h2>

<ul class="index">
  <li>S2 start-up guide, p. 3-6
  <li>Walker, <a href="scribblerlab-annotated.shtml"><code>scribblerlab.c</code>:  A
      first C program using the Scribbler 2 robot</a>
  <li>Annotated programs <a href="earsHangLow.c">earsHangLow.c</a>, 
    <a href="spirit-song.c">spirit-song.c</a>
  <li><a href="MyroC.h">MyroC.h header file</a>
  <li><a href="MyroCDev.h">MyroCDev.h header file</a>
</ul>

<h2>Work Started in Class</h2>

<h3>Preface:  Two Versions</h3>

<p>
Scribbler 2 robots are controlled in C using one of two software packages
developed at Grinnell College.
</p>

<ul>
<li>
<tt>MyroC</tt> was developed in Summer 2011 and has been used successfully
in CSC 161 since Fall 2011.  Behind the scenes, <tt>MyroC</tt> utilizes
materials written in C++, and it turns out that the environment for the C++
limits the portability of <tt>MyroC</tt>.
<li>
<tt>MyroCDev</tt> has been under development since August 2011.  Work is
not complete, but most operations are available (except work with the
robot's camera).  
</ul>

<p>
From a user's perspective, <tt>MyroC</tt> and <tt>MyroCDev</tt> should be
extremely similar.  A few capabilities have been refined
in <tt>MyroCDev</tt>, and camera functions are not yet available
in <tt>MyroCDev</tt>.  Otherwise, you can use either package.
</p>

<p>
Through the semester, <u>please use both <tt>MyroC</tt>
    and <tt>MyroCDev</tt>, and report any difficulties that you
    encounter!</u>  Feedback will be very helpful in refining
    the <tt>MyroCDev</tt> package.
</p>



<h3>Getting Started with the Scribbler 2</h3>
<p>
In this lab, you will experiment with the Scribbler 2 robot's sound
capabilities, as well as practice writing and compiling programs that use
the robot.
</p>

<p>
For every program using the Scribbler 2 robot, you first must connect to
the robot. At the end of the program (before <tt>return 0;</tt>), you will
disconnect from the robot. The command to connect to the robot
is <code>rConnect("/dev/rfcomm0")</code>&nbsp;.  This opens a connection to
the robot using the port <code>/dev/rfcomm0</code>&nbsp;. Later in the lab,
you will experiment with what happens when the port is not included. The
command to disconnect from the robot
is <code>rDisconnect()</code>&nbsp;. Here, you do not need to state any
port.</p>
<p>
<b>Hint: </b>Don't forget to include the library <code>MyroC.h</code> at the beginning of every program.
</p>

<h3>Connecting to and disconnecting from the robot</h3>

<p> In this exercise, you will download the code for a program that
  connects to the Scribbler, beeps once, and then disconnects from the
  Scribbler. Read the program and its annotations to further understand
  what is happening. You will then copy the program to your <i>emacs</i>
  file and compile the program on your terminal. Finally you will run the
  program.
<br>
Here are the steps to do these:
</p>

<ol>
  <li>
    <p>Open a terminal window and move to the directory you are using for
      this course.
    </p>
  <li>
    <p>Start <i>emacs</i> with the command:
    </p>
<pre>
emacs scribblerlab.c & 
</pre>
  <li>
    <p>Copy the linked program <a href="scribblerlab.c">scribblerlab.c</a>
      to your <i>emacs</i> window. Don't forget to save it every time before
      you compile.
    </p>
  <li><p>Compile the program by typing in the terminal:</p>

    <p>
      For the <tt>MyroC</tt> environment, use the line:
<pre>  
gcc -lMyroC -o scribblerlab scribblerlab.c 
</pre>
    <p>
      For the <tt>MyroCDev</tt> environment:
    </p>

<ul>
<li>
Change the <tt>include</tt> statement for the MyroC package to
<pre>  
#include "MyroCDev.h"
</pre>
<li>
Compile with the line
<pre>  
gcc -lMyroCDev -lbluetooth -o scribblerlab scribblerlab.c 
</pre>

<p>
  The <tt>MyroCDev</tt> interacts directly with a <tt>bluetooth</tt>
  package for Bluetooth communication in Linux.  This requires the
  additional parameter <tt>-lbluetooth</tt>
</p>
<li>
  <p>With each approach for compilation, run the program in your terminal by typing:
  </p>

<pre>
./scribblerlab 
</pre>
</ul>
</ol>

<h3> Experimenting with Connections</h3>
 <ol start=6>
    <li>
      <p>In the program <code>scribblerlab.c</code>&nbsp;, delete the
        <code>/dev/rfcomm0</code>&nbsp; port that is
        in <code>rConnect()</code>&nbsp;. What happens when you compile and
        run? Now type <code>hello</code>&nbsp; into the port. What happens
        when you compile and run? Do the same for the null string
        ""&nbsp;. Replace the port when you are done and save the program.
      </p>
    <li>
      <p>Delete the include statement. What happens when you try to
        compile? Replace the include statement and save.
      </p>
 </ol>


<h3>Sound from the Scribbler 2 Robot</h3>
<p>Here is the documentation for rBeep() from the development version of
  the MyroC.h header file:</p>
<div class="block">
<PRE>  
/* Beeps with the given duration and frequency
   @param duration:  length of note in seconds
   @param frequency:  frequency of pitch in cycles per second (hertz)
   pre-condition:  duration > 0.0
*/
  void rBeep (double duration, int freq);
</PRE>
</div>
<ol start=8>
  <li>
    <p>In the original program <code>scribblerlab.c</code>&nbsp;, copy the
      beep statement and change the frequency to 600, 700, 900, 400, 15000 and
      200. Experiment with frequencies. Which frequencies are audible?
    </p>
  <li>
    <p>Now vary the length of the beeps. Copy the beep statement
      again and this time change the duration to 0.75, 2, 2.5, 3, 3.1, and
      4. Listen to what happens.
    </p>
 </ol>


<h3>Write your own program: Music</h3>
<ol start=10>
<li>
 <p>Write a program that connects to the robot, makes it beep a short
 tune that sounds good to you, then disconnects from the robot. </p>

<ul>
<li>
 <p><i>Hint: The pitches for various notes can be found using Wikipedia or in
 the example programs for today.</i></p>
</ul>
</ol>

<h2>Homework</h2>

<h3>Scribbler 2 Robots and eSpeak</h3>

<p>
A challenge arises when trying to test a robot-based program, in which the
robot performs several actions &mdash; including movement.
</p>

<ul>
<li>
Testing requires the programmer to look at the code to know what is
supposed to happen.
<li>
Testing requires the programmer to watch the robot to see what it does.
</ul>

<p>
Even with 2 eyes, watching both the program and the robot can be
difficult.  The <i>eSpeak</i> package can help resolve this difficulty.
</p>

<ol start=11>
<li>
<p>
Examine  the <a href="scribbler-espeak.c"
            target="scribbler-espeak">scribbler-espeak.c</a> program.
<ol class="withloweralpha">
<li>
<p>
Open the <a href="scribbler-espeak.c"
            target="scribbler-espeak">scribbler-espeak.c</a> program and
copy it to your account.
</p>

<li>
<p>
To compile the program, you will need to specify both MyroC and eSpeak with
one of the following two lines:
</p>

<pre>
gcc -lMyroC -leSpeakPackage -o scribbler-espeak scribbler-espeak.c
gcc -lMyroCDev -lbluetooth -leSpeakPackage -o scribbler-espeak scribbler-espeak.c
</pre>

<li>
<p>
Run the program and describe what happens.
</p>

<li>
<p>
Edit the program, make some changes, and compile and run the revised
program to check what happens.
</p>
</ol>
</ol>


<h2>Optional Activity:  Playing a Duet</h2>
<ol start=12>
<li>
<p>
Look in the <a href="MyroC.h"><tt>MyroC.h</tt></a>
or <a href="MyroCDev.h"><tt>MyroCDev.h</tt></a> header file and find the
function <tt>rBeep2()</tt>.  Write a simple program and test
how <tt>rBeep2()</tt> works. If you finish this, go through the rest of the
header file and see if there is anything else you want to try testing out.
</p>


</ol>
<!--#include file="body-footer.inc" -->

</div> <!--labcontent-->

<div class="footer">
<hr>

<p>
This document is available on the World Wide Web as
</p>

<div class="address">
<PRE>
     http://www.cs.grinnell.edu/~walker/courses/161.fa14/modules/module-getting-started/scribblerlab.shtml
</PRE>
</div> <!--address-->

<hr>
<table width="100%">
<tr><td>
   <em>created 13 July 2011 by Dilan Ustek & April O'Neill</em><br>
   <em>last full revision 18 July 2011 by Dilan Ustek & April O'Neill</em><br>
   <em>minor editing 22 August 2011 by Henry M. Waker</em><br>
   <em>revised 18 September 2011 by Erik Opavsky</em><br>
   <em>minor editing (added emacs note, changed footer) 20 July 2012 by Henry M. Waker</em><br>
   <em>Expanded with eSpeak 15 January 2014 by Henry M. Waker</em><br>
   <em>readings added 1 September 2014 by Henry M. Walker</em>
   
   </td>

   <td rowspan="2" align="right">
   <a href="http://validator.w3.org/check/referer"><img border="0"
      src="/~walker/valid-html401-blue.png" alt="Valid HTML 4.01!" height="31"
      width="88"></a>
   <a href="http://jigsaw.w3.org/css-validator/"><img border="0"
       src="/~walker/vcss-blue.png"
       alt="Valid CSS!" height="31"
       width="88"></a>
   </td>
</tr>


<tr><td>
   For more information, please contact
   <a class ="footer-a" href="/~walker/">Henry M. Walker</a> at
   <a class ="footer-a" href="mailto:walker@cs.grinnell.edu">walker@cs.grinnell.edu</a>.
   </tr>

</table>

<hr>
<!--#include file="copyright-notice.inc"-->

</div> <!--footer-->
</div> <!--body-->
</body>
</html>


