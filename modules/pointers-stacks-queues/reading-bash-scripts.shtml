<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
    <link rel="stylesheet" type="text/css" href="style.css">
    <title>CSC 161 Lab. Exercise on Linux Scripts</title>
    <link rev="made" href="mailto:walker@cs.grinnell.edu">
</head>
<body>
<div class="body">
<!--#include file="header.inc"-->
<div class="labcontent">

<h1>Linux Scripts</h1>

<h2>Introduction</h2>

<p>
The Bash shell allows users to interact with the computer through a
terminal window, organizing commands that tie various programs together.
First developed by Brian Fox in 1987, the Bash shell seeks to incorporate
numerous features from earlier shells for the Unix operating system.
In particular, the Bash shell draws upon the Bourne shell (developed by Ken
Thompson and then Stephen Bourne around 1977), the Korn shell (developed by
David Korn in the early 1980s), and the C shell (developed by Bill Joy,
based on Thompson's earlier shells).
</p>

<p>
Within a terminal window, you already have used several commands within the
Bash shell.  For example,  
<a href="../getting-started/lab-linux-basics-1.shtml">Linux lab 1</a> and
<a href="../getting-started/lab-linux-basics-2.shtml">Linux lab 2</a> 
discussed Bash commands, such as:
</p>

<ul>
<li>
<tt>password</tt>
<li>
<tt>sleep, history, cat</tt>
<li>
<tt>pwd, cd, ls, ls -l, which, whereis</tt>
<li>
<tt>mkdir, rmdir, rm, cp, mv, more, head, pushd, popd</tt>
<li>
<tt>man</tt>
<li>
<tt>lpr, a2ps, lpq, lprm</tt>
<li>
<tt>chmod</tt>
</ul>

<p>
In this lab, we consider several additional commands, and we explore how
various capabilities can be packaged to accomplish various tasks.  The
approach is not unlike programming in C (or Scheme), although the
programming elements often are entire programs.
</p>

<h2>Some Additional Commands</h2>

<p>
Bash includes a huge range of commands.  Here are a few more useful
capabilities:
</p>

<table border>
<tr>
   <th>Command
   <th>Description
   <th>Example
</tr>

<tr>
   <td><tt>cal</tt>
   <td>display a calendar for a given year
   <td><tt>cal 2010</tt>
</tr>

<tr>
   <td><tt>date</tt>
   <td>print the current time and date in various formats<br>
       many options documented with <tt>man date</tt>
   <td><tt>date +'%I:%M %p on %A, %B %d, %Y' </tt>
</tr>

<tr>
   <td><tt>diff</tt>
   <td>display differences in lines between two files
   <td><tt>diff file1 file2</tt>
</tr>

<tr>
   <td><tt>echo</tt>
   <td>print specified text
   <td><tt>echo hello world!</tt>
</tr>

<tr>
   <td><tt>env</tt>
   <td>print the environmental variables currently set
   <td><tt>env</tt>
</tr>

<tr>
   <td><tt>grep</tt>
   <td>scan a file or other input for a specified text
   <td><tt>env | grep home</tt>
</tr>

<tr>
   <td><tt>hostname</tt>
   <td>return name of current workstation
   <td><tt>hostname</tt>
</tr>

<!--
<tr>
   <td><tt></tt>
   <td>
   <td><tt></tt>
</tr>
-->

<tr>
   <td><tt>sort</tt>
   <td>sort lines of a file
   <td><tt>sort -n -k 12</tt>  (sort by numbers in column 12)
</tr>

<tr>
   <td><tt>users</tt>
   <td>simple list of users
   <td><tt>users</tt>
</tr>

<tr>
   <td><tt>who</tt>
   <td>print list of users currently logged in
   <td><tt>who</tt> and <tt>who -a</tt>
</tr>

<tr>
   <td><tt>whoami</tt>
   <td>print the username of the person logged in
   <td><tt>whoami</tt>
</tr>

<tr>
   <td><tt>ypcat password</tt>
   <td>print user information from the password file
   <td><tt>ypcat password | grep walker</tt>
</tr>

</table>



<p>
More information on each of these commands may be found with
the <tt>man</tt> facility (e.g., <tt>man date</tt>).
Beyond this basic documentation included here an in previous labs, many
resources are available on line.  Here are a few places to begin:
</p>

<ul>
<li>
The <a href="http://www.gnu.org/software/bash/bash.html">Bash home page</a>
from the <a href="http://www.gnu.org">GNU Project</a> provides a complete
online manual for Bash.
<li>
The <a href="http://tldp.org/LDP/Bash-Beginners-Guide/html/index.html">Bash
    Guide for Beginners</a> from <a href="http://tldp.org">The Linux
    Documentation Project</a> provides a good introduction to the Bash
    shell.
<li>
At this writing, a Google search of "bash shell introduction" produced
about 2,5000,000 hits, so there is much easily-accessible material to 
read on this subject!
</ul>

<h2>Additional Notes</h2>

<h3>Arithmetic Expressions Require ((    ))</h3>

<p>
The variables in a bash script are by default interpreted as text. To get
bash to interpret a value as a number, in order to do arithmetic operations
including arithmetic comparisons, you must wrap the expression in
double-parentheses. For example, to increment a variable <tt>i</tt> by
one, use the expression<tt>((i++))</tt> .
</p>

<h3>Conditionals and Loops</h3>
<p>
In addition to basic commands, the Bash shell includes capabilities for
conditionals (<tt>if</tt>) and loops (<tt>for, while)</tt>.  The long
history of Bash is particularly evident in the syntax allowed
for <tt>if</tt> expressions.  Bash allows interprets each syntax properly
&mdash; but do not try to mix and match the different versions.  The
following examples illustrate acceptable Bash syntax, following two
different ancestors.
</p>

<table border width="100%">
<tr>
   <th width = "20%">Task
   <th width = "40%">Bourne shell style
   <th width = "40%">Korn shell style
   <!--<th width = "29%">C shell style-->
</tr>

<tr>
   <td valign=top> numeric test<br> a &gt; 0
   <td><tt> 
if [ $a -gt \0 ]; then<br>
&nbsp;&nbsp;&nbsp;   echo positive<br>
fi 
</tt>
   <td><tt>
if (( $a > 0 )); then<br>
&nbsp;&nbsp;&nbsp; echo positive<br>
fi 
</tt>
   <!--<td><tt></tt>-->
</tr>

<tr>
   <td valign=top>numeric test<br> a &le; 0
   <td><tt>
if [ $a -le 0 ]; then<br>
&nbsp;&nbsp;&nbsp; echo non-positive<br>
else <br>
&nbsp;&nbsp;&nbsp; echo positive<br>
fi 
</tt>
   <td><tt>
if (( $a <= 0 )); then<br>
&nbsp;&nbsp;&nbsp; echo non-positive<br>
else <br>
&nbsp;&nbsp;&nbsp; echo positive<br>
fi 
</tt>
   <!--<td><tt></tt>-->
</tr>

<tr>
   <td valign=top>numeric test<br> a &lt; 0 and a == 0
   <td><tt>
if [ $a -lt 0 ]; then<br>
&nbsp;&nbsp;&nbsp; echo negative<br>
elif [ $a -eq 0 ]; then<br>
&nbsp;&nbsp;&nbsp; echo zero<br>
else <br>
&nbsp;&nbsp;&nbsp; echo positive<br>
fi 
</tt>
   <td><tt>
if (( $a <= 0 )); then<br>
&nbsp;&nbsp;&nbsp; echo non-positive<br>
elif (( $a == 0 )); then<br>
&nbsp;&nbsp;&nbsp; echo zero<br>
else <br>
&nbsp;&nbsp;&nbsp; echo positive<br>
fi 
</tt>
   <!--<td><tt></tt>-->
</tr>

<tr>
   <td valign=top>numeric test<br> 0 &le; a &le 10
   <td><tt>
if [ 0 -le $a  -a $a -le 10 ]; then<br>
&nbsp;&nbsp;&nbsp; echo between 0 and 10<br>
else<br>
&nbsp;&nbsp;&nbsp; echo not between 0 and 10<br>
fi
</tt>
   <td><tt>
if (( (0 <= $a) && ($a <= 10) )); then<br>
&nbsp;&nbsp;&nbsp; echo between 0 and 10<br>
else<br>
&nbsp;&nbsp;&nbsp; echo not between 0 and 10<br>
fi
</tt>
   <!--<td><tt></tt>-->
</tr>

<!--
<tr>
   <td valign=top>
   <td><tt></tt>
   <td><tt></tt>
   <td><tt></tt>
</tr>

<tr>
   <td valign=top>
   <td><tt></tt>
   <td><tt></tt>
   <td><tt></tt>
</tr>

<tr>
   <td valign=top>
   <td><tt></tt>
   <td><tt></tt>
   <td><tt></tt>
</tr>

<tr>
   <td valign=top>
   <td><tt></tt>
   <td><tt></tt>
   <td><tt></tt>
</tr>
-->
</table>

<p>
For reference, all of these code segments are available in the Bash shell 
<a href="bash-example-1">bash-example-1</a>
</p>

<h3>Comparison Operators</h3>
<p>
Comparison operators are available in both the Bourne and Korn
environments, although the syntax is different:
</p>

<pre>
Korn shell:      ==   !=    <   <=    >   >=   &&   ||
Bourne shell:   -eq  -ne  -lt  -le  -gt  -ge   -a   -o
</pre>

<p>
String comparison is possible with the symbols 
<pre><code>  ==  !=  <  <=  >  >=  &&  ||</code></pre>

<!--
<h4>Operations</h4>

<table width="100%">
<tr>
   <th width = "13%">Operation
   <th width = "29%">Bourne shell style
   <th width = "29%">Korn shell style
   <th width = "29%">C shell style
</tr>

<tr>
   <td>
   <td><tt></tt>
   <td><tt></tt>
   <td><tt></tt>
</td>

<tr>
   <td>
   <td><tt></tt>
   <td><tt></tt>
   <td><tt></tt>
</td>


</table>
-->

</div>

<div class="footer">
<p>
<hr>

<p>
This document is available on the World Wide Web as
</p>

<blockquote>
<pre>
http://www.cs.grinnell.edu/~walker/courses/161.sp12/modules/pointers-stacks-queues/reading-linux-scripts.shtml
</pre>
</blockquote>

<hr>

<table width="100%">
<tr><td>
   <em>created 21 April 2008</em><br>
   <em>last revised 25 April 2012</em>
   </td>
   <td rowspan="2" align="right">
   <a href="http://validator.w3.org/check/referer"><img border="0"
      src="/~walker/valid-html401-blue.png" alt="Valid HTML 4.01!" height="31"
      width="88"></a>
   <a href="http://jigsaw.w3.org/css-validator/"><img border="0"
       src="/~walker/vcss-blue.png"
       alt="Valid CSS!" height="31"
       width="88"></a>
   </td>
</tr>

<tr><td>
   For more information, please contact
   <a class="footer-a" href="http://www.cs.grinnell.edu/%7Ewalker/">Henry M. Walker</a> at
   <a class="footer-a" href="mailto:walker@cs.grinnell.edu">walker@cs.grinnell.edu</a>.
   </td></tr>
</table>

<hr>
<!--#include file="copyright-notice-reading.inc"-->

</div>
</div>
</body>
</html>
