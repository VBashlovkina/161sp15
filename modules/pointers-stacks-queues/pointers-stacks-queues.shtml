<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
    <link rel="stylesheet" type="text/css" href="style.css">
    <title>CSC 161 Module on  Pointers, Stacks, and Queues</title>
    <link rev="made" href="mailto:walker@cs.grinnell.edu">
</head>

<body>

<div class="body">
<!--#include file="header.inc"-->

<div class="labcontent">

<h1>Module on Pointers, Stacks, and Queues</h1>

<h2>Summary and Main Topics</h2>
<p>
This module applies previous concepts (e.g., pointers, linked lists) to
widely-used dynamic data structures.  Topics covered include: 
</p>

<ol>
<li>More about pointers
<li>Variations of linked lists
<li>Stacks
<li>Queues
</ol>
<table border>
<tr>
  <th>Day
  <th>Topic
  <th>Preparation
  <th>In-class
  <th>Due Date
  <th>Availability<br>for<br>Extra<br>Credit
</tr>
  
<tr>
  <td valign=top>Tuesday, November&nbsp;18
   <td valign=top>Abstract data types<br>
      Stacks, queues
  <td valign=top>Readings on
    <ul class="index">
      <li><a href="reading-stacks.shtml">stacks</a>
      <li><a href="reading-queues.shtml">queues</a>
    </ul>
  <td valign=top>&nbsp;
  <td valign=top>&nbsp;
  <td valign=top>&nbsp;
</tr>

<tr>
  <td valign=top>Wednesday, November&nbsp;19
  <td valign=top>Abstract data types<br>
      Stacks
  <td valign=top><a href="reading-stacks.shtml">reading on stacks</a>
  <td valign=top><a href="lab-stacks.shtml">lab on stacks</a>
  <td valign=top>&nbsp;
  <td valign=top>&nbsp;
</tr>

<tr>
  <td valign=top>Friday, November&nbsp;21
  <td valign=top><a href="../../suppl-prob.shtml#4"><b>Supplemental
  Problem&nbsp;4</b></a>
  <td valign=top>&nbsp;
  <td valign=top><a href="../../suppl-prob.shtml#4">Supplemental
  Problem&nbsp;4</a> (done individually) 
  <td valign=top>Friday, November&nbsp;21
  <td valign=top>
    <!--<a href="../../c/route-cipher/">Discussion of solutions</a>-->&nbsp;
</tr>

<tr>
   <td valign=top>Friday, November&nbsp;21
 <td valign=top>Abstract data types<br>
      Queues &mdash; Array Implementation
  <td valign=middle rowspan=2><a href="reading-queues.shtml">reading on queues</a>
  <td valign=top><a href="lab-queues.shtml">lab on queues (arrays)</a>
  <td valign=middle rowspan=2>Due:  Tuesday, December&nbsp;2
  <td valign=top rowspan=2>&nbsp;
</tr>

<tr>
   <td valign=top>Monday, November&nbsp;24
 <td valign=top>Abstract data types<br>
      Queues &mdash; List Implementation
  <td valign=top><a href="lab-queues.shtml#list-implementation">lab on
  queues (lists)</a>
</tr>

<tr>
  <td valign=top>Tuesday, November&nbsp;25
  <td valign=top>Bash scripts<br>
      Using Bash scripts for testing
  <td valign=top>
    <a href="reading-bash-scripts.shtml">reading on Bash Scripts</a>
  <td valign=top><a href="lab-bash-scripts.shtml">lab on bash scripts</a>
  <td valign=top>&nbsp;
  <td valign=top>extra credit if submitted by Tuesday, December&nbsp;9
</tr>
 
<tr>
  <td valign=top>Wednesday, November&nbsp;26
  <td valign=top><b>Hour Test 3</b>
  <td valign=top colspan=2>Covers through Lab on Stacks with Lists
  <td valign=top>&nbsp;
  <td valign=top>&nbsp;
</tr>

<tr>
  <td valign=top>Monday, December&nbsp;1
  <td valign=top>Project
  <td valign=top>Examples:  Stack implementations
    <ul class="index">
<li>
<a href="stack-lab.c">main program</a> using stack operations
according to some implementation
<li>
<a href="stack-lab-1.c">approach 1</a>, in which the stack contains
an array of pointers and the stack just points to strings as entered
<li>
<a href="stack-lab-2.c">approach 2</a>, in which the stack
contains an array of the strings themselves and strings are copied onto the
stack and copied back; for purposes of illustration, each string on the
stack is limited to 5 characters.
<li>
<a href="stack-lab-3.c">approach 3</a>, in which the stack
contains an array of pointers and space is allocated to copy the string
during each push operation.
<li>
<a href="stack-lab-4.c">approach 4</a>, in which the stack
contains an array of the strings themselves and strings are copied onto the
stack and just a reference is to the string is returned by a pop.
</ul>

  <td valign=top><a href="#project6">Variations with Stacks</a>
  <td valign=top>Due:  Friday, December&nbsp;5
  <td valign=top>&nbsp;
</tr>

</table>

<a name="project6"></a>
<h2>Project:  Variations with Stacks</h2>

<p>
The readings for this project show four different approaches for
implementing a stack based on an underlying array structure.  In
particular, each approach uses a fixed size array to store strings on a
stack.  When all items in the array are in use, the stack is full and
further push operations will fail.
</p>

<p>
The variations among the stack implementations involve what is actually
stored during a push operation and what is returned during a pop operation.
In brief, some possibilities are:
</p>

<ul>
<li>
push operation (given a pointer to a string)
<ul>
<li>
the stack contains a reference to the original string pushed
<li>
the stack contains a new copy of the string being pushed
<li>
push operation makes a copy of the string being pushed, and 
the stack contains a reference to the new copy
</ul>
<li>
pop operation (returns a pointer to a string)
<ul>
<li>
the string reference returned identifies a reference stored in the stack
<li>
the string reference returned identifies the location of a string located
within the stack itself
<li>
the pop operation makes a new copy of the string reference in the stack and
returns a reference to this new copy 
</ul>
</ul>

<p>
The main program in the reading pushes several items onto several stacks
and then pops the stacks and prints the results.  All four stack approaches
work fine in this simple context.
</p>

<h3>Project, Part 1:  Code Analysis</h3>

<p>
Examine each of the four implementation approaches supplied in the project
reading.  For each approach, identify:
</p>

<ul>
<li>
what information is stored by <tt>push</tt> (e.g., a string, a copy of a
string, a pointer to the original string, a pointer to a copy of the
string)
<li>
what information is returned by <tt>pop</tt> (e.g., a pointer from the
stack, a pointer to a string stored on the stack, a pointer to a copy of
the string designated on the stack)
</ul>

<p>
In each case, briefly justify your conclusions.
</p>

<h3>Project, Part 2:  Experimentation</h3>

<p>
The program <a href="stack-project.c">stack-project.c</a> creates a single
stack <tt>myStack</tt> and then uses the standard stack operations in the
following sequence:
</p>

<ul>
<li>
initial three strings with variables a, b, c  (the initialization is up
to you, but the three strings should have different values)
<li>
push a, b, and c onto the stack
<li>
pop the stack three times to get strings stored as variables d, e, and f
<li>
print the strings referenced by a, b, c, d, e, f
<li>
change strings a and e to a text not previously used (use <tt>strcpy</tt>
from the string library)
<li>
print the strings referenced by a, b, c, d, e, f
<li>
define two new strings g and h, initialized to previously unused values
<li>
push g and h onto the stack
<li>
change string g to a new value (use <tt>strcpy</tt> or access a specific
character with a subscript &mdash; <tt>str[2] = 'q'</tt>)
<li>
print the strings referenced by a, b, c, d, e, f, g, h
</ul>

<p>
Review the output obtained with each of the four stack implementation
approaches, and explain the results obtained (what variables remain the
same, what changes and how).
</p>

<h3>Project, Part 3:  A Stack of Pictures</h3>

<p>
Suppose you wanted to use a stack to store successive pictures taken by a
Scribbler 2 robot.  For each of the four approaches identified for strings,
</p>

<ul>
<li>
Explain whether the approach for strings could be easily modified for
pictures.  
<ul>
<li>
If a similar approach is possible, outline what adjustments would be
needed.
<li>
If the approach is not easily adapted to pictures, briefly explain why.
</ul>
</ul>

<h3>Project, Part 4:  Your Preference for a Stack of Pictures</h3>

<p>
In reviewing various approaches for implementing an array-based stack of
pictures, how would you proceed?  Would you adapt one of the approaches
discussed for strings?  Would you use a different approach (explain)?
</p>



<h4>Grading</h4>

<ul>
<li>
<a href="grading-form.pdf">General Grading Form</a>
<li>
<a href="pointers-grading-form.shtml">Project-specific Grading Form</a>
</ul>

</div> <!-- labcontent -->

<div class="footer">
<hr>

<p>
This document is available on the World Wide Web as
</p>

<BLOCKQUOTE>
<PRE>
http://www.cs.grinnell.edu/~walker/courses/161.fa13/module-pointers-stacks-queues/module-pointers-stacks-queues.shtml
</PRE>
</BLOCKQUOTE>

<hr>
<table width="100%">
<tr><td valign=top>
   <em>created created 19 July 2011 by Henry M. Walker</em><br>
   <em>full revision 17 August 2011 by Henry M. Walker, Dilan Ustek, and
   April O'Neill</em><br>
   <em>revised 2 September 2011 by Henry M. Walker</em><br>
   <em>revised 25 November 2011 by Henry M. Walker</em><br>
   <em>revised 12 December 2011 by Henry M. Walker</em><br>
   <em>revised (new project) 24  August 2012 by Henry M. Walker</em><br>
   <em>dates updated 1 September 2012, 1 January 2013, 14 August 2013
     by Henry M. Walker</em>
   </td>
   <td valign=top rowspan="2" align="right">
   <a href="http://validator.w3.org/check/referer"><img border="0"
      src="/~walker/valid-html401-blue.png" alt="Valid HTML 4.01!" height="31"
      width="88"></a>
   <a href="http://jigsaw.w3.org/css-validator/"><img border="0"
       src="/~walker/vcss-blue.png"
       alt="Valid CSS!" height="31"
       width="88"></a>
   </td>
</tr>

<tr><td valign=top>
   For more information, please contact
   <a class="footer-a" href="/~walker/">Henry M. Walker</a> at
   <a class="footer-a" href="mailto:walker@cs.grinnell.edu">walker@cs.grinnell.edu</a>.
   </tr>
</table>

<hr>
<!--#include file="copyright-notice.inc"-->

</div> <!-- footer -->
</div> <!-- body -->

</body>
</html>
