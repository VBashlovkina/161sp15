<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<html>

<head>
  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">    
  <link rel="stylesheet" type="text/css" href="style.css">
  <title>Laboratory Exercise on Arrays </title>
  <link rev="made" href="mailto:walker@cs.grinnell.edu">
</head>

<body>
<div class="body">
<!--#include file="header.inc"-->

<div class="labcontent">

<H1>Laboratory Exercise on Arrays</H1>

<h2>Goals</h2>  

<p>
The goal of this lab is to introduce arrays as data structures and as
parameters to functions. 
</p>

<h2>Preparation before Class</h2>

<ul>
<li>Reading from Text
    <ul>
    <li>King: Section 8.1, pages 161-169
    <li>K&amp;R: 1.6, 1.9, 5.7 
    </ul>
<li><a href="reading-array-notes.shtml">Notes on arrays</a>
<li><a href="reading-array-parm.shtml">Array parameters</a>
<li>    Examples
    <ul>
    <li><a href="array-scale.c">array-scale.c</a>
    <li><a href="array-move.c">array-move.c</a>
    <li><a href="photographer.c">photographer.c</a>
    <li><a href="max-min.c">max-min.c</a>
    <li><a href="max-array.c ">max-array.c </a>
    </ul>
</ul>

<h2>Work Started in Class</h2>

<p>
An array is used to arrange data in memory. A real-life example to this
kind of data structure can be the dining hall cubbies. There are boxes next
to each with limited amounts of space in each.  The following steps
illustrate the use of arrays within C.
</p>

<h3>Array Indices</h3>
<ol>
<li>
<p>
Copy the program, <a href="array-scale.c">array-scale.c</a> to your account.
</p>

<ol class="withloweralpha">
<li>
Write a paragraph explaining what this program does.
<li>
Near the end of the program, the index variable is set to 5.  What happens
if this index value is set to an inappropriate value? You may want to try
reasonably small errors (e.g., index&nbsp;=&nbsp;8, or index&nbsp;=&nbsp;-1)
as well as ridiculous indices (e.g., index&nbsp;=&nbsp;123456789). Explain
the results that you get.
</ol>
</ol>

<h3>Multiple Arrays</h3>
<ol start=2>
  <li>
    <p>
      Program, <a href="array-move.c">array-move.c</a>, makes the Scribbler
      move at specified speeds for certain times, using one array for speed
      and a second array for time.  
    </p>
    <ol class="withloweralpha">
      <li>
        Explain how this program is similar to and different from the
        program <code>array-scale.c</code> from the previous question.
      <li>
        Change the loop in the program so that it counts down, instead of up.
      <li>
        Try changing the initialization <code>numMoves</code>, which tells
        the number of moves(it is now 8) to different numbers and see what
        happens.
        <ul>
          <li>Try a number smaller than 8.
          <li>Try a number greater than 8.
        </ul>
    </ol>
</ol>

<h3>A Robot Journey</h3>
<ol start=3>
  <li>
    <p>
      One might describe a journey by the robot as having a series of
      steps.  For each step, 
    </p>
    <ul>
      <li>
        the robot moves forward at a specified speed for a certain time
      <li>
        the robot turns at a given speed for a specified time
    </ul>
    <p>
      As you know, speeds for the Scribbler 2 are numbers between -1.0 and
      1.0 (or between 0.0 and 1.0, if the robot only moves forward).  Also,
      speed parameters for either <tt>rTurnRight</tt> or <tt>rTurnLeft</tt>
      are between -1.0 and 1.0.
    </p>
    <p>
      Set up an appropriate set of arrays to guide the robot through a
      journey of at least 10 steps.  (The main loop should go through array
      values, first calling <tt>rForward</tt> and then one of the turn
      commands.)  (See the <a href="../../MyroC.h">MyroC.h</a>
      or <a href="../../MyroCDev.h">MyroCDev.h</a> headers for details of
      these robot commands.)
    </p>

</ol>

<h3>Taking Pictures</h3>

<p>
The following notes outline the steps needed to utilize the Scribbler 2
to take a picture.
</p>

<ul>
<li>
<p>This is how you declare a Picture:
</p>

<div class="block">
<pre>
  Picture * pic;
</pre>
</div>

<li>
<p>This is how you take and store a Picture:
</p>

<div class="block">
<pre>
  pic = rTakePicture();
</pre>
</div>

<li>
<p>This is how you show a Picture 
</p>
<div class="block">
<pre>
  rShowPicture (pic);
</pre>
</div>

<p>Note, however,  that <code>rShowPicture</code> is a blocking call;
that is, when you call <code>rShowPicture</code>, the picture is displayed,
and subsequent processing is suspended until you close the picture's
window.
</p>
<li>
In contrast, this is how you show a Picture without blocking:

<div class="block">
<pre>
  rDisplayPicture()
</pre>
</div>

<p>When you use <code>rDisplayPicture</code>, the picture is displayed,
and subsequent processing continues.</p>

</ul>

<p>
Example program <a href="photographer.c">photographer.c</a>
illustrates the difference of how blocking and non-blocking commands
work.
</p>
<ol start=4>
<li>
<p>
photographer.c will take a picture, turn then show it to you, then repeat
this twice more. 
</p>

<ol class="withloweralpha">
<li>
First uncomment the first commented out part , then run the program and
observe. 
<li>
Next, comment back out <tt>rShowPicture</tt> part and uncomment
the second part of the code. 
</ol>

<p>
What is the difference of the functions for these two commands?
</p>


</ol>

<h3>Making a Reverse Movie</h3>

<p>
You can make an array of <tt>Picture</tt>s just like any other variable
type.  This is because <tt>Picture</tt> is a "type" just like <tt>char</tt>
and <tt>int</tt>, but it is for storing Scribbler pictures.
</p>

<ol start=5>
<li>
<p>Write a program that tells the Scribbler to take and store 6 photos by
  turning in a circle, and showing them in reverse order. Taking the
  pictures and showing them should be done with two separate loops.
</p>
</ol>

<h3>Arrays and Functions</h3>

<p>
Consider the following declaration within a C program:
</p>

<div class="block">
<pre>
  int notes[8] = {523, 587, 659, 698, 783, 880, 987, 1048};
</pre>
</div>

<p>
C uses this declaration in at least two ways:
</p>

<ul>
<li>
The machine allocates space for 8 <tt>int</tt> values within main memory..
<li>
The identifier <tt>notes</tt> is used to reference the location of the
first element in main memory.
</ul>

<p>
To clarify, the variable <tt>notes</tt> identifies the start of the the
array.  Thus, <tt>notes[0]</tt> specifies the first value in the block of
memory, <tt>notes[1]</tt> specifies the second value in the block of
memory, etc.  This interpretation of the array has two consequences when
using functions.
</p>

<ul>
<li>
Use of the variable <tt>notes</tt> specifies an address to a function.  For
arrays, all parameter passage is by reference, as the address is given.
(Practically, this means that the machine only has to pass the reference to
the array, not copy the entire array, when passing arrays to functions.)
<li>
The variable <tt>notes</tt> specifies a starting address, but not an
ending address or a size for the array.  If one wants to use an array in
processing, one must keep track of size separately.
</ul>

<ol start=6>
<li>
  <p>
    Program <a href="max-min.c">max-min.c</a> is a simple C program that
    computes the maximum, minimum, and average of an array of numbers; and
    program <a href="max-array.c">max-array.c</a> computes the maximum of
    an array of numbers using a separate function.  Copy both of these
    programs and be sure you know how they work.
</p>
<ol class="withloweralpha">
  <li>
    Initialization in <tt>find_max</tt> uses the statement <tt>max =
    arr[0];</tt> .  Why do you think this is done, rather than
    setting <tt>max</tt> to a large number (e.g., 1500) and starting the
    loop index at 0 rather than 1?
  <li>
    Using <tt>max-array.c</tt> as an example, add separate
    functions, <tt>find_min</tt> and <tt>find_avg</tt>, that compute the
    minimum and the average of the values in an array.
  <li>
  Write an additional procedure <tt>find_max_min_avg</tt> that computes the
  maximum, minimum, and average values within one function.  Since multiple
  values are to be computed and used by the main program, this function
  must pass values back using reference parameters.  The procedure
  signature should be:
<pre>
  void find_max_min_avg (double arr [], int sizeOfArray,
                         double * max, double * min, double * avg);
</pre>
</ol>
</ol>

<h2>Homework</h2>

<h3>Robot Hoedown</h3>

<ol start=7>
  <li>
    <p>
      In program <tt>max-array.c</tt> from Step 6, modify <tt>find_max</tt>
      so that it adds 3 to each array element after computing the maximum.
      That is, the loop in <tt>find_max</tt> should be changed to
    </p>
<div class="block">
<pre>
  for (j = 1; j < sizeOfArray; j++)
       { if (arr[j] > max)
           max = arr[j];
         arr[j] += 3.0;
       }
</pre>
</div>

    <p>
      Explain what happens when the array is printed in the main program
      and why.
    </p>

  <li>
    <p>
      Write a function, <tt>swings</tt>, with the following signature:
    </p>
    <div class="block">
      <pre>
void swing (double speeds[], double durations[], int sizeOfArrays)
      </pre>
    </div>
    <p>
      This function should have the following properties:</p>
    <ul>
      <li>
        <p>
          <tt>sizeOfArrays</tt> identifies the number of elements stored in
          the <tt>speeds</tt> array and in the <tt>durations</tt> array.
        </p>
      <li>
        <p>
          For each <tt>speeds[i], durations[i]</tt> pair, the
          Scribbler should turn with the associated speed and duration
        </p>
      <li>
        <p>
          If the current index of the command is an even number, it should
          turn right
        </p>
      <li>
        <p>
          If the current index of the command is an odd number, it should
          turn left
        </p>
      <li>
        <p>
          Hint: Consider using the % operator to determine whether the
          index is even or odd.
        </p>
    </ul>
    <p>
      Be sure to test your function for correctness.  It is suggested that
      you use at least four different durations and speeds.
    </p>
  <li>
    <p>
      Copy the following function into your program, and make sure you
      understand what it does:
    </p>
    <div class="block">
      <pre>
void divide_swings (double times[], int args)
{
 int i;
                  
 for (i = 0; i < args; i++)
  times[i] /= 3;
} // divide_swings
      </pre>
    </div>

<ol class="withloweralpha">
  <li>
    <p>
      Predict what will happen if you make the following
      calls in your <tt>main</tt> method, in this order:
    </p>
    <div class="block">
      <pre>
swing (speeds, times, num_moves);
divide_swings (times, num_moves);
sleep (3);
swing (speeds, times, num_moves);
      </pre>
    </div>
  <li>
    <p>
      Now test it out and explain what happened and why this is possible.
    </p>
</ol>
</ol>


<!--#include file="body-footer.inc"-->

</div> <!-- labcontent-->

<div class="footer">
<hr>
<p>
This document is available on the World Wide Web as
</p>

<BLOCKQUOTE>
<PRE>
http://www.cs.grinnell.edu/~walker/courses/161.sp14/modules/arrays-functions/lab-arrays.shtml
</PRE>

</BLOCKQUOTE>

<hr>
<table width="100%">
<tr><td>
   <em>created 19 July 2011 by Dilan Ustek</em><br>
   <em>revised 18 September 2011 by Henry Walker</em><br>
   <em>revised 15 October 2011 by Dilan Ustek</em><br>
   <em>modest editing 16 October 2011 by Henry Walker</em><br>
   <em>minor editing 22 October 2013 by Henry Walker</em><br>
   <em>reorganized with module 26 January 204 by Henry Walker</em><br>
   <em>readings added 19 September 2014 by Henry M. Walker</em> 
   </td>
   <td rowspan="2" align="right">
   <a href="http://validator.w3.org/check/referer"><img border="0"
      src="/~walker/valid-html401-blue.png" alt="Valid HTML 4.01!" height="31"
      width="88"></a>

   <a href="http://jigsaw.w3.org/css-validator/"><img border="0"
       src="/~walker/vcss-blue.png"
       alt="Valid CSS!" height="31"
       width="88"></a>
   </td>
</tr>

<tr><td>
   For more information, please contact
   <a class="footer-a" href="/~walker/">Henry M. Walker</a> at
   <a class="footer-a" href="mailto:walker@cs.grinnell.edu">walker@cs.grinnell.edu</a>.
   </tr>
</table>

<hr>
<!--#include file="copyright-notice.inc"-->

</div> <!-- footer -->
</div> <!-- body -->
</body>
</html>

