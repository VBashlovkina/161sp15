
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>


<head>
    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
    <link rel="stylesheet" type="text/css" href="style.css">
    <title>Laboratory Exercise on Functions and Parameters, Part 1</title>
    <link rev="made" href="mailto:walker@cs.grinnell.edu">
</head>

<body>
<div class="body">
<!--#include file="header.inc"-->

<div class="labcontent">
 
<H1>Laboratory Exercises on Functions and Parameters, Part 1 </H1>

<h2>Goals</h2>  

<p>
This laboratory exercise provides initial practice with procedures and
passing values as parameters within C programs.
</p>

<h2>Preparation before Class</h2>

<ul>
<li>Reading from Text:
    <ul>
    <li>King: Sections 9.1-9.2, 9.4, pages 183-192, 201-202
    <li>K&amp;R: 1.7, 4.1-4.3 
    </ul>
<li>Examples:
    <ul>
    <li><a href="quadratic.c">quadratic.c</a>
    <li><a href="yoyo-program.c">yoyo-program.c</a>
    <li><a href="lab-value-parm.c">lab-value-parm.c </a>
    <li><a href="func-sphere.c">func-sphere.c</a>
    </ul>
</ul>

<h2>Introduction</h2>

<p>
As with Scheme, a function or procedure in C is designed to perform a
task.  Several variations are possible, such as the following:
</p>

<ul>
<li>
The task may be self contained, or it it may depend upon some starting data.
<li>
The task may or may not change its environment (e.g., the task might move
the robot or print something to a terminal window).
<li>
When the task finishes, data may or may not be computed and returned for
use in the main program.
</ul>

<p>
Altogether, a function or procedure performs some work.  Variations arise
in whether or not data are needed to start the work and whether or not
computed results are returned to the main program.
</p>

<h2>Work Started in Class</h2>

<p>
Consider the program <a href="quadratic.c">quadratic.c</a> that solves the
quadratic formula ax<sup>2</sup> + bx + c = 0, while illustrating several
common variations for simple functions.
</p>

<h3><tt>void</tt> and non-<tt>void</tt> Functions</h3>

<ol>
<li>
<p>
Copy <a href="quadratic.c">quadratic.c</a> to your account, compile and run
it, and review the code to determine how it works.
</p>

<ol class="withloweralpha">
<li>
<p>
Procedure <tt>printEqn</tt> has a <tt>void</tt> return type.  Parameters
are passed into <tt>printEqn</tt>, but nothing is passed back.  What happens
if the statement <tt>return a+b+c</tt> is inserted at the end of this
procedure?  (Try compiling the code and explain what happens.)
</p>

<li>
<p>
Procedure <tt>printEqn</tt> is called in both procedures <tt>eqn1</tt>
and <tt>eqn2</tt> with just a simple statement, such as:
</p>

<div class="block">
<pre>
  printEqn   (1.0, -3.0, 2.0);
</pre>
</div>
 
<p>
What happens if you  try to assign the result of <tt>printEqn</tt> to a
variable, such as 
</p>

<div class="block">
<pre>
  double value = printEqn   (1.0, -3.0, 2.0);
</pre>
</div>

<li>
<p>
Procedure <tt>disc</tt> returns a <tt>double</tt>.  
Sometimes beginning coders separate the call to a function with the
assignment of the return value.  Here are three examples:
</p>

<p>
Attempt 1:
</p>
<div class="block">
<pre>
  double discriminate;
  disc (a, b, c);
</pre>
</div>

<p>
Attempt 2:
</p>
<div class="block">
<pre>
  disc (a, b, c);
  double discriminate;
</pre>
</div>

<p>
Try each of these attempts within procedure <tt>printRoots</tt>.
</p>

<ul>
<li>
Does the code compile?
<li>
Does the code give the desired result?
</ul>


<li>
<p>
Change the body of <tt>disc</tt> to the following
</p>

<div class="block">
<pre>
  printf ("r = %lf, s = %lf, t = %lf\n", r, s, t);
  return sqrt (s*s - 4*r*t);
</pre>
</div>

<p>
Compile and run the program
</p>

<ul>
<li>
Describe what is printed by the overall program.  What might you conclude
about what happens when printing is done in the middle of a computation?
For example, how does this impact the overall program's output?
<li>
Can you identify any guidelines regarding the advisability of including
print statements in functions designed for computation
(e.g., <tt>disc</tt>)?
<li>
In addition to the <tt>printf</tt> statement in function <tt>disc</tt>,
insert the code from Step 1c (into <tt>printRoots</tt>).  What happens when
procedure with a return value (e.g., <tt>disc</tt>) is called on a 
line by itself?
</ul>

</ol>
</ol>

<h3>Writing Numeric Functions</h3>

<ol start=2>
<li>
<p>
Within a C program, define and use the following functions:
</p>

<ul>
<li>
<p>
Function <tt>circum</tt> that takes a circle's radius as parameter and
returns the circumferences of the circle.
</p>

<li>
<p>
Function <tt>area</tt> that takes a radius as parameter and returns
the area of the circle with that radius.
</p>
</ul>

</ol>

<a name="robots"></a>
<h3>Functions, Values as Parameters, and Robot Motion</h3>

<p>
Program <a href="yoyo-program.c">yoyo-program.c</a> uses a
function <tt>yoyo</tt> to control a Scribbler 2 robot.
</p>
 
<ol start=3>
<li>
<p>
Copy <a href="yoyo-program.c">yoyo-program.c</a> to your account, compile
and run it, and review to code to determine how it works. 
</p>

<ol class="withloweralpha">
<li>
<p>
Explain what the program does.  
</p>
<ul>
<li>
What movements does the robot make?  Why?
<li>
What output is printed?  Why?
</ul>

<li>
<p>
In the main program, duplicate the line
</p>

<div class="block">
<pre>
  result = yoyo (repetitions);
</pre> 
</div>

<p>
(I.e., this line should appear twice in succession.)
</p>

<p>
Does making this call twice change how many times the robot yoyos in each
call?   Why or why not?
</p>

<li>
<p>
In the main program, replace the line
</p>

<div class="block">
<pre>
  result = yoyo (repetitions);
</pre> 
</div>

<p>
by
</p>

<div class="block">
<pre>
  repetitions = yoyo (repetitions);
  repetitions = yoyo (repetitions);
</pre> 
</div>

<p>
Does making this call twice change how many times the robot yoyos in each
call?   Why or why not?
</p>



<li>
<p>
In C (as in Scheme), variables declared within a function are separate from
variables declared elsewhere (e.g., in <tt>main</tt>).  In the original
program, change the name of the <tt>repetitions</tt> variable
to <tt>reps</tt> throughout the <tt>main procedure</tt>.  Compile and run
the program.
</p>

<p>
Does changing <tt>yoyo</tt>'s  variable <tt>reps</tt> have any impact on
the variable <tt>reps</tt> in the <tt>main</tt> procedure?
</p>

<li>
<p>
Again, return to the original program.  This time nest the call
to <tt>yoyo</tt> in the <tt>main</tt> procedure.  That is, the call
to <tt>yoyo</tt> will become:
</p>

<div class="block">
<pre>
yoyo (yoyo (repetitions));
</pre> 
</div>
    
<ul>
  <li>
    <p>
      Make a prediction of what will happen with the above nested call.
    </p>
  <li>
    <p>
      Test out your nested call and explain what happened.
    </p>
</ul>
</ol>
</ol>

<h3>Schematic of Memory</h3>

<p>
When analyzing a C program, it often is helpful to create a schematic of a
computer's memory.  Overall, each procedure requires memory for its
parameters and any local variables.  This amount of space is allocated
whenever the procedure is called, and this space is deallocated when the
procedure finishes.
</p>

<hr>
<img align=right src="yoyo-main.png" alt="main">

<p>
To clarify, consider the
original <a href="yoyo-program.c">yoyo-program.c</a> program.  When the
program begins, space is allocated for the variables, <tt>repetitions</tt>
and <tt>result</tt> in the <tt>main</tt> procedure.  The
assignment <tt>repetitions&nbsp;=&nbsp;2;</tt> stores the number 2 in the
location for the <tt>repetitions</tt> variable.
</p>

<br clear=right>
<hr>
<img align=right src="yoyo-yoyo.png" alt="yoyo">

<p>
When the <tt>yoyo</tt> procedure is called, new space is allocated for the
parameter <tt>count</tt> and for local variables <tt>i</tt>
and <tt>reps</tt>.  During the call to <tt>yoyo</tt>, the value of the
variable <tt>repetitions</tt> is copied into the space for the
parameter <tt>count</tt>.  That is, the value 2 is now stored in two places
(e.g., <tt>repetitions</tt> and <tt>count</tt>).
</p>

<p>
When <tt>yoyo</tt> executes, <tt>reps</tt> is given the value 6.  The
variable <tt>i</tt> takes on successive values 0, 1, 2, 3, 4, 5, and 6.
</p>

<p>
As <tt>yoyo</tt> finishes, it returns the value of <tt>reps</tt> (6).

<br clear=right>
<hr>
<img align=right src="yoyo-main-2.png" alt="main">
<p>
When <tt>yoyo</tt> is finished, its space is deallocated, and the returned
value is stored in variable <tt>result</tt>.
</p>

<br clear=right>
<hr>

<ol start=4>
<li>
<p>
Draw a sequence of schematic memory diagrams for
program <a href="quadratic.c">quadratic.c</a> from Step 1.
</p>
</ol>

<h2>Homework</h2>

<ol start=5>
<li>
<p>
Consider the program <a href="lab-value-parm.c">lab-value-parm.c</a>.
</p>

<ol class="withloweralpha">
<li>
<p>
Copy the program to your account, compile, and run it.
</p>

<li>
<p>
Draw schematic memory diagrams for the state of memory when
each <tt>print</tt> statement is executed.  Be sure you can explain the
running of the program at each step, based upon this series of schematic
memory diagrams.
</p>
</ol>
</ol>

<!--
<div class="block">
<pre>
</pre> 
</div>
-->

<!--#include file="body-footer.inc"-->

</div> <!-- labcontent-->

<div class="footer">

<p>
<hr>
<p>

This document is available on the World Wide Web as

<div class="address">
<PRE>
     http://www.cs.grinnell.edu/~walker/courses/161.fa12/lab-functions-1.shtml
</PRE>
</div>

<hr>
<table width="100%">
<tr><td>
    Steps 1-4:
    <ul>
      <li><em>created 20 July 2011 by Erik Opavsky</em> within lab-functions-2.shtml
      <li><em>revised 29 July 2011 by Erik Opavsky and Dilan Ustek</em>
      <li><em>revised 12 October 2011 by Erik Opavsky</em>
      <li><em>revised 31 October 2011 by Henry M. Walker</em>
    </ul>
    Step 5:
    <ul>
      <li><em>created 20 July 2011 by Erik Opavsky and Dilan Ustek</em>
      <li><em>revised 29 July 2011 by Erik Opavsky and Dilan Ustek</em>
      <li><em>revised 12 October 2011 by Erik Opavsky</em>
      <li><em>revised 31 October 2011 by Erik Opavsky</em>
      <li><em>revised 21 July 2012 by Henry M. Walker</em>
      <li><em>step moved to subsequent lab 2 January 2014 by Henry M. Walker</em><br>
   <em>wording refined for passing values as parameters 21 September 2014 by Henry M. Walker</em>
    </ul>
    
    Steps 6-9:
    <ul>
     <li><em>created 7 September 1998 by Henry M. Walker</em>
     <li><em>revised 14 October 2011 by Henry M. Walker</em>
     <li><em>steps moved to subsequent lab 2 January 2014 by Henry M. Walker</em>
    </ul>
   <em>composite editing 22 July 2012 by Henry M. Walker</em><br>
   <em>material in Module 010 reorganized 29 January 2014 by Henry
   M. Walker</em> <br>
   <em>readings added 19 September 2014 by Henry M. Walker</em> 
   </td>
   <td rowspan="2" align="right">
   <a href="http://validator.w3.org/check/referer"><img border="0"
      src="/~walker/valid-html401-blue.png" alt="Valid HTML 4.01!" height="31"
      width="88"></a>
   <a href="http://jigsaw.w3.org/css-validator/"><img border="0"
       src="/~walker/vcss-blue.png"
       alt="Valid CSS!" height="31"
       width="88"></a>
   </td>
</tr>
<tr><td>
   For more information, please contact
   <a  class="footer-a"href="/~walker/">Henry M. Walker</a> at
   <a class="footer-a" href="mailto:walker@cs.grinnell.edu">walker@cs.grinnell.edu</a>.
   </tr>
</table>

<hr>
<!--#include file="copyright-notice.inc"-->

</div> <!-- footer -->
</div>
</body>
</html>
