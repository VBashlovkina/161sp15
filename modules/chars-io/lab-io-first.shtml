<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">    
	<link rel="stylesheet" type="text/css" href="style.css">
 	<title>Laboratory Exercise on Input with scanf</title>
        <link rev="made" href="mailto:walker@cs.grinnell.edu">
</head>

<body>
<div class="body">
<!--#include file="header.inc"-->

<div class="labcontent">

<H1>Laboratory Exercise on Input with <tt>scanf</tt></H1>

<h2>Perspective</h2>

<p>
As explained in the <a href="reading-i-o.shtml">Notes on Reading Data</a>
that accompany this module, when a user types data as input to a program,
the user types a sequence of characters.  Within a program, the code may
proceed in one of two ways:
</p>

<ul>
<li>
read each character separately (subsequent processing may group one or more
characters together), or
<li>
use capabilities of C to read a group of characters as another type of data
(e.g., read several characters as a number).
</ul>

<p>
This lab focuses on the second approach, using the library
function <tt>scanf</tt> to handle the reading of several types of data.
<a href="lab-io-second.shtml">The next lab</a> explores the first approach of
character-by-character reading.
</p>

<h2>Goals</h2>  

<p>
The goal of this lab is to explore how a program can read different types
of data from the keyboard.
</p>


<h2>Preparation before Class</h2>

<ul>
<li>Reading from Text
    <ul>
    <li>King: Section 3.2, pages 42-46, OR
    <li>Kernighan &amp; Ritchie, 7.4, B.1.2, B.1.4 (reference) 
    </ul>
<li><a href="reading-i-o.shtml">Notes on Reading Data</a>
<li>Examples:
    <ul>
    <li><a href="scanf-example.c">scanf-example.c</a>
    <li><a href="scanf-char.c">scanf-char.c</a>
    <li><a href="i-o-example-1a.c">i-o-example-1a.c</a>
    <li><a href="i-o-example-1b.c">i-o-example-1b.c</a>
    <li><a href="i-o-example-2.c">i-o-example-2.c</a>
    <li><a href="i-o-example-3.c">i-o-example-3.c</a>
    <li><a href="i-o-example-4.c">i-o-example-4.c</a>
    <li><a href="i-o-example.c">i-o-example.c</a>
    <li><a href="iotest.c">iotest.c</a>
    </ul>
</ul>

<h2>Reminder</h2>

<p>
Some exercises in this lab utilize strings operations.  In such cases, be
  sure to include the following lines at the beginning of your code:
</p>

<div class="block">
<pre>
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
</pre>
</div>

<h2>Work Started in Class</h2>

<h3>Introduction to scanf</h3>

<p>
The <tt>scanf</tt> function (in the <tt>stdio.h</tt> library) directs the
machine to read values for one or more variables from the keyboard.  For
each desired value, <tt>scanf</tt> requires
</p>

<ul>
<li>
information in a format string indicates how the characters typed by the
user will be interpreted (e.g., as an integer, as a double, etc.), and
<li>
the address of a variable where the value read is to be stored.

</ul>

<p>
<i>Notes:</i>
<ul>
<li>
<p>
As with <tt>printf</tt>, format information is collected together as an
initial string parameter.
</p>
<li>
<p>
Using our experience from previous work with functions and parameters,
parameters to <tt>scanf</tt> involve reference parameters (e.g., with an
ampersand &amp;), so the function <tt>scanf</tt> can place data at the
location of an <tt>int</tt> or <tt>double</tt>.
</p>
</ul>


<p>
  As with <tt>printf</tt>, <tt>scanf</tt> recognizes several formats:
</p>
<ul>
  <li>
    <tt>%d</tt> for reading an integer
  <li>
    <tt>%f</tt> for reading a float
  <li>
    <tt>%lf</tt> for reading a long float or double
  <li>
    <tt>%c</tt> for reading a character
  <li>
    <tt>%s</tt> for reading a string
</ul>

<ol>
  <li>
    <p>
      Copy program <a href="scanf-example.c"><tt>scanf-example.c</tt></a>
    to your account, compile it, and run it.
    </p>

    <ol class="withloweralpha">
      <li>
        <p>
          Review <a href="scanf-example.c"><tt>scanf-example.c</tt></a> and
          write a short description of how it works.  In your description,
          explain why an ampersand (&amp;) is required for reading
          the <tt>number</tt> variable but is not needed for
          the <tt>input</tt> variable.
        </p>
      <li>
        <p>
          Write a short program that asks for your name, stores your name
          using <tt>scanf</tt>, then prints the word "hello" and your name.
        </p>
      <li>
        <p>
          Run the <tt>scanf-example.c</tt> program again, except this time
          enter two numbers (one for the initial number and one for the
          word). Does the program still work? Why?
        </p>
        <p>
          Hint: what type does <tt>scanf</tt> assign input to in your
          code?
        </p>
      <li>
        <p>
          Run the <tt>scanf-example.c</tt> program, using a phrase as input (e.g. 
          "down the hill"). What is the result?
          </p>
        <p>
          Recall that <tt>scanf</tt> assigns input to a variable; when
          assigning input to a string, a blank space is not considered to be part
          of a string by <tt>scanf</tt>. 
        </p>
      <li>
        <p>
          Run the <tt>scanf-example.c</tt> program one more time &mdash;
          this time entering two names (one for the initial number and one for
          the word). Does the program still work? Why?
        </p>

        <p>
          Hint: again, consider what types <tt>scanf</tt> is assigning.
        </p>
    
      <li>
        <p>
          Run the program yet again.
        </p>
        <ul>
          <li>
            <p>  if you are using a 32-bit computer, enter the following data:
            </p>
            <ul>
              <li>0123456789012345678901234567890123456
              <li>0123456789012345678901234567890123456
            </ul>
          <li>
            <p>  if you are using a 64-bit computer, enter the following data:
            </p>
            <ul>
              <li>01234567890123456789012345678901234567890123456
              <li>01234567890123456789012345678901234567890123456
            </ul>
        </ul>
        <p>
          What output is generated?  Can you guess why?  Note that the
          string has 37 characters.
        </p>
</ol>
</ol>

<h4>Reading Multiple Values</h4>

<ol start=2>
<li>
<p>
Each of the following programs reads two numbers using <tt>scanf</tt>,
using different format variations.
</p>

<ul>
<li>
<a href="i-o-example-1a.c">i-o-example-1a.c</a>
<li>
<a href="i-o-example-1b.c">i-o-example-1b.c</a>
<li>
<a href="i-o-example-2.c">i-o-example-2.c</a>
<li>
<a href="i-o-example-3.c">i-o-example-3.c</a>
<li>
<a href="i-o-example-4.c">i-o-example-4.c</a>

</ul>

<p>
Click on each program, save it, compile it, and run it with the suggested
input variations.  For each test case, explain what values are read and why
the <tt>scanf</tt> assigns the given values to the variables.
</p>

</ol>

<h4>Reading Values within Applications</h4>

<ol start=3>
<li>
<p>
Write a program to read a person's height in feet and inches and print the
person's height in centimeters (1 inch = approximately 2.54 centimeters).
The output of the program should present an equation of the form:
</p>

<pre>
   5 feet 6.2 inches = 168.15 centimeters
</pre>

<p>
That is, the number of feet should be given as an integer, the number of
inches to 1 decimal place, and the number of centimeters to 2 decimal
places.  One space should separate each number from text or the equal sign.
</p>

<li>
<p>
Write a program that reads the radius of a circle and prints the 
circle's area and circumference in the format illustrated below:
</p>
<pre>
     radius    area     circumference
       2.5    19.63         15.71
</pre>

<p>
That is, the radius, area, and circumference should appear under
headings, the radius should be printed to 1 decimal place, and
the area and circumference to 2 decimal places.
</p>

<li>
<p>
Write a program that reads the coefficients <i>a, b, c</i> of a quadratic
equation:  <i>a x<sup>2</sup> + b x + c = 0</i>, and prints the roots of
the equation to two decimal places.
</p>

<p>
<i>Notes:</i>
</p>

<ul>
<li>
Use the quadratic equation (ask the instructor if you have forgotten this).
<li>
For simplicity, you may assume that <i>b<sup>2</sup> &ndash; 4 a c &ge; 0</i>.
<li>
C's square root function is called <tt>sqrt</tt> and is defined in C's
<tt>math.h</tt> library.
<li>
To link a C program with the <tt>math.h</tt> library, your compile command
must include the flag <tt>-lm</tt>.  (For example, 
"<tt>gcc&nbsp;-lm&nbsp;-o&nbsp;quadratic&nbsp;quadratic.c</tt>".)

</ul>

</ol>

<h3>Reading and Comparing Strings</h3>

<ol start=6>

  <li>
    <p>
      Some programs perform different actions based on the entered
      information. For instance, programs that change a password often
      require the user to enter the new password twice to guard against
      typos. If the input is not the same for both entries, the password is
      not changed. Write a short program that prompts the user to enter a
      word, then prompts the user to retype the word. If the input matches,
      the program should print out the line "<tt>The entered word was
      (word)</tt>" (parentheses not included). If the input does not match,
      the program should print out a line which includes both entries.
    </p>
    
    <p>
      Hint: the <tt>&lt;string.h&gt;</tt>
    function <tt>strcmp&nbsp;(char&nbsp;*&nbsp;str1,&nbsp;char&nbsp*&nbsp;str2);</tt>
    compares two strings, and  
    </p>
    <ul>
      <li>
        returns a negative number if <tt>str1</tt> comes
        before <tt>str2</tt> in dictionary order (upper/lower case
        matters)
        <br>
        Examples:  <tt>strcmp("cat", "dog")</tt> &lt; 0<br>
        <tt>strcmp("that", "this")</tt> &lt; 0
      <li>
        returns 0 if the strings match.
        <br>
        Examples:  <tt>strcmp("cat", "cat")</tt> == 0<br>
        but <tt>strcmp("cat", "cAt")</tt> &ne; 0 (lower case <tt>a</tt>
        and upper case <tt>A</tt> are different) 
      <li>
        returns a positive number if <tt>str1</tt> comes
        after <tt>str2</tt> in dictionary order (upper/lower case
        matters)
        <br>
        Examples:  <tt>strcmp("dog", "cat")</tt> &gt; 0<br>
        <tt>strcmp("this", "that")</tt> &gt; 0

    </ul>

    <ol class="withloweralpha">
      <li>
        <p>
          Test whether the program works as intended by entering words
          which match, and words which do not match.
        </p>
      <li>
        <p>
          Enter words which are identical, except for capitalization (for
          example, "apple" versus "apPle"). What happens? Why do you get this
          result? 
        </p>
      <li>
        <p>
          Modify your program so that it makes all the letters in a
          word the same case, and rerun your tests.</p>
    </ol>
 
  </li>
</ol>

<h2>Homework</h2>

<h3>Robot I/O</h3>
<ol start = 7>
  <li><p>Write a short program that connects to the robot, asks for beep
      length and pitch, beeps for the assigned length and pitch, and
      disconnects from the robot.</p>
  </li>
  <li><p>Modify the program you wrote in the previous exercise so the program
      continues, prompting for input and beeping, until the time entered is
      0.</p>
  </li>
  <li><p>Now modify the program you have written to count the number of beeps,
      and when the time entered is 0, print the number of beeps before
      exiting the program.</p>
  </li>
</ol>

<!--#include file="body-footer.inc" -->
</div>
<div class="footer">

<hr><p>

This document is available on the World Wide Web as

<PRE>
     http://www.cs.grinnell.edu/~walker/courses/161.fa14/modules/module-chars-io/io-lab-second.shtml
</PRE>

<hr>
<table width="100%">
<tr><td>
   <em>created 29 July 2011 by April O'Neill</em><br>
   <em>last revised 9 August 2011 by April O'Neill</em><br>
   <em>minor editing 9 October 2011 by Henry M. Walker</em><br>
   <em>modest expansion in initial section 19 October 2012 by Henry M. Walker</em><br>
   <em>minor editing 9 October 2013 by Henry M. Walker</em><br>
   <em>reworked 8-9 February 2014 by Henry M. Walker</em><br>
   <em>readings added 19 September 2014 by Henry M. Walker</em> 
   </td>
   <td rowspan="2" align="right">
   <a href="http://validator.w3.org/check/referer"><img border="0"
      src="/~walker/valid-html401-blue.png" alt="Valid HTML 4.01!" height="31"
      width="88"></a>
   <a href="http://jigsaw.w3.org/css-validator/"><img border="0"
       src="/~walker/vcss-blue.png"
       alt="Valid CSS!" height="31"
       width="88"></a>
   </td>
</tr>
<tr><td>
   For more information, please contact
   <a class="footer-a" href="/~walker/">Henry M. Walker</a> at
   <a class="footer-a" href="mailto:walker@cs.grinnell.edu">walker@cs.grinnell.edu</a>.
   </tr>

</table>

<hr>
<!--#include file="copyright-notice.inc"-->

</div>
</div>
</body>
</html>


