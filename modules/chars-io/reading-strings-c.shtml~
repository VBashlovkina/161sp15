<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
    <link rel="stylesheet" type="text/css" href="style.css">
    <title>CSC 161 Reading on Characters and Strings in C</title> 
    <link rev="made" href="mailto:walker@cs.grinnell.edu">
</head>
<body>
<div class="body">
<!--#include file="header.inc"-->

<div class="labcontent">

<h1>Characters and Strings in C</h1>


<h3>Reading Character Data</h3>

<p>
C provides two equivalent approaches for reading individual characters.
</p>

<ul>
<li>The C function <tt>getchar()</tt> reads and returns a single character.
<br>Example: 

<div class="block">
<pre> <tt>
   char ch;
   ch = getchar();
</tt></pre></div>

<li>The <tt>c</tt> format for <tt>scanf</tt> reads an individual character.
<br>Example: 
<div class="block">
<pre> <tt>
   char ch;
   scanf ("%c", &amp;ch);
</tt></pre></div>

</ul>

<p>
  When reading character data with either <tt>getchar</tt> or <tt>%c</tt>
  with <tt>scanf</tt>, the first character is read and recorded; that is, the
  process of reading a character does <i>NOT</i> skip over white space.
</p>

<p>Some of you may have noticed that Kernighan & Ritchie's book, <i>The C
  Programming Language</i>, declares int variables and sets them to char
  values, while the above examples declare char variables set
  to <code>char</code> values. The local system automatically converts
  the <code> int</code> values that <code>getchar</code>
  and <code>getc</code> into <code>char</code> values when set to
  a <code>char</code> variable, so on the local system, these declarations
  are valid. Just be aware that some systems may not support this automatic
  conversion.
</p>


<h3>Reading Strings</h3>

<p>
C also provides at least three approaches for reading strings of
characters.  Each function has its own special characteristics.
</p>

<ul>
<li>The <tt>s</tt> format for <tt>scanf</tt> reads a sequence of
non-white-space characters.  As with all strings, a null character ('\0')
is added at the end of the string.
<br>Example: 
<div class="block">
<pre> <tt>
   char str[10];      /* allow room for 10 characters, including the null */
   scanf ("%s", str); /* since str is an array, the variable represents a
                         base address and no ampersand &amp; is added */
</tt></pre></div>

<li>The C function <tt>gets()</tt> reads an entire  line or until end of
file.  As with <tt>scanf</tt>, a null character is added at the end of the
string. 
<br>Example: 
<div class="block">
<pre> <tt>
   char str[10];
   gets (str);     
</tt></pre></div>

<li>The C function <tt>fgets()</tt> reads up to <tt>n</tt> characters from
a line or until end of
file.  As with <tt>scanf</tt>, a null character is added at the end of the
string. 
<br>Example: 
<div class="block">
<pre> <tt>
   char str[10];             /* stdin is the C variable for "standard input" */
   fgets (str, 10, stdin);   /* up to 9 characters are read from the
                                terminal, leaving room for a null character
                                at the end */
                           
</tt></pre></div>

</ul>

<p>
As with reading character data , stored input starts immediately with the first
character read; the process of reading a string does NOT skip over white
space.
</p>

<p>
<i>Warning:</i>  Both <tt>scanf</tt> and <tt>gets</tt> read characters
(until white space or the end of a line), without regard for the size of
the string array.  If more characters are read than fit in the array, the
characters may overflow to fill data stored in other variables.  Thus, only
<tt>fgets</tt> can be considered "safe".
</p>

<!--#include file="body-footer.inc" -->
</div>

<div class="footer">
<p>
<hr>

<p>
This document is available on the World Wide Web as
</p>

<blockquote>
<pre>
http://www.cs.grinnell.edu/~walker/courses/161.sp12/modules/chars-io/reading-strings-c.shtml
</pre>
</blockquote>

<hr>

<table width="100%">
<tr><td>
   <em>created 10 April 2008 by Henry Walker</em><br>
   <em>revised 6 March 2010 by Henry Walker</em><br>
   <em>revised 5 August 2011 by April O'Neill</em><br>
   <em>revised 28 October 2011 by Dilan Ustek</em><br>
   <em>minor editing 29 October 2011 by Dilan Ustek</em>
   </td>
   <td rowspan="2" align="right">
   <a href="http://validator.w3.org/check/referer"><img border="0" 
      src="/~walker/valid-html401-blue.png" alt="Valid HTML 4.01!" height="31"
      width="88"></a>
   <a href="http://jigsaw.w3.org/css-validator/"><img border="0"
       src="/~walker/vcss-blue.png" 
       alt="Valid CSS!" height="31"
       width="88"></a>
   </td>
</tr>

<tr><td>
   For more information, please contact
   <a class="footer-a" href="http://www.cs.grinnell.edu/%7Ewalker/">Henry M. Walker</a> at
   <a class="footer-a" href="mailto:walker@cs.grinnell.edu">walker@cs.grinnell.edu</a>.
   </td></tr>
</table>
</div>
</div>
</BODY>
</HTML>
