<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<html>

<head>
	<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">    
	<link rel="stylesheet" type="text/css" href="style.css">
 	<title>Insertion Sort</title>
        <link rev="made" href="mailto:walker@cs.grinnell.edu">
</head>

<body>
<div class="body">
<!--#include file="header.inc"-->

<div class="labcontent">

<H1>Insertion Sort</H1>

<h2>Abstract</h2>
<p>Many applications require that data be ordered and
  maintained. Insertion sort is one sorting algorithm that puts data in
  order. Some examples of humans manually using insertion sort include
  sorting a deck of cards, or sorting books on a bookshelf.</p>

<h2>The Insertion Sort</h2>

<p>
One common sorting approach is based on code that assumes that the first
part of an array is ordered and then adds successive items to this array
segment until the entire array is sorted.  To understand this approach, 
we first consider how to add one item to an ordered array segment.  
We then apply this work to each array element in turn to yield an ordered
array.
</p>

<h3>Maintaining An Ordered Array Segment</h3> 


<p>
Suppose items <tt>A[0], ..., A[k-1]</tt> are ordered in array <tt>A</tt>:
</p>

<IMG SRC="sorting-2.gif" 
ALT="A:  3 7 9 10 18 27 33 37"> 

<p>
The following code inserts an <tt>item</tt> into the array, so that items
<tt>A[0], ..., A[k]</tt> become ordered:

</p>

<div class="block">
<pre><code>
int i = k-1;
while ((i >= 0) && a[i] > item){
   a[i+1] = a[i];
   i--;
}
a[i+1] = item;
</code></pre></div>

<p>
Using this basic insertion step, an array <tt>A</tt> can be sorted 
iteratively according to the following outline:
</p>

<ul>
<li>

Consider <tt>A[0]</tt> as a sorted initial segment of array <tt>A</tt>.
(That is, in the example, consider <i>k = 0</i>.)
<li>
Insert <tt>A[1]</tt> into segment <tt>A[0]</tt> to get ordered segment
<tt>A[0], A[1]</tt>.

<li>
Insert <tt>A[2]</tt> into segment <tt>A[0], A[1]</tt> to get ordered segment
<tt>A[0], A[1], A[2]</tt>.
<li>
Insert <tt>A[3]</tt> into segment <tt>A[0], ..., A[2]</tt> to get ordered 
segment <tt>A[0], ..., A[3]</tt>.

<li>
Insert <tt>A[4]</tt> into segment <tt>A[0], ..., A[3]</tt> to get ordered 
segment <tt>A[0], ..., A[4]</tt>.
<li>
Et cetera.
</ul>

<p>
This outline gives rise the the following code, called an <i>insertion
sort</i>.

</p>

<pre><code>
void insertionSort (int [] a, int length) {
// method to sort using the insertion sort
// parameters:  a, the array to be sorted
//              length, the size of the a array
   for (int k = 1; k < length; k++) {
      int item = a[k];
      int i = k-1;
      while ((i >= 0) && a[i] > item){
         a[i+1] = a[i];
         i--;
      }
      a[i+1] = item;
   }
}
</code></pre>
<p>It is important to notice that the item being compared is <i>not</i>
  switching place with each item it compares to. The items that are
  compared against are shifted; the element being compared is
  inserted.
</p>



<h2>Insertion Sort Characteristics</h2>
<p>This sorting algorithm is relatively simple, efficient for small
  data sets and data sets that are already partially sorted, stable in the
  sense that it does not switch identical elements, and only requires a
  constant amount of additional memory space (that is, the amount of memory
  for the set of elements, plus memory for one element of the set). The
  amount of time this algorithm takes to sort a set is dependent upon the
  set itself. For a set with n elements, if the set is sorted (or nearly
  so), the algorithm takes only a single time unit for each element, so it
  takes n time units. On the other hand, if the set is in reverse order
  (that is, largest to smallest), the time approaches n-squared. You will
  see the previous two statements proven in a later course.</p>


<h2>Example</h2>

<b>Image Example</b><br>
<img src="Insertion-sort-example.gif" alt="Image showing an array being sorted">

<p>Image borrowed
  from <a href="http://en.wikipedia.org/wiki/File:Insertion-sort-example-300px.gif">Wikipedia.org</a>
  under a Creative Commons license.</p>

<!--#include file="body-footer.inc" -->

</div>
<div class="footer">
<p>
<hr><p>

This document is available on the World Wide Web as

<PRE>
      http://www.cs.grinnell.edu/~walker/courses/161.sp12/modules/module-struct-2d-arrays/insertion-sort-reading.shtml
</PRE>

<hr>
<table width="100%">
<tr><td>
   <em>created 1 August 2011 by April O'Neill</em><br>
   <em>revised 5 August 2011 by April O'Neill</em><br>
   <em>minor editing 7 November 2011 by Henry M. Walker</em><br>
   <em>altered sort header 5 December 2012 by Henry M. Walker</em>
   </td>
   <td rowspan="2" align="right">
   <a href="http://validator.w3.org/check/referer"><img border="0"
      src="/~walker/valid-html401-blue.png" alt="Valid HTML 4.01!" height="31"
      width="88"></a>
   <a href="http://jigsaw.w3.org/css-validator/"><img border="0"
       src="/~walker/vcss-blue.png"
       alt="Valid CSS!" height="31"
       width="88"></a>
   </td>
</tr>
<tr><td>
   For more information, please contact
   <a class="footer-a" href="/~walker/">Henry M. Walker</a> at
   <a class="footer-a" href="mailto:walker@cs.grinnell.edu">walker@cs.grinnell.edu</a>.
   </tr>

</table>

<hr>
<!--#include file="copyright-notice.inc"-->

</div>
</div>
</body>
</html>


