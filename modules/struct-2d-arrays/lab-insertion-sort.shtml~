<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>

<head>
  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">    
  <link rel="stylesheet" type="text/css" href="style.css">
  <title>Laboratory Exercise on Insertion Sort</title>
  <link rev="made" href="mailto:walker@cs.grinnell.edu">
</head>

<body>
<div class="body">
<!--#include file="header.inc"-->

<div class="labcontent">

<H1>Laboratory Exercise on Insertion Sort</H1>

<h2>Goals</h2>  

<p>
The goal of this lab is to gain familiarity with the method of data sorting
known as insertion sort, culminating in writing a simple insertion sort
program.
</p>

<h2>Work Started in Class</h2>

<h3>Reading Review</h3>

<ol>
<li>
<p>
In <a href="reading-insertion-sort.shtml">today's reading</a>, you
learned about insertion sort. Write one to three sentences to answer each of
the following questions.
</p> 
<ol class="withloweralpha">
  <li>The reading claims that insertion sort is better for nearly-sorted
  lists than reverse-ordered lists. Why?</li>
  <li>How much extra memory is required for each sort?</li>
  <li>If the list is composed of four identical elements, how many
    elements change position when insertion sort is used? Why?</li>
  <li>Why might some people use insertion sort in real life?</li>
</ol>
</ol>

<h3>Manual Use of Insertion Sort</h3>

<ol start=2>
<li>
<p>
For each of the following lists, draw the result of each insertion of the
insertion sorting routine. You do not need to show the result of each
comparison, just the final insertion of the element.
</p>
<ol class="withloweralpha">
  <li>[ 5 | 4 | 1 ] </li>
  <li>[ 3 | 1 | 3 ] </li>
  <li>[ 2 | 5 | 4 | 0 ]</li>
  <li>[ 6 | 8 | 3 | 5 | 1 | 9 | 2 | 2 ]</li>
</ol>
</ol>

<h3>Identifying Insertion Sort</h3>

<ol start=3>
<li>
<p>
In this exercise, you will examine two sorting programs to determine if
either is insertion sort. Download and save the
  programs <a href="insertion-sort-proc1.c"><tt>insertion-sort-proc1.c</tt></a>
  and <a href="insertion-sort-proc2.c"><tt>insertion-sort-proc2.c</tt></a>
  in your directory for this lab.</p>
<ol class="withloweralpha">
  <li>Compile and run both programs. Do both sort the given list
    appropriately?<p></p></li>
  <li>Look at <tt>insertion-sort-proc1.c</tt>. Is this an example of
    insertion sort?
    <p>Hint: What exactly are the nested <tt>for</tt> loops doing?</p></li>
  <li>Look at <tt>insertion-sort-proc2.c</tt>. Is this an example of
    insertion sort?
    <p>Hint: What exactly is the <tt>while</tt> loop doing?</p></li>
</ol>
</ol>

<h3>Error Checking in Insertion Sort</h3>

<ol start=4>
<li>
<p>
Download and save the
  program <a href="insertion-sort-proc3.c"><tt>insertion-sort-proc3.c</tt></a>
  in your directory for this lab.</p>
<ol class="withloweralpha">
  <li>Compile and run the program with the values 1, 7, 3, 5, 4, 2, 9, 8,
  2, 6. Does the program produce the correct output?<p></p></li>
  <li>Now run the program with a few of your own values. Does the program
  still produce correct output? 
    <p>Hint: try making some elements in the list negative.</p></li>
  <li>Read through the program to locate the source of the error and fix
    it.
    <p>Hint: the error is caused by one line in the program.</p></li> 
  <li>Write a paragraph explaining why this error caused the output you
  saw.</li> 
</ol>
</ol>

<h3>Insertion Sort with Pictures</h3>

<ol start=5>
<li>
<p>
Download the
file <a href="insertion-sort-picture.c"><tt>insertion-sort-picture.c</tt></a>
  and save it in your current directory. Read over the program and be sure
  you understand it. Using what you have learned in the previous exercises,
  write the insertion sort function that sorts the pixels in the picture,
  compile, and view the result. The program may take a couple minutes to
  run fully.
</p>

<p>
You will use this program in a future module, so you may wish to save
this program. 
</p>
</ol>

<h2>Homework</h2>

<h3>Insertion Sort with Column-Major Order</h3>

<p>
In Module 010, you learned about arrays. In this module, you learned about
multidimensional arrays. Below is an example of initializing a
  two-dimensional array:</p> 
<div class="block">
<tt>int array[2][5] = { {4, 3, 8, 2, 5}, {2, 1} };</tt>
</div>
<p>In this example, the array of integers <tt>array</tt> has two rows,
  with the first row initialized with the values 4, 3, 8, 2, and 5, and the
  second row with the first two values initialized (2 and 1), and the
  remaining values are implicitly initialized to 0. So, a human-readable
  version of this two-dimensional array looks like the following:
</p>
<p>
<img src="array.jpg" alt="Human-readable array of two rows and five columns">
</p>
<p>However, when you initialize the array in C, the program reserves a
  contiguous amount of memory for the array and assigns the values that
  have been specified. So, the above array is represented in memory as the
  following: </p>
<p>
<img src="arrayRow.jpg" alt="Memory representation of 2D array in C">
</p>
<p>As you notice, the C program puts the array in memory a row at a time,
  beginning from the first row. This is called <u>row-major order</u>, and
  is the C standard. Other programming languages, such as FORTRAN,
  use <u>column-major order</u>, in which each column is stored in memory
  contiguously. So, in column-major order, the array looks like the
  following: </p>
<p>
<img src="arrayCol.jpg" alt="Memory representation of column-major order">
</p>
<p>When sorting a single-dimensional array in C, the most common method is
  to sort the elements from smallest to largest. Though sorting a
  multidimensional array is much less frequent, one method is to perform
  essentially the same method by sorting each row, so the rows are in
  order, but the columns are not.
</p>

<ol start=6>
<li>
<p>
Write a program that, using insertion sort, sorts a two-dimensional
    array in row-major order such that the elements in each row go from
    smaller to larger.
</p>

<li>
<p>
Write a program that takes a two-dimensional array and, using insertion
sort, sorts it in column-major order, so the values in the top of each
column are the smallest in the column, with the largest value in each
column in the bottom.
</p>

<p>
Note that for this exercise, you should <u>not</u> perform a normal
insertion sort (row-major order) and simply paste the result in the
  "column-major sorted" array.
</p>

</ol>

<!--#include file="body-footer.inc" -->

</div>
<div class="footer">
<hr><p>

This document is available on the World Wide Web as

<PRE>
     http://www.cs.grinnell.edu/~walker/courses/161.sp14/modules/module-struct-2d-arrays/insertion-sort-lab.shtml
</PRE>

<hr>
<table width="100%">
<tr><td>
   <em>created 1 August 2011 by April O'Neill</em><br>
   <em>last revised 8 August 2011 by April O'Neill</em><br>
   <em>minor editing 7 November 2011 by Henry M. Walker</em><br>
   <em>reformatting lab, editing programs 2 February 2014 by Henry M. Walker</em>
   </td>
   <td rowspan="2" align="right">
   <a href="http://validator.w3.org/check/referer"><img border="0"
      src="/~walker/valid-html401-blue.png" alt="Valid HTML 4.01!" height="31"
      width="88"></a>
   <a href="http://jigsaw.w3.org/css-validator/"><img border="0"
       src="/~walker/vcss-blue.png"
       alt="Valid CSS!" height="31"
       width="88"></a>
   </td>
</tr>
<tr><td>
   For more information, please contact
   <a class="footer-a" href="/~walker/">Henry M. Walker</a> at
   <a class="footer-a" href="mailto:walker@cs.grinnell.edu">walker@cs.grinnell.edu</a>.
   </tr>

</table>

<hr>
<!--#include file="copyright-notice.inc"-->

</div>
</div>
</body>
</html>


