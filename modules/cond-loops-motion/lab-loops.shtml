<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<html>

<head>
	<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">    
	<link rel="stylesheet" type="text/css" href="style.css">
 	<title>CSC 161: Introduction to Loops </title>
        <link rev="made" href="mailto:walker@cs.grinnell.edu">
</head>

<body>
<div class="body">

<!--#include virtual="header.inc"-->

<div class="labcontent">

<H1>Laboratory Exercise on Loops</H1>

<h2>Goals</h2>  

<p>
The goal of this lab is to introduce loops in C programming to students and
increase familiarity with different types of loops.
</p>

<h2>Preparation before Class</h2>

<ul>
<li>Reading from Text
    <ul>
    <li>King: Sections 6.1-6.5, pages 99-120, OR
    <li>Kernighan & Ritchie, 1.3, 1.4, 3.5 , 3.6-3.7 
    </ul>
<li>Examples:
    <ul>
    <li><a href="counting-loop-annotated.shtml">Annotated counting-loop.c</a>
    <li><a href="asterisk-loop-annotated.shtml">Annotated asterisk-loop.c</a>
    <li><a href="follower-1.c">follower-1.c</a>
    <li><a href="follower-2.c">follower-2.c</a>
    <li><a href="3-loops.c">3-loops.c</a>
    <li><a href="coins.c">coins.c </a>
    </ul>
</ul>

<h2>Introduction</h2>

<p>
The reading for today's lab identified three basic types of
loops:  <tt>for</tt>, <tt>while</tt>, and <tt>do..while</tt>.
Program <a href="3-loops.c">3-loops.c</a> uses each of these constructions
to print the numbers 1 to 10 on separate lines.
</p>

<p>
Although the loops have many similarities, one loop may seem to fit a
circumstance more naturally than another.
</p>

<p>
The <tt>for</tt> loop often focuses on the progression of one or more
control variables.  In what follows, the code emphasizes the values
for  <tt>i</tt> during the running of the code.
</p>

<div class="block">
<pre>
  /* for loop */
  printf ("for loop\n");
  for (i = start; i &lt;= end; i++)
    {
      printf ("%5d", i);
    }
  printf ("\n");
</pre>
</div>

<p>
A <tt>while</tt> loop often emphasizes the condition under which the loop
will continue.  Updating variables takes place in the body of the loop and
may be complex. 
</p>

<div class="block">
<pre>
  /* while loop */
  printf ("while loop\n");
  i = start;
  while (i &lt;= end)
    {
      printf ("%5d", i);
      i++;
    }
  printf ("\n");
</pre>
</div>

<p>
In contrast to <tt>for</tt> and <tt>while</tt> which may skip the loop
completely if the condition is not satisfied, the <tt>do..while</tt>
always executes its loop body at least once.
</p>
<div class="block">
<pre>
  /* do while */
  printf ("do..while loop\n");
  i = start;
  do
    {
      printf ("%5d", i);
      i++;
    }
  while (i &lt;= end);
  printf ("\n");
</pre>
</div>

<h2>Work Started in Class</h2>

<h3>Initial Experiments with Loops</h3>

<ol>
<li>
<p>
Copy <a href="3-loops.c">3-loops.c</a> to your account, compile and run it,
and be sure you understand how each loop works.  Also, explain the purpose
of the line <tt>printf ("\n");</tt>.  Is this statement in the loop or not?
Why?

</p>

<li>
<p>
In the <tt>3-loops.c</tt> program, change the initialization
of <tt>start</tt> to 11, recompile, and rerun the program.  Describe what
happens and explain why.
</p>
</ol>

<h3>Printing a Table</h3>

<ol start=3>
<li>
<p>In Module 0, you saw a program
(<code><a href="/~walker/courses/161.fa11/modules/module-getting-started/quarts-annotated.shtml">quarts.c</a></code>),
that converted quarts to liters. Write a program
that prints a table listing the conversions from one to twelve quarts
into liters.
<ul>
<li>
<p>Use the line <code>printf("%4d%16.4lf\n", quarts, liters);</code>
  to keep proper spacing.</p>
</ul>
<p><b>Example Output:</b>

<div class="block">
<pre>
Table of quart and liter equivalents
Quarts           Liters
   1             0.9463
   2             1.8927 
   3             2.8390 
   4             3.7853 
   5             4.7317 
   6             5.6780 
   7             6.6243 
   8             7.5707 
   9             8.5170 
  10             9.4633 
  11            10.4097 
  12            11.3560 
</pre>
</div>
</ol>

<ol class="withloweralpha">
<li>
In your first version of the program, implement the loop using
a <tt>for</tt> construct.
<li>
In your second version of the program, implement the loop using
a <tt>while</tt> construct.
</ol>

<h3>Loops with a Scribbler 2 Robot</h3>

<ol start=4>

<li>
<p>
<i>Simple Motion Commands:</i> Write one or more programs that have the
Scribbler 2 robot move in various ways:
</p>


<ol class="withloweralpha">
  <li>A <tt>for</tt> loop should move the scribbler forward 5 times.
    
  <li>A <tt>while</tt> loop should move the Scribbler in some direction for
      increasing amounts of time.

  <li>A <tt>for</tt> loop should move the Scribbler some number of times at
      changing speeds.

  <li>A <tt>while</tt> loop should change both speed and time in the same
  loop.
    
</ol>


<li>
<p>
<i>Rising Pitch:</i> A program is supposed to beep once at 800 Hz, then
increase by 20 Hz every beep for another twelve beeps.  Write this program
using the following template for a <tt>for</tt> loop based on an integer
variable <tt>i</tt>:
</p>

<div class="block">
<pre>
for (i = 0; i &lt;= 12; i++)
{
   int freq = /* compute frequency here */
   rBeep (1.0, freq);
}
</pre>
</div>

<li>
<p>
<i>Nested Loop:</i> Modify the loop from Step 5, so that the program
beeps <tt>i</tt> times at the given frequency, rather than just once,
inside the loop.  Thus, the resulting program should beep once at 800 Hz,
then twice at 820 Hz, then three times at 840 Hz, etc.
</p>

</ol>

<p>
Step 6 illustrates how loops may be nested inside one another.  In this
case, the outside loop systematically works through a sequence of main
steps.  The inside loop then supplies the processing for each particular
element of the main sequence.
</p>

<p>
<i>Programming Hint &mdash; Infinite Loops:</i> Computers are quite
patience, so once a loop starts, the loop will continue as long as the
appropriate condition remains true.  If the condition never becomes false,
the loop will never stop.  For example, the following loop will continue
forever</p>

<div class="block">
<pre>
while (1)
{

}
</pre>
</div>

<p>
Although this type of construct may seem peculiar, such loops can be useful
from time to time.  For example, we expect to type commands in a terminal
window for as long as the window remains open.  Thus, the code behind the
terminal window might use a <tt>while (1)</tt> construct to keep reading and
processing commands.
</p>

<p>
As a practical matter, if you encounter this situation with a program, and
if you want the program to stop, you can use the key combination ctrl-c to
end your program in the terminal window. In this situation, turning the
Scribbler 2 off or pressing the reset button resets the robot.
</p>

<h3>Another Nested Loop</h3>

<ol start=7>
<li>
<p>
Write a program that consecutively beeps more times in a row, until seven
beeps in a row are reached. So, the robot would beep once and sleep for one
second, then beep twice and sleep for one second, then three times and
sleep for one second, and so on.
</p>
</ol>

<h2>Homework</h2>

<p>
The Scribbler 2 movement commands may be organized into two basic groups:
</p>

<ul>
<li>
<p>
<i>Limited Duration Commands:</i> A duration parameter is part of the
commands <tt>rTurn</tt>, <tt>rTurnLeft</tt>, <tt>rTurnRight</tt>, 
<tt>rForward</tt>, and <tt>rBackward</tt>.  For each of these commands, the
robot follows the movement for a specified amount of time and then stops.
</p>
<li>
<p>
<i>Ongoing Duration Commands:</i>  No duration parameter is given for the
commands <tt>rMotors</tt>, <tt>rMove</tt>, <tt>rRotate</tt>,
<tt>rTranslate</tt>, and <tt>rStop</tt>. Once any of these commands is
given, the robot will continue to follow that motion until a subsequent
command is given.
</p>
</ul>

<h3>Spiral Motion</h3>

<p>
Consider how to make the robot move spirally. Spirals begin from a center
point, with the line moving in a circular motion, with a gradually greater
distance from the origin. There are two straightforward ways that move the
Scribbler 2 in a spiral motion for at least ten seconds.
</p>

<ol start=8>
<li>
<p>
Write a program that makes the Scribbler 2 robot behave like turtles in CSC
151. So, the robot would move forward, then turn (e.g., <tt>rTurnLeft</tt>
or <tt>rTurnRight</tt>), then move forward a little further, then turn, and
so on in a spiral shape.  Just a single loop is needed here.
</p>

</ol>

<h3>Motion With Obstacles</h3>

<p>
While blind motion can be interesting, sensing obstacles is where motion
really gets awesome!
</p>

<ol start=9>

<li>
<p>
Write a simple program which moves the robot forward until it sees an
obstacle. 
</p>

<p>
<i>Hint:</i>  Experimentation with the obstacle sensors suggests moderate
variability in the readings obtained.  One way to reduce the variability of
these readings is to take several readings and average.
</p>

<ul>
<li>
<p>
With the traditional MyroC package, one might use
the <tt>rGetObstacleTxt(char * value)</tt> function.  
Here the <tt>value</tt> parameter specifies the desired sensor:  "left",
"middle" or "middle", "right".
</p>
<li>
<p>
With the MyroC package under development <i>MyroCDev</i>, one might use
the <tt>rGetObstacleTxt(char * value, int sampleSize)</tt> function.  Here
the <tt>sampleSize</tt> parameter allows one to take several readings of
the sensor and compute an average.  To get a single reading, use 1 as
the <tt>sampleSize</tt>. 
</p>
</ul>

<li>
<p>
Write a simple program which moves the robot forward until it sees an
obstacle, then turns right, then moves forward again until it sees an
obstacle.
</p>

<li>
<p>
Now generalize your program so that your robot moves forward until it sees
an obstacle, then turns right, moves forward until it sees an obstacle,
turns right, moves forward until obstacle, turns right, etc.  It should do
this until the program is terminated.
</p>

</ol>



<!--#include file="body-footer.inc"-->

</div> <!--labcontent-->

<div class="footer">
<hr>

<p>
This document is available on the World Wide Web as
</p>

<div class="address">
<PRE>
     http://www.cs.grinnell.edu/~walker/courses/161.2914/modules/module-cond-loops-testing/lab-loops.shtml
</PRE>
</div> <!--address-->

<hr>
<table width="100%">
<tr><td>
   <em>created July 20 2011 by April O'Neill</em><br>
   <em>revised July 29 2011 by April O'Neill</em><br>
   <em>minor editing 24 August 2011 by Henry M. Walker</em><br>
   <em>last full revision 9 October 2011 by Erik Opavsky</em><br>
   <em>revised 13 February 2012 by Erik Opavsky</em><br>
   <em>minor editing (section title change) 20 July 2012 by Henry M. Walker</em><br>
   <em>minor editing (updated URL) 10 September 2013 by Henry M. Walker</em><br>
   <em>revised (merged loops and motion labs) 18 January 2014 by Henry M. Walker</em><br>
   <em>reorganized with heavy editing 21 January 2014 by Henry M. Walker</em><br>
   <em>spiral motion updated 16 September 2014 by Henry M. Walker</em><br>
   <em>readings added 19 September 2014 by Henry M. Walker</em>
   </td>

   <td rowspan="2" align="right">
   <a href="http://validator.w3.org/check/referer"><img border="0"
      src="/~walker/valid-html401-blue.png" alt="Valid HTML 4.01!" height="31"
      width="88"></a>
   <a href="http://jigsaw.w3.org/css-validator/"><img border="0"
       src="/~walker/vcss-blue.png"
       alt="Valid CSS!" height="31"
       width="88"></a>
   </td>
</tr>

<tr><td>
   For more information, please contact
   <a class="footer-a" href="/~walker/">Henry M. Walker</a> at
   <a class="footer-a" href="mailto:walker@cs.grinnell.edu">walker@cs.grinnell.edu</a>.
   </tr>

</table>

<hr>
<!--#include file="copyright-notice.inc"-->

</div> <!--footer-->
</div> <!--body-->
</body>
</html>


