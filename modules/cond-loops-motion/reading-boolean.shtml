<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <meta http-equiv="Content-Type" 
        content="text/html; charset=ISO-8859-1">
  <link rel="stylesheet" type="text/css" href="style.css">

  <title>CSC 161:  Reading on Conditionals</title>  
  <link rev="made" href="mailto:walker@cs.grinnell.edu">
</head>
<body>
  <!--#include file="header.inc"-->

  <div class="body">
      
    <div class="labcontent">
        
      <h1>Reading: Boolean Values and Expressions</h1>
        
      <h2>Using Booleans</h2>
        
        <h3>Comparison and Logical Operators</h3>
	
        <p>
          Conditional <tt>if</tt> statements operate on Boolean values.  An
          expression such as:
        </p>
<div class="block">
        <pre>
            1 == 2;
          </pre>
</div>
        <p>
          returns <tt>true</tt> if the statement is correct,
          and <tt>false</tt> otherwise.  The above expression evaluates
          to <tt>false</tt>.  This is the standard behavior of all the
          comparison and logical operators in C: <tt> ==, &lt;=, &gt;=,
          &lt;, &gt;, !=, &amp;&amp,</tt> and, <tt>||</tt>.
        </p>
        <p>
          It is easy to misuse the comparison operators.  In mathematics,
          the expression:
        </p>
<div class="block">
        <pre>
            -2 &lt; -1 &lt; 0
          </pre>
</div>
        <p>
          makes sense and would evaluate to <tt>true</tt>.  However, in C,
          the semantics of these expressions is different, and the above
          expression in C actually evaluates to <tt>false</tt>.
          Specifically, comparison operators associate left to right and
          evaluate to Boolean values, so<code>
          -2&nbsp;&lt;&nbsp;-1&nbsp;&lt;&nbsp;0</code> is evaluated as if
          parentheses were added to give <code>
          (-2&nbsp;&lt;&nbsp;-1)&nbsp;&lt;&nbsp;0</code>.  The value
          returned from the first comparison is 1 (<tt>true</tt>) because
          -2 is less than -1. Next, 1 is compared to 0.  1 is not less than
          0 so the expression evaluates to false.
        </p>
        <p>
          To do multiple tests at once, use logical AND
          (<tt>&amp;&amp;</tt>), and logical OR (<tt>||</tt>) operators.
          For example, the previous example can be correctly expressed in C
          as:
        </p>
<div class="block">
        <pre>
            (-1 &gt; -2) &amp;&amp; (-1 &lt; 0)
          </pre>
</div>
        <p>
          This expression in C works fine, but note that some
          simplification is possible, because the <code>&amp;&amp;</code>
          operation has lower precedence than either <code>&gt;</code>
          or <code>&lt;</code>.  Taking advantage of the assumed precedence
          of these options, the parentheses can be removed from the above
          expression, and C will still understand that it should perform
          the comparisons with <code>&gt;</code> and <code>&lt;</code>
          operations before applying
          <code>&amp;&amp;</code>.  Thus, many C programmers will simplify
          the above expression to
        </p>
<div class="block">
       <pre>
            -1 &gt; -2 &amp;&amp; -1 &lt; 0
          </pre>
</div>

        <h3>Conditionals</h3>


<p>In C, anything that evaluates to a 0 will mean <tt>false</tt> and
oppositely anything that is non-zero will evaluate to be <tt>true</tt>. We
can use this property of Booleans in C to simplify conditionals. Here is
how:</p>
<div class="block">
	<pre> 
	if( rGetIRTxt("left") = 1)<br>
	   &nbsp;&nbsp; rTurnLeft(1,1);<br>
	 &nbsp; else<br>
            &nbsp;&nbsp;&nbsp;rForward(1,1);<br>
	</pre>
</div>
<p> The code above says if the call for the left sensor value is 1, then
turn left, if not just go forward. But since 1 is a non-zero value, it will
be true, so we don't have to write it. We could just say:</p>
<div class="block">
	<pre>
	if( rGetIRTxt("left") )<br>
	    &nbsp;&nbsp; rTurnLeft(1,1),<br>
	   &nbsp;else<br>
	   &nbsp;&nbsp;&nbsp;rForward(1,1);<br>
	</pre>
</div>
<p>Similarly, if we wanted the robot to beep whenever there was nothing in
front of it, and just go forward if there is nothing to beep for, we could
use the same property. The only change we would need to do would be to
negate so that it would say "if rGetIRTxt() returns a not true value,
beep". Here is the code:</p>
<div class="block">
	<pre>
	if( ! rGetIRTxt("left") )<br>
	     &nbsp;&nbsp;rForward(1,1),<br>
	   &nbsp;else<br>
	     &nbsp;&nbsp;&nbsp;rBeep(1,500);<br>
	</pre>
</div>

<h3>Redundant Comparisons</h3>
        <p>
          Conditional statements (<tt>if</tt>s) are designed to work with
          Boolean values. 
          If an <em>expression</em> is <tt>true</tt>, the specified code will
          execute. In addition to all the logical and comparison operators in
          C, many functions also return Boolean values to indicate different
          outcomes. 
        </p>
        
        <p>
          It is a good idea to avoid testing against
          Boolean 
          values in your conditionals if a value is already considered to
          be Boolean.  If a function or expression is supposed to
          return <tt>true</tt> on success and <tt>false</tt> on failure, do
          not further test that result against <tt>true</tt>
          or <tt>false</tt>.  Consider the following:
        </p>
<div class="block">
        <pre>
            if ( true ) <br>
        </pre>
</div>
        <p>and:</p>
<div class="block">
        <pre>
            if ( true == true )<br>
        </pre>
</div>
        <p>
          Initially, it may seem the second case is more accurate than the
          first. But, add a third case:
        </p>
<div class="block">
        <pre>
            if ( true == true == true ) <br>
        </pre>
</div>
        <p>
          The third case is no more descriptive or accurate than the second
          in the same way the second is no more accurate than the first.
          It is good practice to avoid this kind of redundancy in your
          testing.          
        </p>        
        
        <h3>Returning Boolean Values</h3>
        
        <p>
          Since comparison and logical operators in
          C evaluate to Boolean values, good coding practice takes
          advantage of this evaluation when returning Boolean results from
          functions.  For example, consider the following code segment:
        </p>
<div class="block">
           <pre>
            if ( x == y ) <br>
            &nbsp;&nbsp;return 1;<br>
            else <br>
            &nbsp;&nbsp;return 0;<br>
          </pre>
</div>
        <p>
          This code may be correct, but it also is inefficient and wordy.
          Think about how operators which return Boolean values (such as
          the <tt>==</tt> operator) work.  If <code>x</code>
          and <code>y</code> have common values, then the result of
          the comparison <code>x == y</code> is true &mdash; which in C is
          represented by the value 1.  If the comparison is false, the
          result is false, represented by the value 0.  Thus, the return
          values are exactly what C computes with the statement <code>x
          == </code>, and the complex statement above can be simplified to
        </p>
 <div class="block">
        <pre>
            return ( x == y );
        </pre>
</div>

<h3>Switch Statements</h3>

<p>Instead of using many if statements, we can use switch statements to simplify our code. When there are cases in which a variable is compared to other integer values, and a certain code is executed if the compared values are equal, we can use switch cases.</p>

<p>Here is how to use switch statements:</p>
<div class="block">
	<pre>
            switch (variable){
	      case value0:
		//Execute this code if variable == value0
                break;
	      case value1:
		//Execute this code if variable == value1
		break;
	      case value2:
		//Execute this code if variables == values2
		break;
		.
		..
		...
	      default:
		Execute this code if variable did not equal any of the cases above
		break;
	     }   
        </pre>
</div>

<p> The program <a href="second-counter.c">second-counter.c</a> provides an
  example of how <code>switch</code> statements work.</p>

</div>
      <!--#include file="body-footer.inc"-->

      </div> <!-- labcontent -->

      <!-- . . . . . . . -->

        <div class="footer">
          <p>
            <hr>
          This document is available on the World Wide Web as

          <div class="address">
            <BLOCKQUOTE>
              <code>
                http://www.cs.grinnell.edu/~walker/courses/161.sp12/modules/cond-loops-testing/reading-boolean.shtml<br>
              </code>
            </BLOCKQUOTE>
          </div>
          <p>
            <hr>
          <table width="100%">
            <tr><td>

                <em>created 29 July, 2011 by David Cowden</em><br>
                <em>full revision 29 July, 2011 by David Cowden</em><br>
                <em>minor editing 10 September 2011 by Henry M. Walker</em><br>
                <em>full revision 20 September 2011 by Dilan Ustek</em><br>
                <em>modest editing 26 September 2011 by Henry M. Walker</em><br>
                <em>moderate editing 3 October 2011 by Henry M. Walker</em><br>
                <em>moderate editing 5 October 2011 by Dilan Ustek</em><br>
                <em>moderate editing 10 October 2011 by Henry M. Walker</em>
              </td>
              <td rowspan="2" align="right">
                <a href="http://validator.w3.org/check/referer">
                  <img border="0" src="/~walker/valid-html401-blue.png" 
                       alt="Valid HTML 4.01!" height="31" width="88">
                </a>
                <a href="http://jigsaw.w3.org/css-validator/">
                  <img border="0" src="/~walker/vcss-blue.png" 
                       alt="Valid CSS!" height="31" width="88"></a> 
              </td>
            </tr>

            <tr><td> 
                For more information, please contact
                <a class="footer-a"
                  href="http://www.cs.grinnell.edu/%7Ewalker/"> 
                  Henry M. Walker
                </a> 
                at
                <a class="footer-a" href="mailto:walker@cs.grinnell.edu">
                  walker@cs.grinnell.edu
                </a>.
            </td></tr>
          </table>
<hr>
<!--#include file="copyright-notice-reading.inc"-->

      </div> <!-- footer -->
    </div>
  </body>
</html>
