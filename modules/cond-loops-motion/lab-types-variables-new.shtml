<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
    <link rel="stylesheet" type="text/css" href="style.css">
     <title>CSC 161 Lab. Types and Variables</title>  
    <link rev="made" href="mailto:walker@cs.grinnell.edu">
</head>

<body>
<div class="body">
<!--#include file="header.inc"-->

<div class="labcontent">
  <h1>Laboratory Exercise: Types and Variables</h1>
  <h2>Goals</h2>
  <p>
    The purpose of this lab is to explore types and variables in C.
  </p>
  <h2>Introduction</h2>
  
  <p>
    In Scheme, a variable (or identifier or parameter) can represent any
    type of data, and the type of a variable may change from one call of a
    procedure to another.  For example, consider the following Scheme
    procedure that adds all numbers on a list or its sublists:
  </p>

<div class="block">
  <pre>
   (define sum-numbers
      (lambda (ls)
          (cond ((number? ls) ls)
                ((not (list? ls))  0)
                ((null? ls) 0)
                (else (+ (sum-numbers (car ls)) 
                         (sum-numbers (cdr ls))))
          )
      )
   )
  </pre>
</div>


   <p>
     When <tt>sum-numbers</tt> is called:
  </p>

<div class="block">
   <pre>
   (sum-numbers '((1) 2.0 four ((3/4) (five) 6)))
  </pre>
</div>
  <p>
    the parameter <tt>ls</tt> starts as a list, but various calls will
    give <tt>ls</tt> various values, including sublists, integers (e.g., 1,
    6), real numbers (2.0), fractions (3/4), and symbols (e.g., <tt>four,
    five</tt>).  At the end of this example, <tt>sum-numbers</tt> returns 9.75.
  </p>

  <p>
    In C, the data type of each variable must be declared before the
    variable is used in a program (or procedure).  Also, once declared, the
    data type cannot change within the procedure.  Thus, when you start
    programming in C, you need to be familiar with the few primitive types
    of variables provided to manage data with.  Also, in some types of
    processing, C allows for many implicit and explicit type conversions
    between these storage classes.  In this lab you will perform different
    legal, illegal, and unusual operations, and examine the results.
  </p>
        
  <!--...........................................................-->

  <h2>Primitive Types</h2>

    <p>
      In C there are 4 primitive types:
    </p>

<div class="block">
    <pre>
        char     /* a character */
        int      /* an integer  */
        float    /* a real number (single-precision)*/
        double   /* a real number that needs twice the space as a float (double-precision) */
      </pre>
</div>
    <p>
      In reviewing these data types, 
    </p>

    <ul>
      <li>
        a <tt>char</tt> is a character that you might type at the keyboard,
        such as <tt>A</tt>, <tt>q</tt>, <tt>;</tt> (semi-colon), <tt>*</tt>
        (asterisk), etc.
      <li>
        an <tt>int</tt> is an integer (a whole number with no decimal point)
      <li>
        a <tt>float</tt> and a <tt>double</tt> represent real numbers
        (a number with a decimal point).  
    </ul>

    <p>
      As we shall discuss in several weeks, these types of data are
      represented in different ways within a computer.  For example,
      each data type may take up a different amount storage.  Each data
      type also has a limited range of values.  For example,
      an <tt>int</tt> has values between -2147483648 (INT_MIN in limits.h)  and 2147483647 (INT_MAX in limits.h),
      inclusive.  
    </p>

    <h3>Computations with <tt>int</tt>s and <tt>double</tt>s</h3>

    <p>
      When the numbers in an expression are all <tt>int</tt>s, then the
      arithmetic operations (e.g., <tt>+</tt>, <tt>-</tt>, <tt>*</tt>,
      <tt>/</tt> (quotient), and <tt>%</tt> (integer remainder) are all
      performed as integers (without decimal points).
    </p>
    <ol>
      <li>
        <p>
         Include the following code segment in a C program,
         compile the program, and observe the results:
        </p>
<div class="block">

        <pre>
          int a = 5;
          int b = 6;
          int c = 7;
          int d = a + b + c;
          int e = (a + b + c) / 10;
          int f = (a + b + c) % 10;
          printf ("a=%d, b=%d, c=%d, d=%d, e=%d, f=%d\n", a, b, c, d, e, f);
        </pre>
</div>

        <p>
          Review what is printed and explain each result.
          </p>

        <li>
          <p>
            Change the declarations above, so that <tt>int e</tt> and <tt>
            int f</tt> are declared as doubles like this:
          </p>
<div class="block">
        <pre>
          int a = 5;
          int b = 6;
          int c = 7;
          int d = a + b + c;
          double e = (a + b + c) / 10;
          double f = (a + b + c) % 10;
          printf ("a=%d, b=%d, c=%d, d=%d, e=%lf, f=%lf\n", a, b, c, d, e, f);
        </pre>
<div>
        <p>
          Compile and run the revised program, and explain what happens.
        </p>

        <li>
          <p>
            Change the division in step 2, so that division is by 10.0
            rather than 10.  
          </p>

          <ol class="withloweralpha">
            <li>
              Does the program compile?  If not, explain why, and then
              remove any offending line.
            <li>
              After making any adjustments needed to allow compilation,
              run the program, and explain the output.
          </ol>

      <li>
        <p>
          Write a simple C program that declares a <code>char</code>, 
          an <code>int</code>, and a <code>double</code> .
          See what happens when you try to assign the value of each
          one to one of the other types.
        </p>
        <ol  class="withloweralpha">
          <li>Assign an <code>int</code>  to a <code>char</code>.
          <li>Assign a <code>char</code> (example 7) to an <code>int</code>.
          <li>Assign <code>double</code>(example 7.12) to an <code>int</code>.
          <li>Assign <code>char</code> (example 58) to a <code>double</code>.
        </ol>
    </ol>
    <p>
      You may recall there is a fourth type, <tt>float</tt>, that you
      didn't use in the last few steps.  <tt>double</tt>s are almost always
      preferred to <tt>float</tt>s, because a <tt>double</tt> is stored
      more accurately than a <tt>float</tt>.  Also, constants, such
      as <tt>3.14</tt> are almost always stored as <tt>double</tt>s in C.
      We will discuss details of the various data types,
      including <tt>double</tt>s and <tt>float</tt>s, in a few weeks.
    </p>

    <!--.............................................................-->
    <h3>Conversion Errors</h3>
    <ol start=5>
      <li>
        <p>
          Download the program 
          <a href="conversion-errors.c">conversion-errors.c</a>.  Compile
          it and run it. It declares one of each of the primitive types of
          variables and displays their contents before and after
          initialization. How did not initializing effect the values?
        </p>
</ol>


<h2>Arithmetic and Operators</h2>

<h4>Operator Precedence</h4>

<p>After deciding what operator you will use, you need to put them in certain order or in parentheses because the program will be read in a certain order and so the operators will be applied in a certain order.</p>
<ol start = 6>
<li>Copy this code in a program. What do you think the result will be? Test this out by printing the value.
<div class="block">
<pre>
    	int x;
	x = 5 + 4 * 3 + 1
</pre>
</div>
<li>Copy this code in the same program. Think aboout your expected result and then see what the program prints.
<div class="block">
<pre>
	int y;
	y = (5 + 4) * (3 + 1)
	
</pre>
</div>
</ol>

<h4>Truncation</h4>
<p>An integer is a whole number. This is why whenever you try to assign an integer a number with a decimal part, for example by diving 5 by 2 , the program will truncate this value. This means that it will throw the digits after the decimal point away. The rounding will always be down.  </p>
<ol start=8>
<li> Copy the following code. Predict what it will do and print the result to check your predictions.
<div class="block">
<pre>
	int a = 13;
	int b = 3;
	int c;
	
	c = a/b;
</pre>
</div>

<li>If we didn't want the result to be truncated, here is what we could've done. Copy this code into your program above.
<div class="block">
<pre>
 	double x;	
  	x = 13.0/3;
  	printf("%f\n", x);
</pre>
</div>
</ol>

<h4>Assignment of Integers</h4>
<p>Let's say you have a counter that counts down the number of days you have left for the summer. Let's call the counter <tt>days</tt>. Every day that passes, you need to decrement the number of days to get your countdown going. You could do it like this: </p>
<div class="block">
<pre>
	days = days - 1;
</pre>
</div>
<p>This would mean that I am taking the number of days, subtracting 1 from it, and setting that as my new <tt>days</tt> value. </p>
<p>There is a shortcut to saying that the new value of <tt>days</tt> is the old value of <tt>days</tt> -1. Here it is:</p>
<div class="block">
<pre>
	days -= 1
</pre>
</div>
<p>You can do a variety of operations just like this:</p>
<li>a += b means a = a+b
<li>a /= b means a = a/b
<li>a *= b means a = a*b

<h4>Incrementing </h4>
<p>There are two ways to increment a variable: x++ and ++x. These should not be confused with each other. </p>
<ol start = 10>
<li><p>Here is an example program. Examine the output to differentiate between these two incrementers.  </p>
<div class="block">
<pre>
  int a,b,c;
  a = 0;
  b = x++;
  c = ++x;
  printf(" a = %d b = %d c = %d\n", a,b,c);
  a = 0;
  b = ++x;
  c = x++;
  printf(" a = %d b = %d c = %d\n", a,b,c);	
</pre>
</div>
</ol>
    <h2>Unexpected Results</h2>
    
    <h3>Adding <tt>ints</tt> to <tt>chars</tt></h3>
    
    <p>
      In C, it is possible to add an integer value to a char value. 
    </p>
    <ol start=11>
      <li>
        <p>
          Add the following lines of code after the <tt>/* Add code
          here */</tt> comment:
        </p>
<div class="block">
        <pre>
            c = c + 7;
            printf("c + 7  = %c\n", c);
        </pre>
</div>
        <ol class="withloweralpha">
          <li>Save, compile, and run the program again.  
          <li>What is the value of <tt>c</tt>?
        </ol>
      <li>
        <p>
          Add 7 to <tt>c</tt> again (you can just copy the two lines again)
          and a print out the value.
          </p>
        <ol class="withloweralpha">
          <li>What is printed?  
          <li>Is that what you expected?
        </ol>
      <li>  <p>
          Set <tt>c</tt> back equal to zero and print out the result:  
        </p>
<div class="block">
        <pre>
            c = 0;
            printf("char c = %c\n", c);
          </pre>
</div>
        <p>
          You may notice the print statement doesn't print out <tt>c</tt>
          as being zero. 
        </p>
        
        <p>
          Why is it blank to the right of the equals sign?
          Behind the scenes, a <tt>char</tt> is really just a small
          integer.  This is why an expression such as: <tt>c + 7;</tt> is
          legal. The only difference is how <tt>printf</tt> interprets the
          value stored in the <tt>char</tt> variable c.
        </p>
        
      
      <li>
        <p>
          Set <tt>c</tt> equal to 48 and print it again.  
          </p>
        <p>
          You will notice it is now a zero again.
        </p>
    </ol>
            
        
        <h2>Casting</h2>
        
          <p>
          As you may have encountered in the previous exercise, c is pretty
          forgiving as to what types can be assigned to each other.
          Whether you realized it or not, the assignment
          operator, <tt>=</tt>, converts between certain types silently
          because they are easily compatible -- such as <tt>char</tt>s
          and <tt>int</tt>s.  Even in the case of types that are less
          compatible such as <tt>int</tt>s and <tt>double</tt>s, if you try
          to assign a <tt>double</tt> value to an <tt>int</tt> variable,
          the compiler does not complain.  It simply drops the floating
          point (the decimal).
          </p>
          <ol start=15>
	    <li> 
              <p>If you didn't try that above, try it now.</p>
<div class="block">
              <pre>
                  i = 2.7;
                  printf("int i = %lf", i);
                </pre>
              </div>
              <p>
                The process of converting between variable types is called
                <em>casting</em>. If you don't have to say anything for the
                process to take place, it is called <em>implicit</em>
                casting.  This is the case with all the math operations in
                c.  The <tt>+, -, *, /, and =</tt> operators all implicitly
                cast across primitive types.  The rules for implicit
                casting can be found in <em>K&amp;R appendix A6</em>
                (specifically section 5).
        </p>
            <li>
              <p>
                Now try <em>explicit</em> casting.  This is where
                you tell c exactly what you want to happen.  The line:
              </p>
<div class="block">
              <pre>
                  int x = (int) 3.14;
              </pre>
</div>
              <p>
                tells the compiler (but more importantly anyone reading the code)
                that it is explicitly intended to convert the double (3.14) to an
                integer and store it in the space x which is available for
                integer data.
                <br >
        </p>
            <li>
              <p>
                Why do you think explicit casting is necessary if the compiler
                already does it implicitly?  </p>
	      <p>As hinted at, it is usually an effective way of informing
                anyone reading your code that you mean to do something that
                may be questionable such as dropping the decimal from a
                number.  The second reason is that casting is necessary
                when dealing with more complicated data such as pointers
                and structs. The compiler will not let you convert between
                certain types unless you explicitly tell it that is what
                you want to do.
              </p>
              <p>
                Finally, there is a danger in casting.  As you experienced
                when playing with signed and unsigned characters, types
                have sizes.  If you try to put a number that is bigger than
                the size of the type you are casting it to, you will get
                undesired results.  Also, if you cast signed numbers to
                unsigned types, you can encounter odd results. Remember, a
                signed type has one less bit (to make room for the sign
                bit) to represent data with.
              </p>
          </ol>       
          <h2>Experimenting with Casting</h2>

          <ol start=18>
            <li>Declare a <tt>signed int</tt> and initialize it to a negative
              number greater than <tt>INT_MIN</tt> from the limits header (so
              between <tt>INT_MIN</tt> and 0).  
            <li>Then, declare an <tt>unsigned
                int</tt>.
            <li>Cast your signed integer to an unsigned integer and assign its
              value to your <tt>unsigned int</tt> variable.  
            <li>Finally, print the
              two values and examine the results.  
              
              <p>If you called your signed
                integer <tt>s</tt>, your explicit cast and print statements would
                look something like this: 
              </p>
<div class="block">
              <pre>
                  unsigned int u = (unsigned int) s;<br >
                 
                  printf("signed int s   = %d\n", s);<br >
                  printf("unsigned int s = %u\n", u);<br >
              </pre>
</div>
              <p>
                <em>* Note the use of <tt>%u</tt> to specify an <tt>unsigned
                    int</tt> in the last <tt>printf</tt> statement.</em>
              </p>
              
            <li>Explain why the values print out as they do. <i>Hint: Refer
            to the <tt>limits.h</tt> header file.</i>
          </ol>
          
          <h2>ASCII Table -- If time permits..</h2>
        
        <p>
          Recall earlier that setting a <tt>char</tt> equal to <tt>0</tt>
          is not the same as setting it equal to <tt>'0'</tt>.  As you may
          know, this is because the zero in single quotes is actually
          interpreted as the character zero.  The character zero has the
          integral value 48. That means setting a char equal to <tt>48</tt>
          is the same as setting it equal to <tt>'0'</tt>.
        </p>
        <p>
          Here is a simple program, <a href="ascii-print.c">ascii-print.c</a> , that prints out all the ASCII values along with their corresponding characters.
          It uses a <tt>for</tt> loop, so examine the program and understand try to undestand what it is doing.<em>*&nbsp;Note that
          while <tt>char</tt>s can range from 0 to 127, the printable
          characters start at 32.</em>
        </p>
<ol start=23>
<li> What is the corresponding character to the ASCII value 85?
<li> What about 32?
<li> What is the ASCII value for the character 'A'?
<li> What is the ASCII value for the character 'a'?
<li> What is the integer difference between the values of 'A' and 'a' ?
</ol>


<!--
	<h2>More for those with extra time</h2>

	<p>Write a program that takes an integer n as input, takes 2
	to the power of that integer n, and loops until 0, and adds all the
	results from taking the power. Finally it should print out
	the <tt>char</tt> that the resulting number corresponds to.</p>
	<p>For example, say the input was 3 
          <pre>
              n is now 3.<br>  2^3 + 2^2 + 2^1 + 2^0 = 15 <br> 

              The char that corresponds to 15 in the ASCII table is SI
	      (shift in).
          </pre>
-->

      <!--#include virtual="body-footer.inc"-->
 
      </div> <!-- labcontent -->

      <!-- . . . . . . . -->

      <div class="footer">
        <p>
          <hr >
          This document is available on the World Wide Web as
          
          <div class="address">
            <BLOCKQUOTE>
              <code>
                http://www.cs.grinnell.edu/~walker/courses/161.sp12/modules/cond-loops-testing/lab-types-variables.shtml<br >
              </code>
            </BLOCKQUOTE>
          </div>
        <p>
            <hr >
          <table width="100%">
            <tr><td>
                <em>created 21 July 2011 by David Cowden</em><br>
                <em>last revised 21 July 2011 by David Cowden</em><BR>
                <em>minor editing 24 August 2011 by Henry M. Walker</em><br>
                <em>additional editing 3 September 2011 by Henry M. Walker</em><br>
                <em>further revision 26 September 2011 by Henry M. Walker</em>
              </td>
              <td rowspan="2" align="right">
                <a href="http://validator.w3.org/check/referer">
                  <img border="0" src="/~walker/valid-html401-blue.png" 
                       alt="Valid HTML 4.01!" height="31" width="88">
                </a>
                <a href="http://jigsaw.w3.org/css-validator/">
                  <img border="0" src="/~walker/vcss-blue.png" 
                       alt="Valid CSS!" height="31" width="88"></a> 
              </td>
            </tr>

            <tr><td> 
                For more information, please contact
                <a class="footer-a"
                  href="http://www.cs.grinnell.edu/~walker/"> 
                  Henry M. Walker
                </a> 
                at
                <a class="footer-a" href="mailto:walker@cs.grinnell.edu">
                  walker@cs.grinnell.edu
                </a>.
            </td></tr>
          </table>
      </div> <!-- footer -->
    </div>
  </body>
</html>
