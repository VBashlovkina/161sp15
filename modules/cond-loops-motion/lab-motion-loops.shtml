<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<html>

<head>
	<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">    
	<link rel="stylesheet" type="text/css" href="style.css">
 	<title>CSC 161 Laboratory Exercise On Scribbler 2 Motion and Loops </title>
        <link rev="made" href="mailto:walker@cs.grinnell.edu">
</head>

<body>
<div class="body">

<!--#include virtual="header.inc"-->

<div class="labcontent">

<H1>Laboratory Exercise on Scribbler 2 Motion and Loops</H1>

<h2>Goals</h2>
<p>The goal of this lab is to continue practice with C loops while also gaining
  some experience with moving the robot around.</p>


<h2>Exercises</h2>
<p>
Before beginning the following exercises, move to your labs directory  and create a file named <code>loops-motion-lab.c</code> for
this lab. Remember to set the forwardness in every program with
motion using either the command <tt>rSetForwardnessTxt("fluke-forward");</tt>
or  <tt>rSetForwardnessTxt("scribbler-forward");</tt>.  For this lab, you will
want to set the forwardness to "fluke-forward".
</p>


<h3>Simple Motion Commands</h3>

<p>Often, you will want to write programs that have the Scribbler 2
  move for varying amounts of time. In <code>loops-motion-lab.c</code>,
  write commands that perform the following actions.</p>

<ol>
  <li><p>Write a loop which moves the scribbler forward 5 times.</p>
    
  <li><p>Write a loop which moves the Scribbler in some direction for
      increasing amounts of time.</p>

  <li><p>Write a loop which moves the Scribbler some number of times at
      changing speeds.</p>

  <li><p>Try changing both speed and time in the same loop.</p>
    
</ol>
  

  <h3>Motion with Beeping</h3>

<p>Here you will combine motion and beeping in both simultaneous and sequential ways.</p>

  <ol start=5>

      <li><p>Tell the robot to move forward for one second, then
      beep. Run your code when it is finished</p>
        <p><i>Pseudocode:</i></p>
<pre>
            <i>connect to the robot
            move forward for one second
            beep for one second
            disconnect from the robot</i>
</pre>

    
      <li><p>Now tell the robot to move forward (without specifying a time), then
        then beep, then stop. Try out your program when it is ready.</p>
        <p><i>Pseudocode:</i></p>

          <pre>
            <i>connect to the robot
            move forward
            beep for one second
            stop
            disconnect from the robot</i>
          </pre>

        <p>Use a nonblocking command such as <code>rMotors (double
          leftSpeed, double rightSpeed)</code>
          or <code>rMove (double translate, double rotate)</code>. You can stop
          the robot with <code>rStop()</code>.</p>
      
      <li><p>Now, switch the move and beep commands.  What happens?</p>

        <p><i>Pseudocode:</i></p>
          <pre>
            <i>connect to the robot
            beep for one second
            move forward
            stop
            disconnect from the robot</i>
          </pre>

      <li><p>Now add in the sleep command!</p>

        <p><i>Pseudocode:</i></p>
          <pre>
            <i>connect to the robot
            beep for one second
            move forward
            sleep
            stop
            disconnect from the robot</i>
          </pre>
          
          <p>Use the command <tt>sleep (int seconds)</tt> to make your program sleep.</p>
          
<li><p>Why do you need the sleep command to see any motion when you beep first
    and then move?</p>
    </ol>
   
  <h3>Spiral Motion</h3>
    <p>Lets make the robot move spirally! Spirals begin from a center point, with the line moving in a
      circular motion, with a gradually greater distance from the
      origin. There are two straightforward ways, each using only one loop,
      that moves the Scribbler 2 in a spiral motion for at least ten
      seconds.</p> 
    <ol start=10>
      <li><p>Write a program that makes the Scribbler 2 robot  behave like
        turtles in CSC 151. So, the robot would move forward, then turn, then
        move forward a little further, then turn, and so on in a spiral
        shape.</p>
      <li><p>Write the program that makes the Scribbler 2 robot move in a
        spiral pattern using a single command. So, the robot would be
        turning while moving forward.</p>
        <p>Hint: use nonblocking motion calls together with the sleep function.</p>
      
    </ol>


  <h3>Motion and Looped Sound</h3>
    <p>You now know how to make the robot beep while moving. You also
    learned in a previous lab how to use a loop to make rising
    pitches. Now, you will combine the two actions.</p>

<ol start=12>
<li><p>
 Write a program that
    moves the Scribbler 2 while it beeps fifteen times in a row, with every
    beep rising in pitch, then stops the Scribbler 2.</p>

</ol>

<h3>Motion With Obstacles</h3>


<p>While blind motion can be interesting, sensing obstacles is where motion
  really gets awesome!</p>

<ol start=13>

<li><p>Write a simple program which moves the robot forward until it sees an
    obstacle. Use the <tt>rGetObstacleNum(int sensor)</tt> function.</p>

<li><p>Write a simple program which moves the robot forward until it sees an
    obstacle, then turns right, then moves forward again until it sees an
    obstacle.</p>

<li><p>Now generalize your program so that your robot moves forward until it
    sees an obstacle, then turns right, moves forward until it sees an obstacle,
    turns right, moves forward until obstacle, turns right, etc.  It should do
    this until the program is terminated.</p>

</ol>

<!--#include file="body-footer.inc"-->

</div> <!--labcontent-->

<div class="footer">

<hr>

<p>
This document is available on the World Wide Web as
</p>

<div class="address">
<PRE>
     http://www.cs.grinnell.edu/~walker/courses/161.sp13/modules/module-cond-loops-testing/lab-motion-loops.shtml
</PRE>
</div> <!--address-->

<hr>
<table width="100%">
<tr><td>
   <em>created 21 July 2011 by April O'Neill</em><br>
   <em>revised 29 July 2011 by April O'Neill</em><br>
   <em>minor editing 24 August 2011 by Henry M. Walker</em><br>
   <em>last full revision 9 October 2011 by Erik Opavsky</em><br>
   <em>minor editing (updated URL) 10 September 2013 by Henry M. Walker</em>
   </td>

   <td rowspan="2" align="right">
   <a href="http://validator.w3.org/check/referer"><img border="0"
      src="/~walker/valid-html401-blue.png" alt="Valid HTML 4.01!" height="31"
      width="88"></a>
   <a href="http://jigsaw.w3.org/css-validator/"><img border="0"
       src="/~walker/vcss-blue.png"
       alt="Valid CSS!" height="31"
       width="88"></a>
   </td>
</tr>
<tr><td>
   For more information, please contact
   <a class="footer-a" href="/~walker/">Henry M. Walker</a> at
   <a class="footer-a" href="mailto:walker@cs.grinnell.edu">walker@cs.grinnell.edu</a>.
   </tr>

</table>

</div> <!--footer-->
</div> <!--body-->
</body>
</html>


