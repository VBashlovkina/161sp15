<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
    <link rel="stylesheet" type="text/css" href="style.css">
    <title>Implementing a Simple Route Cipher</title>
    <link rev="made" href="mailto:walker@cs.grinnell.edu">
</head>

<body>
<div class="body">
<!--#include file="header.inc"-->

<div class="labcontent">

<h1>Implementing a Word-Find Puzzle Program</h1>

<h2>Introduction</h2>

<p>
One type of word-find puzzle has these characteristics:
</p>

<ul>
<li>
A square grid of letters is read
<li>
A sequences of words is read
<li>
A process locates the words in the grid (if possible)
<li>
After reading is complete, the letters in the grid are printed if and only
if they are in the words read.
</ul>

<h2>Problem Description and Example</h2>

<p>
An exercise to solve the word-find puzzle is stated as 
<a href="/~walker/courses/161.fa12/suppl-prob.shtml#5">Problem 5</a> in the
Supplemental Problems assigned in CSC 161 during Fall 2012.
</p>

<h2>Program Solutions</h2>

<p>
The following table documents four C programs that solve the basic
word-find puzzle problem.  
</p>

<ul>
<li>
Data for the program will be stored in a file:
<ul>
<li>
The file begins with a 16 by 16 table of characters, arranged in 16 lines
with spaces separating the letters.
<li>
A sequence of words follows the table of characters.
</ul>
<li>
All programs require the file name to be specified as a command-line
parameter.
<li>
All programs print the resulting output to the terminal.
<li>
The programs differ regarding how the file data read and what the data
structures used.
</ul>

<p>
<i>Additional Notes</i>
<ul>
<li>
All programs compile with the gcc C compiler, using a flag that checks
conformance with the ISO C 1999 Standard.
</ul>

<table border>
<tr>
  <th>Program
  <th>Data Structure for Table
  <th>Function to Read File
  <td>Programming notes
  <th>Lines of code (including comments, formatting)
</tr>

<tr>
  <td valign=top><a href="word-find-1.c">word-find-1.c</a>
  <td valign=top>two 16 by 16 arrays of <tt>char</tt>
  <td valign=top><tt>fgetc</tt>
  <td valign=top>
    <ul>
      <li>one array for input, one array for output 
      <li>tables hold letters (spaces not stored)
      <li>table in file assumed to have exactly one space/newline between
      successive letters 
      <li>all word done in <tt>main</tt>
    </ul>
  <td valign=top align=center>120
</tr>
         
<tr>
  <td valign=top><a href="word-find-2.c">word-find-2.c</a>
  <td valign=top>16 by 33 array of <tt>char</tt> for input<br>
    16 by 32 array of <tt>char</tt> for output
  <td valign=top><tt>fgets</tt>
  <td valign=top>
    <ul>
      <li>each row of input table has full line from file (with null added
      at end), so each table row is considered as full string of input/output
      <li>separate functions for searching horizontally and vertically
    </ul>
  <td valign=top align=center>141
</tr>
         
<tr>
  <td valign=top><a href="word-find-3.c">word-find-3.c</a>
  <td valign=top>two 16 arrays of <tt>char *</tt><br>
    input and output arrays point to dynamically-allocated string of 17 characters
  <td valign=top><tt>fgetc</tt>
  <td valign=top>
    <ul>
      <li>each row of input array holds pointer to array of 17 characters
      <li>each row of output array holds pointer to array of 32 characters
      (to include spaces within the output)
      <li><tt>fgetc</tt> loops until next character read
      <li>generic function for searching both horizontally and vertically
    </ul>
  <td valign=top align=center>138
</tr>
         

<tr>
  <td valign=top><a href="word-find-4.c">word-find-4.c</a>
  <td valign=top>16 by 16 array of <tt>struct</tt>
    <ul>
      <li>one field (<tt>ch</tt>)contains a character
      <li>one field (<tt>print</tt>)indicates whether or not character in input word
    </ul>
  <td valign=top><tt>fscanf</tt> with <tt>%s</tt>
  <td valign=top>
    <ul>
      <li>reading with <tt>fscanf</tt> with <tt>%s</tt> will skip white
      space between letters in file
      <li>table characters only stored once
      <li>when word found in grid, flag field changed to identify printing
    </ul>
  <td valign=top align=center>115
</tr>
         
</table>


</div> <!-- labcontent-->

<div class="footer">
<hr>

<p>
This document is available on the World Wide Web as
</p>

<div class="address">
<PRE>
http://www.cs.grinnell.edu/~walker/courses/161.sp12/c/word-puzzle/
</PRE>
</div> <!-- address -->
<hr>
<table width="100%">
<tr><td>
   <em>created created 11 December 2012 by Henry M. Walker</em><br>
   <em>last revised 12 December 2012 by Henry M. Walker</em>
   </td>
   <td rowspan="2" align="right">
   <a href="http://validator.w3.org/check/referer"><img border="0"
      src="/~walker/valid-html401-blue.png" alt="Valid HTML 4.01!" height="31"
      width="88"></a>
   <a href="http://jigsaw.w3.org/css-validator/"><img border="0"
       src="/~walker/vcss-blue.png"
       alt="Valid CSS!" height="31"
       width="88"></a>
   </td>
</tr>

<tr><td>
   For more information, please contact 
   <a class="footer-a" href="/~walker/">Henry M. Walker</a> at
   <a  class="footer-a" href="mailto:walker@cs.grinnell.edu">walker@cs.grinnell.edu</a>.
   </tr>
</table>

</div> <!-- footer -->
</div> <!-- body -->
</body>
</html>












