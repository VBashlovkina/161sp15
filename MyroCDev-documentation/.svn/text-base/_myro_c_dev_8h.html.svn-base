<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MyroCDev: MyroCDev.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">MyroCDev
   </div>
   <div id="projectbrief">A C library for bluetooth communication with Scribbler 2 robots</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.1.2 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Data Structures</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Variables</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">MyroCDev.h File Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Header for a C-based, my-robot package for the Scribbler 2.  
<a href="#details">More...</a></p>

<p><a href="_myro_c_dev_8h_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_pixel.html">Pixel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Struct for a pixel.  <a href="struct_pixel.html#details">More...</a><br/></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_picture.html">Picture</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Struct for a picture object.  <a href="struct_picture.html#details">More...</a><br/></td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:aadfc48e2707da0e4f1f01e6aa14b6ef4"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_myro_c_dev_8h.html#aadfc48e2707da0e4f1f01e6aa14b6ef4">rConnect</a> (const char *address)</td></tr>
<tr class="memdesc:aadfc48e2707da0e4f1f01e6aa14b6ef4"><td class="mdescLeft">&#160;</td><td class="mdescRight">connects program to Scribbler  <a href="#aadfc48e2707da0e4f1f01e6aa14b6ef4"></a><br/></td></tr>
<tr class="memitem:a169e562028db3fcbbe8ab6a35476bbb8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_myro_c_dev_8h.html#a169e562028db3fcbbe8ab6a35476bbb8">rDisconnect</a> ()</td></tr>
<tr class="memdesc:a169e562028db3fcbbe8ab6a35476bbb8"><td class="mdescLeft">&#160;</td><td class="mdescRight">disconnect program from Scribbler  <a href="#a169e562028db3fcbbe8ab6a35476bbb8"></a><br/></td></tr>
<tr class="memitem:a792741a6104a4701e1bba00b69e5cb2d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_myro_c_dev_8h.html#a792741a6104a4701e1bba00b69e5cb2d">rSetConnection</a> (int socket_num)</td></tr>
<tr class="memdesc:a792741a6104a4701e1bba00b69e5cb2d"><td class="mdescLeft">&#160;</td><td class="mdescRight">set current connection to the socket number  <a href="#a792741a6104a4701e1bba00b69e5cb2d"></a><br/></td></tr>
<tr class="memitem:aa46e349ecd38fc90f8d7cea9bb8678d6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_myro_c_dev_8h.html#aa46e349ecd38fc90f8d7cea9bb8678d6">rBeep</a> (double duration, int frequency)</td></tr>
<tr class="memdesc:aa46e349ecd38fc90f8d7cea9bb8678d6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Beeps with the given duration and frequency.  <a href="#aa46e349ecd38fc90f8d7cea9bb8678d6"></a><br/></td></tr>
<tr class="memitem:a37ccc278b3ecca6290debf1929d1e479"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_myro_c_dev_8h.html#a37ccc278b3ecca6290debf1929d1e479">rBeep2</a> (double duration, int freq1, int freq2)</td></tr>
<tr class="memdesc:a37ccc278b3ecca6290debf1929d1e479"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generates two notes for the prescribed duration.  <a href="#a37ccc278b3ecca6290debf1929d1e479"></a><br/></td></tr>
<tr class="memitem:ab6f8b6b28334162e70f7cf3a3b165e4b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_myro_c_dev_8h.html#ab6f8b6b28334162e70f7cf3a3b165e4b">rSetName</a> (const char *name)</td></tr>
<tr class="memdesc:ab6f8b6b28334162e70f7cf3a3b165e4b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Change name stored in the robot to the 16-byte name given.  <a href="#ab6f8b6b28334162e70f7cf3a3b165e4b"></a><br/></td></tr>
<tr class="memitem:a881bb425d86ebb8caacd6be66c2f8a37"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_myro_c_dev_8h.html#a881bb425d86ebb8caacd6be66c2f8a37">rGetName</a> ()</td></tr>
<tr class="memdesc:a881bb425d86ebb8caacd6be66c2f8a37"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the name of the robot.  <a href="#a881bb425d86ebb8caacd6be66c2f8a37"></a><br/></td></tr>
<tr class="memitem:a3753b86dcb4de002e8456501ca35edae"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_myro_c_dev_8h.html#a3753b86dcb4de002e8456501ca35edae">rSetForwardness</a> (char *direction)</td></tr>
<tr class="memdesc:a3753b86dcb4de002e8456501ca35edae"><td class="mdescLeft">&#160;</td><td class="mdescRight">specifies which end of the Scribbler is considered the front  <a href="#a3753b86dcb4de002e8456501ca35edae"></a><br/></td></tr>
<tr class="memitem:a9e21fdea3dffc9e336739c8e7d455b59"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_myro_c_dev_8h.html#a9e21fdea3dffc9e336739c8e7d455b59">rSetForwardnessTxt</a> (char *direction)</td></tr>
<tr class="memdesc:a9e21fdea3dffc9e336739c8e7d455b59"><td class="mdescLeft">&#160;</td><td class="mdescRight">alternative to rSetForwardness for compatibility with earlier MyroC  <a href="#a9e21fdea3dffc9e336739c8e7d455b59"></a><br/></td></tr>
<tr class="memitem:a07e585491ba7af9e13779f9e3db6fd31"><td class="memItemLeft" align="right" valign="top">char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_myro_c_dev_8h.html#a07e585491ba7af9e13779f9e3db6fd31">rGetForwardness</a> ()</td></tr>
<tr class="memdesc:a07e585491ba7af9e13779f9e3db6fd31"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the forwardness of the Scribbler.  <a href="#a07e585491ba7af9e13779f9e3db6fd31"></a><br/></td></tr>
<tr class="memitem:a21581ded1f409300e8f63f4c41c2f2f0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_myro_c_dev_8h.html#a21581ded1f409300e8f63f4c41c2f2f0">rSetLEDFront</a> (int led)</td></tr>
<tr class="memdesc:a21581ded1f409300e8f63f4c41c2f2f0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the front [fluke] LED on or off.  <a href="#a21581ded1f409300e8f63f4c41c2f2f0"></a><br/></td></tr>
<tr class="memitem:a2466176fa2332b88e5013d6b3fe9ceb8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_myro_c_dev_8h.html#a2466176fa2332b88e5013d6b3fe9ceb8">rSetLEDBack</a> (double led)</td></tr>
<tr class="memdesc:a2466176fa2332b88e5013d6b3fe9ceb8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the the intensity of the back fluke LED,.  <a href="#a2466176fa2332b88e5013d6b3fe9ceb8"></a><br/></td></tr>
<tr class="memitem:a80896cdb3ff63acd1fa0a5ce97ba7c9d"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_myro_c_dev_8h.html#a80896cdb3ff63acd1fa0a5ce97ba7c9d">rGetBattery</a> ()</td></tr>
<tr class="memdesc:a80896cdb3ff63acd1fa0a5ce97ba7c9d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the percentage of volts left in the batteries of the scribbler.  <a href="#a80896cdb3ff63acd1fa0a5ce97ba7c9d"></a><br/></td></tr>
<tr class="memitem:a9296f6acbac4ef59cfc6cb0dc535c60f"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_myro_c_dev_8h.html#a9296f6acbac4ef59cfc6cb0dc535c60f">rGetStall</a> (int sampleSize)</td></tr>
<tr class="memdesc:a9296f6acbac4ef59cfc6cb0dc535c60f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Determine if robot has stalled Since readings of each brightness sensor can vary substantially, each sensor can be queried sampleSize times and an average obtained.  <a href="#a9296f6acbac4ef59cfc6cb0dc535c60f"></a><br/></td></tr>
<tr class="memitem:a9006ba8c581c7543d7d460d76c06d077"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_myro_c_dev_8h.html#a9006ba8c581c7543d7d460d76c06d077">rGetLightsAll</a> (int lightSensors[3], int sampleSize)</td></tr>
<tr class="memdesc:a9006ba8c581c7543d7d460d76c06d077"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the average values of each of the three light sensors in an array. Values of each light sensor can somewhat (typically under 5%-10%). To even out variability, the sensor can be queried sampleSize times and an average obtained.  <a href="#a9006ba8c581c7543d7d460d76c06d077"></a><br/></td></tr>
<tr class="memitem:aaba34be55fd5db7d8c1ed08ea7caa6c2"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_myro_c_dev_8h.html#aaba34be55fd5db7d8c1ed08ea7caa6c2">rGetLightTxt</a> (const char *sensorName, int sampleSize)</td></tr>
<tr class="memdesc:aaba34be55fd5db7d8c1ed08ea7caa6c2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the average values of a specified light sensor. Values of each light sensor can somewhat (typically under 5%-10%). To even out variability, the sensor can be queried sampleSize times and an average obtained.  <a href="#aaba34be55fd5db7d8c1ed08ea7caa6c2"></a><br/></td></tr>
<tr class="memitem:ab4bf6868424a63a95a85decea8a93fc2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_myro_c_dev_8h.html#ab4bf6868424a63a95a85decea8a93fc2">rGetIRAll</a> (int irSensors[2], int sampleSize)</td></tr>
<tr class="memdesc:ab4bf6868424a63a95a85decea8a93fc2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get an array of true/false values regarding the presence of obstacle based on the average values of each of the three IR sensors. Since readings of each light sensor can vary substantially, each sensor can be queried sampleSize times and an average obtained.  <a href="#ab4bf6868424a63a95a85decea8a93fc2"></a><br/></td></tr>
<tr class="memitem:afdf7579ce632c07de1d90f27d67abff7"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_myro_c_dev_8h.html#afdf7579ce632c07de1d90f27d67abff7">rGetIRTxt</a> (const char *sensorName, int sampleSize)</td></tr>
<tr class="memdesc:afdf7579ce632c07de1d90f27d67abff7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Use specified IR sensor to determine if obstacle is present. Since values of each light sensor can vary substantially, the sensor can be queried sampleSize times and an average obtained.  <a href="#afdf7579ce632c07de1d90f27d67abff7"></a><br/></td></tr>
<tr class="memitem:a7fc13d53088ba239a95c99b46b9607e8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_myro_c_dev_8h.html#a7fc13d53088ba239a95c99b46b9607e8">rGetLine</a> (int lineSensors[2], int sampleSize)</td></tr>
<tr class="memdesc:a7fc13d53088ba239a95c99b46b9607e8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Use Scribbler 2 line sensors of Scribbler to check for a black line on a white surface under the robot. Since values of each light sensor can vary substantially, the sensor can be queried sampleSize times and an average obtained.  <a href="#a7fc13d53088ba239a95c99b46b9607e8"></a><br/></td></tr>
<tr class="memitem:ab319898f4ab7d48f15e1215db8e5b4ba"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_myro_c_dev_8h.html#ab319898f4ab7d48f15e1215db8e5b4ba">rSetIRPower</a> (int power)</td></tr>
<tr class="memdesc:ab319898f4ab7d48f15e1215db8e5b4ba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the amount of power for the dongle's IR sensors.  <a href="#ab319898f4ab7d48f15e1215db8e5b4ba"></a><br/></td></tr>
<tr class="memitem:a3a47f1f85c9fa6d68b5ebd8c0ad2e484"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_myro_c_dev_8h.html#a3a47f1f85c9fa6d68b5ebd8c0ad2e484">rGetObstacleAll</a> (int obstSensors[3], int sampleSize)</td></tr>
<tr class="memdesc:a3a47f1f85c9fa6d68b5ebd8c0ad2e484"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the average values of the three obstacle sensors in an array. Since readings of each obstacle sensor can vary substantially (successive readings may differ by several hundred or more), each sensor can be queried sampleSize times and an average obtained.  <a href="#a3a47f1f85c9fa6d68b5ebd8c0ad2e484"></a><br/></td></tr>
<tr class="memitem:a5853bf9f106b47ed0e767adf8fab0d0b"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_myro_c_dev_8h.html#a5853bf9f106b47ed0e767adf8fab0d0b">rGetObstacleTxt</a> (const char *sensorName, int sampleSize)</td></tr>
<tr class="memdesc:a5853bf9f106b47ed0e767adf8fab0d0b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the average values of a specified obstacle (IR) sensor. Since values of each obstacle sensor can vary substantially (successive readings may differ by several hundred or more), the sensor can be queried sampleSize times and an average obtained.  <a href="#a5853bf9f106b47ed0e767adf8fab0d0b"></a><br/></td></tr>
<tr class="memitem:a98820d670fcacb6780e68a58a4bc0a8a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_myro_c_dev_8h.html#a98820d670fcacb6780e68a58a4bc0a8a">rGetBrightAll</a> (int brightSensors[3], int sampleSize)</td></tr>
<tr class="memdesc:a98820d670fcacb6780e68a58a4bc0a8a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Read the Fluke's virtual light sensors. Since readings of each brightness sensor can vary substantially (successive readings may differ by 5000-10000), each sensor can be queried sampleSize times and an average obtained.  <a href="#a98820d670fcacb6780e68a58a4bc0a8a"></a><br/></td></tr>
<tr class="memitem:a6c898c1c12957822fbd0e2b68f573c4d"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_myro_c_dev_8h.html#a6c898c1c12957822fbd0e2b68f573c4d">rGetBrightTxt</a> (char *sensorName, int sampleSize)</td></tr>
<tr class="memdesc:a6c898c1c12957822fbd0e2b68f573c4d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reads one of the Fluke's virtual light sensors. Since values of each obstacle sensor can vary substantially (successive readings may differ by 5000-10000), the sensor can be queried sampleSize times and an average obtained.  <a href="#a6c898c1c12957822fbd0e2b68f573c4d"></a><br/></td></tr>
<tr class="memitem:a1e10a9735a4b8dc8c79100905c30ecab"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_myro_c_dev_8h.html#a1e10a9735a4b8dc8c79100905c30ecab">rGetInfo</a> (char *infoBuffer)</td></tr>
<tr class="memdesc:a1e10a9735a4b8dc8c79100905c30ecab"><td class="mdescLeft">&#160;</td><td class="mdescRight">returns information about the robot's dongle, firmware, and communication mode as a 60 character array in infoBuffer.  <a href="#a1e10a9735a4b8dc8c79100905c30ecab"></a><br/></td></tr>
<tr class="memitem:a1b2462eb7a3149a89cfe73f39339ed89"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_myro_c_dev_8h.html#a1b2462eb7a3149a89cfe73f39339ed89">rTurnLeft</a> (double speed, double time)</td></tr>
<tr class="memdesc:a1b2462eb7a3149a89cfe73f39339ed89"><td class="mdescLeft">&#160;</td><td class="mdescRight">turn Scribbler left for a specified time and speed  <a href="#a1b2462eb7a3149a89cfe73f39339ed89"></a><br/></td></tr>
<tr class="memitem:a0c3496dd17992e9788110c15c017e566"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_myro_c_dev_8h.html#a0c3496dd17992e9788110c15c017e566">rTurnRight</a> (double speed, double time)</td></tr>
<tr class="memdesc:a0c3496dd17992e9788110c15c017e566"><td class="mdescLeft">&#160;</td><td class="mdescRight">turn Scribbler right for a specified time and speed  <a href="#a0c3496dd17992e9788110c15c017e566"></a><br/></td></tr>
<tr class="memitem:aa1a97cc92ee785afb8af4e248d08cbb9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_myro_c_dev_8h.html#aa1a97cc92ee785afb8af4e248d08cbb9">rTurnSpeed</a> (char *direction, double speed, double time)</td></tr>
<tr class="memdesc:aa1a97cc92ee785afb8af4e248d08cbb9"><td class="mdescLeft">&#160;</td><td class="mdescRight">turn Scribbler in direction for a specified time and speed  <a href="#aa1a97cc92ee785afb8af4e248d08cbb9"></a><br/></td></tr>
<tr class="memitem:aaf2b57e29c053c7e3901ec5ee3cb047d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_myro_c_dev_8h.html#aaf2b57e29c053c7e3901ec5ee3cb047d">rForward</a> (double speed, double time)</td></tr>
<tr class="memdesc:aaf2b57e29c053c7e3901ec5ee3cb047d"><td class="mdescLeft">&#160;</td><td class="mdescRight">moves Scribbler forward for a specified time and speed  <a href="#aaf2b57e29c053c7e3901ec5ee3cb047d"></a><br/></td></tr>
<tr class="memitem:af55f107794f40ee2f77dd6817ad1453f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_myro_c_dev_8h.html#af55f107794f40ee2f77dd6817ad1453f">rFastForward</a> (double time)</td></tr>
<tr class="memdesc:af55f107794f40ee2f77dd6817ad1453f"><td class="mdescLeft">&#160;</td><td class="mdescRight">moves Scribbler forward at the largest possible speed for a specified time  <a href="#af55f107794f40ee2f77dd6817ad1453f"></a><br/></td></tr>
<tr class="memitem:aa5544de8b24ee7917bcb1ba695071459"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_myro_c_dev_8h.html#aa5544de8b24ee7917bcb1ba695071459">rBackward</a> (double speed, double time)</td></tr>
<tr class="memdesc:aa5544de8b24ee7917bcb1ba695071459"><td class="mdescLeft">&#160;</td><td class="mdescRight">moves Scribbler backward for a specified time and speed  <a href="#aa5544de8b24ee7917bcb1ba695071459"></a><br/></td></tr>
<tr class="memitem:a6712dd6e8442e19ff28158adeaf7c0d0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_myro_c_dev_8h.html#a6712dd6e8442e19ff28158adeaf7c0d0">rMotors</a> (double leftSpeed, double rightSpeed)</td></tr>
<tr class="memdesc:a6712dd6e8442e19ff28158adeaf7c0d0"><td class="mdescLeft">&#160;</td><td class="mdescRight">move robot with given speeds for the left and right motors continues until given another motion command or disconnected (non-blocking)  <a href="#a6712dd6e8442e19ff28158adeaf7c0d0"></a><br/></td></tr>
<tr class="memitem:ac561c993b092a153091bb20d2e4aca45"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_myro_c_dev_8h.html#ac561c993b092a153091bb20d2e4aca45">rStop</a> ()</td></tr>
<tr class="memdesc:ac561c993b092a153091bb20d2e4aca45"><td class="mdescLeft">&#160;</td><td class="mdescRight">directs robot to stop movement  <a href="#ac561c993b092a153091bb20d2e4aca45"></a><br/></td></tr>
<tr class="memitem:ae0c1a7d7ba14f6efb8df0db1f4bc08b9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_myro_c_dev_8h.html#ae0c1a7d7ba14f6efb8df0db1f4bc08b9">rHardStop</a> ()</td></tr>
<tr class="memdesc:ae0c1a7d7ba14f6efb8df0db1f4bc08b9"><td class="mdescLeft">&#160;</td><td class="mdescRight">cuts power to the motor of the robot  <a href="#ae0c1a7d7ba14f6efb8df0db1f4bc08b9"></a><br/></td></tr>
<tr class="memitem:a4e10733a73b58955046a5cf2252117a0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_picture.html">Picture</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_myro_c_dev_8h.html#a4e10733a73b58955046a5cf2252117a0">rTakePicture</a> ()</td></tr>
<tr class="memdesc:a4e10733a73b58955046a5cf2252117a0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Use the camera to take a photo.  <a href="#a4e10733a73b58955046a5cf2252117a0"></a><br/></td></tr>
<tr class="memitem:aae5f14b4e6e28456e3a563b027052c02"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_myro_c_dev_8h.html#aae5f14b4e6e28456e3a563b027052c02">rSavePicture</a> (<a class="el" href="struct_picture.html">Picture</a> pic, char *filename)</td></tr>
<tr class="memdesc:aae5f14b4e6e28456e3a563b027052c02"><td class="mdescLeft">&#160;</td><td class="mdescRight">Save a <a class="el" href="struct_picture.html" title="Struct for a picture object.">Picture</a> to a .jpeg.  <a href="#aae5f14b4e6e28456e3a563b027052c02"></a><br/></td></tr>
<tr class="memitem:a22bed206f3ae7563a116be255e91906e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_picture.html">Picture</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_myro_c_dev_8h.html#a22bed206f3ae7563a116be255e91906e">rLoadPicture</a> (char *filename)</td></tr>
<tr class="memdesc:a22bed206f3ae7563a116be255e91906e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load a picture from a .jpeg file.  <a href="#a22bed206f3ae7563a116be255e91906e"></a><br/></td></tr>
<tr class="memitem:aef27262c15e206579736b5fca76b00c9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_myro_c_dev_8h.html#aef27262c15e206579736b5fca76b00c9">rDisplayPicture</a> (<a class="el" href="struct_picture.html">Picture</a> pic, double duration, const char *windowTitle)</td></tr>
<tr class="memdesc:aef27262c15e206579736b5fca76b00c9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Display a picture in a new window.  <a href="#aef27262c15e206579736b5fca76b00c9"></a><br/></td></tr>
</table>
<a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Header for a C-based, my-robot package for the Scribbler 2. </p>
<dl class="section author"><dt>Authors</dt><dd>Spencer Liberto </dd>
<dd>
Dilan Ustek </dd>
<dd>
Jordan Yuan </dd>
<dd>
Henry M. Walker </dd>
<dd>
Anita DeWitt </dd>
<dd>
Jason Liu </dd>
<dd>
Nick Knoebber </dd>
<dd>
Vasilisa Bashlovkina</dd></dl>
<p>Based on a C++ package by April O'Neill, David Cowden, Dilan Ustek, Erik Opavsky, and Henry M. Walker</p>
<dl class="section note"><dt>Note</dt><dd>There is an r in the beginning of every function to make it easier to understand whether it is a robot function. </dd></dl>
</div><h2>Function Documentation</h2>
<a class="anchor" id="aa5544de8b24ee7917bcb1ba695071459"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rBackward </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>speed</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>time</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>moves Scribbler backward for a specified time and speed </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">speed</td><td>the rate at which the robot should move backward linear range: -1.0 specifies move forward at full speed 0.0 specifies no forward/backward movement 1.0 specifies move backward at full speed </td></tr>
    <tr><td class="paramname">time</td><td>specifies the duration of the turn if negative: robot continues to go backward until given another motion command or disconnected (non-blocking) if nonnegative: robot moves backward for the given duration, in seconds </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aa46e349ecd38fc90f8d7cea9bb8678d6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rBeep </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>duration</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>frequency</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Beeps with the given duration and frequency. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">duration</td><td>length of note in seconds </td></tr>
    <tr><td class="paramname">frequency</td><td>frequency of pitch in cycles per second (hertz) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>duration &gt; 0.0 </dd></dl>

</div>
</div>
<a class="anchor" id="a37ccc278b3ecca6290debf1929d1e479"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rBeep2 </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>duration</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>freq1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>freq2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Generates two notes for the prescribed duration. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">duration</td><td>length of note in seconds </td></tr>
    <tr><td class="paramname">freq1</td><td>frequency of first pitch in cycles per second (hertz) </td></tr>
    <tr><td class="paramname">freq2</td><td>frequency of second pitch in cycles per second (hertz) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>duration &gt; 0.0 </dd></dl>

</div>
</div>
<a class="anchor" id="aadfc48e2707da0e4f1f01e6aa14b6ef4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int rConnect </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>address</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>connects program to Scribbler </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">address</td><td>string, giving name of workstation port or a Scribbler Bluetooth designation</td></tr>
  </table>
  </dd>
</dl>
<p>several string formats are possible a communications port, such as "/dev/rfcomm0" a MAC address, such as "00:1E:19:01:0E:13" a Scribbler 2 fluke serial number, such as "245787" a full IPRE serial number, such as "IPRE245787" a Fluke 2 serial number (hexadecimal), such as "021F" a full Fluke 2 serial number, such as "Fluke2-021F"</p>
<dl class="section return"><dt>Returns</dt><dd>the socket number of communications port</dd></dl>
<dl class="section post"><dt>Postcondition</dt><dd>subsequent communications will take place through this socket, unless changed by rSetConnection </dd></dl>

</div>
</div>
<a class="anchor" id="a169e562028db3fcbbe8ab6a35476bbb8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rDisconnect </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>disconnect program from Scribbler </p>

</div>
</div>
<a class="anchor" id="aef27262c15e206579736b5fca76b00c9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rDisplayPicture </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_picture.html">Picture</a>&#160;</td>
          <td class="paramname"><em>pic</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>duration</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>windowTitle</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Display a picture in a new window. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pic</td><td>RGB picture struct from Scribbler 2 camera </td></tr>
    <tr><td class="paramname">duration</td><td>if duration &gt; 0, operation is blocking if duration &lt;= 0, operation is non-blocking for duration != 0, picture displayed for abs(duration) seconds or until picture closed manually if duration == 0, picture displayed until closed manually </td></tr>
    <tr><td class="paramname">windowTitle</td><td>The title of the window that appears. white spaces will be replaced with underscores. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>windowTitle is less than 100 characters. </dd></dl>

</div>
</div>
<a class="anchor" id="af55f107794f40ee2f77dd6817ad1453f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rFastForward </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>time</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>moves Scribbler forward at the largest possible speed for a specified time </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">time</td><td>specifies the duration of movement if negative: robot continues to move forward until given another motion command or disconnected (non-blocking) if nonnegative: robot moves forward for the given duration, in seconds </td></tr>
  </table>
  </dd>
</dl>
<dl class="section warning"><dt>Warning</dt><dd>may take longer than usual to execute </dd></dl>

</div>
</div>
<a class="anchor" id="aaf2b57e29c053c7e3901ec5ee3cb047d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rForward </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>speed</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>time</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>moves Scribbler forward for a specified time and speed </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">speed</td><td>the rate at which the robot should move forward linear range: -1.0 specifies move backward at full speed 0.0 specifies no forward/backward movement 1.0 specifies move forward at full speed </td></tr>
    <tr><td class="paramname">time</td><td>specifies the duration of movement if negative: robot continues to move forward until given another motion command or disconnected (non-blocking) if nonnegative: robot moves forward for the given duration, in seconds </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a80896cdb3ff63acd1fa0a5ce97ba7c9d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double rGetBattery </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the percentage of volts left in the batteries of the scribbler. </p>
<dl class="section return"><dt>Returns</dt><dd>percentage of battery voltage </dd></dl>

</div>
</div>
<a class="anchor" id="a98820d670fcacb6780e68a58a4bc0a8a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rGetBrightAll </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>brightSensors</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>sampleSize</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Read the Fluke's virtual light sensors. Since readings of each brightness sensor can vary substantially (successive readings may differ by 5000-10000), each sensor can be queried sampleSize times and an average obtained. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">brightSensors</td><td>array to store intensity values </td></tr>
    <tr><td class="paramname">sampleSize</td><td>how many readings are taken for each sensor </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>space already allocated for brightSensors array sampleSize &gt; 0 </dd></dl>
<dl class="section post"><dt>Postcondition</dt><dd>brightSensors[0] gives average value for left sensor brightSensors[1] gives average value for middle sensor brightSensors[2] gives average value for right sensor Brightness values near 0 represent bright light Brightness values may extend to about 65535 for a very dark region. </dd></dl>

</div>
</div>
<a class="anchor" id="a6c898c1c12957822fbd0e2b68f573c4d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int rGetBrightTxt </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>sensorName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>sampleSize</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Reads one of the Fluke's virtual light sensors. Since values of each obstacle sensor can vary substantially (successive readings may differ by 5000-10000), the sensor can be queried sampleSize times and an average obtained. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">sensorName</td><td>name of the obstacle sensor </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>sensorName is "left", "center", "middle", or "right" (not case sensitive) designations "center" and "middle" are alternatives for the same light sensor </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">sampleSize</td><td>how many readings are taken for the sensor </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>sampleSize &gt; 0 </dd></dl>
<dl class="section return"><dt>Returns</dt><dd>reading from the specified obstacle sensor, averaged over sampleSize number of data samples Brightness values near 0 represent bright light Brightness values may extend to about 65535 for a very dark region. </dd></dl>

</div>
</div>
<a class="anchor" id="a07e585491ba7af9e13779f9e3db6fd31"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* rGetForwardness </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets the forwardness of the Scribbler. </p>
<dl class="section return"><dt>Returns</dt><dd>either "fluke-forward" or "scribbler-forward" </dd></dl>

</div>
</div>
<a class="anchor" id="a1e10a9735a4b8dc8c79100905c30ecab"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rGetInfo </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>infoBuffer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>returns information about the robot's dongle, firmware, and communication mode as a 60 character array in infoBuffer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">infoBuffer</td><td>a pre-defined, 60-character array </td></tr>
  </table>
  </dd>
</dl>
<dl class="section post"><dt>Postcondition</dt><dd>infoBuffer contains relevant robot information </dd></dl>

</div>
</div>
<a class="anchor" id="ab4bf6868424a63a95a85decea8a93fc2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rGetIRAll </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>irSensors</em>[2], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>sampleSize</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get an array of true/false values regarding the presence of obstacle based on the average values of each of the three IR sensors. Since readings of each light sensor can vary substantially, each sensor can be queried sampleSize times and an average obtained. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">irSensors</td><td>array to store intensity values </td></tr>
    <tr><td class="paramname">sampleSize</td><td>how many readings are taken for each sensor </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>space already allocated for irSensors array sampleSize &gt; 0 </dd></dl>
<dl class="section post"><dt>Postcondition</dt><dd>irSensors[0] checks obstacle for left sensor irSensors[1] checks obstacle for right sensor </dd>
<dd>
for each irSensors array value return 0 indicates no obstacle detected return 1 indicates obstacle detected </dd></dl>

</div>
</div>
<a class="anchor" id="afdf7579ce632c07de1d90f27d67abff7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int rGetIRTxt </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>sensorName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>sampleSize</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Use specified IR sensor to determine if obstacle is present. Since values of each light sensor can vary substantially, the sensor can be queried sampleSize times and an average obtained. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">sensorName</td><td>name of the light sensor </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>sensorName is "left" or "right" (not case sensitive) </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">sampleSize</td><td>how many readings are taken for the sensor </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>sampleSize &gt; 0 </dd></dl>
<dl class="section return"><dt>Returns</dt><dd>true/false (0/1) determination of obstacle, based on IR sensorName sensor, averaged over sampleSize number of data samples </dd></dl>
<dl class="section post"><dt>Postcondition</dt><dd>return 0 indicates no obstacle detected return 1 indicates obstacle detected </dd></dl>

</div>
</div>
<a class="anchor" id="a9006ba8c581c7543d7d460d76c06d077"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rGetLightsAll </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>lightSensors</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>sampleSize</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the average values of each of the three light sensors in an array. Values of each light sensor can somewhat (typically under 5%-10%). To even out variability, the sensor can be queried sampleSize times and an average obtained. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">lightSensors</td><td>array to store intensity values </td></tr>
    <tr><td class="paramname">sampleSize</td><td>how many readings are taken for each sensor </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>space already allocated for lightSensors array sampleSize &gt; 0 </dd></dl>
<dl class="section post"><dt>Postcondition</dt><dd>lightSensors[0] gives average value for left sensor lightSensors[1] gives average value for middle sensor lightSensors[2] gives average value for right sensor Intensity values near 0 represent bright light Intensities may extend to about 65000 for a very dark region. </dd></dl>

</div>
</div>
<a class="anchor" id="aaba34be55fd5db7d8c1ed08ea7caa6c2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int rGetLightTxt </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>sensorName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>sampleSize</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the average values of a specified light sensor. Values of each light sensor can somewhat (typically under 5%-10%). To even out variability, the sensor can be queried sampleSize times and an average obtained. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">sensorName</td><td>name of the light sensor </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>sensorName is "left", "center", "middle", or "right" (not case sensitive) designations "center" and "middle" are alternatives for the same light sensor </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">sampleSize</td><td>how many readings are taken for the sensor </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>sampleSize &gt; 0 </dd></dl>
<dl class="section return"><dt>Returns</dt><dd>reading from the specified light sensor, averaged over sampleSize number of data samples if sensorName invalid, returns -1.0 </dd></dl>

</div>
</div>
<a class="anchor" id="a7fc13d53088ba239a95c99b46b9607e8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rGetLine </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>lineSensors</em>[2], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>sampleSize</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Use Scribbler 2 line sensors of Scribbler to check for a black line on a white surface under the robot. Since values of each light sensor can vary substantially, the sensor can be queried sampleSize times and an average obtained. </p>
<dl class="section warning"><dt>Warning</dt><dd>results of these sensors may be flakey! </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">lineSensors</td><td>array to store line values detected </td></tr>
    <tr><td class="paramname">sampleSize</td><td>how many readings are taken for each sensor </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>space already allocated for lineSensors array sampleSize &gt; 0 </dd></dl>
<dl class="section post"><dt>Postcondition</dt><dd>lineSensors[0] checks left sensor for line lineSensors[1] checks right sensor for line </dd>
<dd>
for each irSensors array value return 0 indicates line is identified return 1 indicates line is not identified </dd></dl>

</div>
</div>
<a class="anchor" id="a881bb425d86ebb8caacd6be66c2f8a37"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* rGetName </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the name of the robot. </p>
<dl class="section return"><dt>Returns</dt><dd>information about the name of the robot </dd></dl>
<dl class="section post"><dt>Postcondition</dt><dd>the returned name is a newly-allocated 17-byte string </dd></dl>

</div>
</div>
<a class="anchor" id="a3a47f1f85c9fa6d68b5ebd8c0ad2e484"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rGetObstacleAll </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>obstSensors</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>sampleSize</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the average values of the three obstacle sensors in an array. Since readings of each obstacle sensor can vary substantially (successive readings may differ by several hundred or more), each sensor can be queried sampleSize times and an average obtained. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">obstSensors</td><td>array to store intensity values </td></tr>
    <tr><td class="paramname">sampleSize</td><td>how many readings are taken for each sensor </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>space already allocated for obstSensors array sampleSize &gt; 0 </dd></dl>
<dl class="section post"><dt>Postcondition</dt><dd>obstSensors[0] gives average value for left sensor obstSensors[1] gives average value for middle sensor obstSensors[2] gives average value for right sensor Obstacle values near 0 represent no obstacle is seen Obstacle values may approach 6000 as obstacle gets close. </dd></dl>
<dl class="section warning"><dt>Warning</dt><dd>As battery degrades, sensor readings degrade, yielding systematically lower numbers. </dd></dl>

</div>
</div>
<a class="anchor" id="a5853bf9f106b47ed0e767adf8fab0d0b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int rGetObstacleTxt </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>sensorName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>sampleSize</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the average values of a specified obstacle (IR) sensor. Since values of each obstacle sensor can vary substantially (successive readings may differ by several hundred or more), the sensor can be queried sampleSize times and an average obtained. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">sensorName</td><td>name of the obstacle sensor </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>sensorName is "left", "center", "middle", or "right" (not case sensitive) designations "center" and "middle" are alternatives for the same light sensor </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">sampleSize</td><td>how many readings are taken for the sensor </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>space already allocated for vals array sampleSize &gt; 0 </dd></dl>
<dl class="section return"><dt>Returns</dt><dd>reading from the specified obstacle sensor, averaged over sampleSize number of data samples Obstacle values near 0 represent no obstacle is seen Obstacle values may approach 6000 as obstacle gets close. </dd></dl>
<dl class="section warning"><dt>Warning</dt><dd>As battery degrades, sensor values degrade, yielding systematically lower numbers. </dd></dl>

</div>
</div>
<a class="anchor" id="a9296f6acbac4ef59cfc6cb0dc535c60f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int rGetStall </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>sampleSize</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Determine if robot has stalled Since readings of each brightness sensor can vary substantially, each sensor can be queried sampleSize times and an average obtained. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">sampleSize</td><td>how many readings are taken for each sensor </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>sampleSize &gt; 0 </dd></dl>
<dl class="section return"><dt>Returns</dt><dd>whether or not robot current has stalled </dd></dl>
<dl class="section post"><dt>Postcondition</dt><dd>Returns 1 if the robot has stalled Returns 0 otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="ae0c1a7d7ba14f6efb8df0db1f4bc08b9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rHardStop </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>cuts power to the motor of the robot </p>

</div>
</div>
<a class="anchor" id="a22bed206f3ae7563a116be255e91906e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_picture.html">Picture</a> rLoadPicture </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>filename</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Load a picture from a .jpeg file. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">filename</td><td>the name of the file </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>file must exist </dd>
<dd>
file must be a 256x192 .jpeg or .jpg </dd></dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="struct_picture.html" title="Struct for a picture object.">Picture</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a6712dd6e8442e19ff28158adeaf7c0d0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rMotors </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>leftSpeed</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>rightSpeed</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>move robot with given speeds for the left and right motors continues until given another motion command or disconnected (non-blocking) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">leftSpeed</td><td>the rate at which the left wheel should turn linear range: -1.0 specifies move backward at full speed 0.0 specifies no forward/backward movement 1.0 specifies move forwardward at full speed </td></tr>
    <tr><td class="paramname">rightSpeed</td><td>the rate at which the right wheel should turn linear range: -1.0 specifies move backward at full speed 0.0 specifies no forward/backward movement 1.0 specifies move forward at full speed </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aae5f14b4e6e28456e3a563b027052c02"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rSavePicture </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_picture.html">Picture</a>&#160;</td>
          <td class="paramname"><em>pic</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>filename</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Save a <a class="el" href="struct_picture.html" title="Struct for a picture object.">Picture</a> to a .jpeg. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pic</td><td>RGB picture struct from Scribbler 2 camera </td></tr>
    <tr><td class="paramname">filename</td><td>the name of the file </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>filename ends with .jpeg or .jpg. </dd></dl>
<dl class="section post"><dt>Postcondition</dt><dd>If the file does not exist, a new file will be created. </dd>
<dd>
If the file exists, the file will be overwritten. </dd></dl>

</div>
</div>
<a class="anchor" id="a792741a6104a4701e1bba00b69e5cb2d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rSetConnection </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>socket_num</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>set current connection to the socket number </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">socket_num</td><td>the number of an open socket for communication </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>socket_num has been returned by rConnect the designated socket has not been closed </dd></dl>

</div>
</div>
<a class="anchor" id="a3753b86dcb4de002e8456501ca35edae"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rSetForwardness </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>direction</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>specifies which end of the Scribbler is considered the front </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">direction</td><td>identifies front direction </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>direction is either "fluke-forward" or "scribbler-forward" (not case sensitive) </dd></dl>

</div>
</div>
<a class="anchor" id="a9e21fdea3dffc9e336739c8e7d455b59"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rSetForwardnessTxt </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>direction</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>alternative to rSetForwardness for compatibility with earlier MyroC </p>

</div>
</div>
<a class="anchor" id="ab319898f4ab7d48f15e1215db8e5b4ba"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rSetIRPower </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>power</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the amount of power for the dongle's IR sensors. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">power</td><td>the desired power level for the IR sensors </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>power is between 0 and 255 (inclusive) </dd></dl>

</div>
</div>
<a class="anchor" id="a2466176fa2332b88e5013d6b3fe9ceb8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rSetLEDBack </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>led</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the the intensity of the back fluke LED,. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">led</td><td>intensity of the LED values between 0 and 1 provide a range of brightness from off to full intensity values bigger than 1 are treated as 1 (full brightness) values less than 0 are treated as 0 (LED off). </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a21581ded1f409300e8f63f4c41c2f2f0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rSetLEDFront </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>led</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the front [fluke] LED on or off. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">led</td><td>value 1 turns on LED value 0 turns off LED </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>led must be 0 or 1 </dd></dl>

</div>
</div>
<a class="anchor" id="ab6f8b6b28334162e70f7cf3a3b165e4b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rSetName </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Change name stored in the robot to the 16-byte name given. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>specifies new name of robot if &lt; 16 bytes given, name is filled with null characters if &gt;= 16 bytes given, name is truncated to 15 bytes plus null </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ac561c993b092a153091bb20d2e4aca45"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rStop </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>directs robot to stop movement </p>

</div>
</div>
<a class="anchor" id="a4e10733a73b58955046a5cf2252117a0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_picture.html">Picture</a> rTakePicture </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Use the camera to take a photo. </p>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="struct_picture.html" title="Struct for a picture object.">Picture</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a1b2462eb7a3149a89cfe73f39339ed89"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rTurnLeft </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>speed</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>time</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>turn Scribbler left for a specified time and speed </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">speed</td><td>the rate at which the robot should move left linear range: -1.0 specifies right turn at full speed 0.0 specifies no turn 1.0 specifies left turn at full speed </td></tr>
    <tr><td class="paramname">time</td><td>specifies the duration of the turn if negative: robot continues to turn until given another motion command or disconnected (non-blocking) if nonnegative: robot turns for the given duration, in seconds </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a0c3496dd17992e9788110c15c017e566"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rTurnRight </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>speed</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>time</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>turn Scribbler right for a specified time and speed </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">speed</td><td>the rate at which the robot should move right linear range: -1.0 specifies left turn at full speed 0.0 specifies no turn 1.0 specifies right turn at full speed </td></tr>
    <tr><td class="paramname">time</td><td>specifies the duration of the turn if negative: robot continues to turn until given another motion command or disconnected (non-blocking) if nonnegative: robot turns for the given duration, in seconds </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aa1a97cc92ee785afb8af4e248d08cbb9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void rTurnSpeed </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>direction</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>speed</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>time</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>turn Scribbler in direction for a specified time and speed </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">direction</td><td>direction of turn, based on looking from the center of the robot and facing forward </td></tr>
    <tr><td class="paramname">speed</td><td>the rate at which the robot should move forward linear range: -1.0 specifies turn at full speed 0.0 specifies no turn 1.0 specifies turn at full speed </td></tr>
    <tr><td class="paramname">time</td><td>specifies the duration of the turn if negative: robot continues to turn until given another motion command or disconnected if nonnegative: robot turns for the given duration, in seconds </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>direction is "left" or "right" </dd></dl>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Thu Oct 16 2014 21:03:18 for MyroCDev by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.1.2
</small></address>
</body>
</html>
